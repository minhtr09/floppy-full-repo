{
  "abi": "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"CANCELLATION_PERIOD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CANCEL_PERMIT_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DOMAIN_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_PERCENTAGE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PERMIT_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"cancelBet\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"cancelBet\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"claimReward\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"rewardAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAllBets\",\"inputs\":[],\"outputs\":[{\"name\":\"betIds\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"bets\",\"type\":\"tuple[]\",\"internalType\":\"struct IFloppyGamble.BetInfo[]\",\"components\":[{\"name\":\"requester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetStatus\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"win\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"claimed\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAsset\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBetInfoById\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"struct IFloppyGamble.BetInfo\",\"components\":[{\"name\":\"requester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetStatus\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"win\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"claimed\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBetsByStatus\",\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetStatus\"}],\"outputs\":[{\"name\":\"betIds\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"bets\",\"type\":\"tuple[]\",\"internalType\":\"struct IFloppyGamble.BetInfo[]\",\"components\":[{\"name\":\"requester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetStatus\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"win\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"claimed\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLastBetId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMaxBetAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMaxPointsForTier\",\"inputs\":[{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMinBetAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMinPointsForTier\",\"inputs\":[{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPenaltyForCanceledBet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPointsRangeForTier\",\"inputs\":[{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getReward\",\"inputs\":[{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"},{\"name\":\"betAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSigner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWallet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\",\"internalType\":\"contract IERC20\"},{\"name\":\"wallet\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"maxBetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"minBetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"penaltyForCanceledBet\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"pointsRanges\",\"type\":\"tuple[]\",\"internalType\":\"struct IFloppyGamble.PointsRange[]\",\"components\":[{\"name\":\"minPoints\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"maxPoints\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"rewardPercentages\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"placeBet\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"tier\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetTier\"}],\"outputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"resolveBet\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"resolveBetAndClaimReward\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"rewardAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAsset\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\",\"internalType\":\"contract IERC20\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMaxBetAmount\",\"inputs\":[{\"name\":\"maxBetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinBetAmount\",\"inputs\":[{\"name\":\"minBetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPenaltyForCanceledBet\",\"inputs\":[{\"name\":\"penaltyForCanceledBet\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPointsRanges\",\"inputs\":[{\"name\":\"pointsRanges\",\"type\":\"tuple[]\",\"internalType\":\"struct IFloppyGamble.PointsRange[]\",\"components\":[{\"name\":\"minPoints\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"maxPoints\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRewardPercentages\",\"inputs\":[{\"name\":\"rewardPercentages\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSigner\",\"inputs\":[{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setWallet\",\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"AssetUpdated\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BetCanceled\",\"inputs\":[{\"name\":\"requester\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"betId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BetPlaced\",\"inputs\":[{\"name\":\"requester\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"betId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BetResolved\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"win\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MaxBetAmountUpdated\",\"inputs\":[{\"name\":\"maxBetAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinBetAmountUpdated\",\"inputs\":[{\"name\":\"minBetAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PenaltyForCanceledBetUpdated\",\"inputs\":[{\"name\":\"penaltyForCanceledBet\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PointsRangesUpdated\",\"inputs\":[{\"name\":\"pointsRanges\",\"type\":\"tuple[]\",\"indexed\":false,\"internalType\":\"struct IFloppyGamble.PointsRange[]\",\"components\":[{\"name\":\"minPoints\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"maxPoints\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardClaimed\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardPercentagesUpdated\",\"inputs\":[{\"name\":\"rewardPercentages\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SignerUpdated\",\"inputs\":[{\"name\":\"signer\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WalletUpdated\",\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"BetAlreadyCanceled\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"BetAlreadyResolved\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"BetDoesNotExist\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"BetLost\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"ErrNotRequester\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidBetAmount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidBetId\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidBetStatus\",\"inputs\":[{\"name\":\"expected\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetStatus\"},{\"name\":\"actual\",\"type\":\"uint8\",\"internalType\":\"enum IFloppyGamble.BetStatus\"}]},{\"type\":\"error\",\"name\":\"InvalidBetTier\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidMaxBetAmount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidMinBetAmount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPenaltyForCanceledBet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NullAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"RewardAlreadyClaimed\",\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SignatureExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TooSoonToCancel\",\"inputs\":[]}]",
  "absolutePath": "FloppyGamble.sol",
  "address": "0x4Db1e418Cf4a49E8E1281928f007cF598F8bBEA9",
  "ast": "",
  "blockNumber": 32477565,
  "bytecode": "\"0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100408161004e565b5061004961009e565b610150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100ee5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161461014d5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b612f908061015f6000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80637cfbc7a511610160578063a6c8260f116100d8578063d254b3a21161008c578063deaa59df11610071578063deaa59df1461053b578063f2fde38b1461054e578063f3105f6a1461056157600080fd5b8063d254b3a214610500578063d9198a151461051357600080fd5b8063b30187a5116100bd578063b30187a5146104d2578063c6d87da9146104da578063d0d552dd146104ed57600080fd5b8063a6c8260f146104ac578063ae169a50146104bf57600080fd5b80638cee193f1161012f5780638f8f1b7c116101145780638f8f1b7c146104735780639bd8539514610486578063a32589501461049957600080fd5b80638cee193f1461044f5780638da5cb5b1461046257600080fd5b80637cfbc7a514610419578063816521521461042c57806382a5285d1461043f5780638b01b6681461044757600080fd5b80634c255c971161020e578063700eae73116101c2578063715018a6116101a7578063715018a6146103ed5780637ac3c02f146103f55780637c1262f41461040657600080fd5b8063700eae73146103b7578063707883e7146103cd57600080fd5b80635c222bad116101f35780635c222bad146103805780636c188593146103915780636c19e783146103a457600080fd5b80634c255c971461036e578063550ed1f01461037857600080fd5b8063306b1b3e11610265578063357401f51161024a578063357401f51461033f5780633644e5151461035257806348c060da1461035b57600080fd5b8063306b1b3e1461030f57806330adf81f1461031857600080fd5b806304f38b5d1461029757806310383fe6146102ae57806313299604146102c357806320606b70146102e8575b600080fd5b6008545b6040519081526020015b60405180910390f35b6102c16102bc366004612825565b610574565b005b600b546001600160a01b03165b6040516001600160a01b0390911681526020016102a5565b61029b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61029b610e1081565b61029b7f50868ac445b6de6f2e1973a0c096591dec8882fe4d476c7b8682133b74f7452381565b6102c161034d366004612867565b6105ab565b61029b60015481565b61029b610369366004612894565b6106ca565b61029b620186a081565b60065461029b565b600a546001600160a01b03166102d0565b6102c161039f366004612867565b610724565b6102c16103b23660046128d3565b61077d565b6103bf6107b5565b6040516102a59291906129c9565b6103e06103db366004612867565b6109ef565b6040516102a59190612a4f565b6102c1610b3f565b6009546001600160a01b03166102d0565b6102c1610414366004612aa3565b610b53565b6102c1610427366004612867565b610b86565b61029b61043a366004612ad9565b610bdc565b60075461029b565b61029b600081565b61029b61045d366004612b97565b610c1e565b6000546001600160a01b03166102d0565b61029b610481366004612bf1565b610d19565b6102c1610494366004612b97565b610fcc565b6102c16104a7366004612867565b61119d565b6103bf6104ba366004612c2f565b6111f5565b61029b6104cd366004612867565b6114db565b61029b6115d0565b6102c16104e8366004612c50565b6115e6565b6102c16104fb3660046128d3565b61170c565b61029b61050e366004612ad9565b611744565b610526610521366004612ad9565b611784565b604080519283526020830191909152016102a5565b6102c16105493660046128d3565b6117e8565b6102c161055c3660046128d3565b611820565b6102c161056f366004612c97565b611874565b61057c611af8565b6004811461059d5760405163251f56a160e21b815260040160405180910390fd5b6105a78282611b3e565b5050565b6000818152600260205260409020336105c383611cab565b6105df8260010160159054906101000a900460ff166001611ce6565b81546001600160a01b0382811691161461060c5760405163011f4d2760e41b815260040160405180910390fd5b6002820154600854600090620186a0906106269084612d75565b6106309190612d8c565b600a54600b54919250610650916001600160a01b03918216911683611d45565b600a54610670906001600160a01b03168461066b8486612dae565b611d45565b60018401805460ff60a81b1916600360a81b1790556040518581526001600160a01b038416907fa93e870117c34319bff8abace21e29dab4a1d5d0ffc0c00ab598fcb0f185e6579060200160405180910390a25050505050565b6000620186a0600460008560048111156106e6576106e66128f0565b60048111156106f7576106f76128f0565b815260200190815260200160002054836107119190612d75565b61071b9190612d8c565b90505b92915050565b61072c611af8565b60065481118061073a575080155b15610771576040517fa1739ae100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077a81611dbe565b50565b610785611af8565b6001600160a01b0381166107ac5760405163e99d5ac560e01b815260040160405180910390fd5b61077a81611dfa565b60055460609081908067ffffffffffffffff8111156107d6576107d6612af4565b6040519080825280602002602001820160405280156107ff578160200160208202803683370190505b5092508067ffffffffffffffff81111561081b5761081b612af4565b6040519080825280602002602001820160405280156108a657816020015b61089360408051610140810182526000808252602082018190529091820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001906001900390816108395790505b50915060005b818110156109e957808482815181106108c7576108c7612dc1565b60209081029190910181019190915260008281526002825260409081902081516101408101835281546001600160a01b039081168252600183015490811694820194909452929091830190600160a01b900460ff16600481111561092d5761092d6128f0565b600481111561093e5761093e6128f0565b81526020016001820160159054906101000a900460ff166003811115610966576109666128f0565b6003811115610977576109776128f0565b81526002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff808216151560a084015261010090910416151560c09091015283518490839081106109d6576109d6612dc1565b60209081029190910101526001016108ac565b50509091565b610a4960408051610140810182526000808252602082018190529091820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60008281526002602090815260409182902082516101408101845281546001600160a01b03908116825260018301549081169382019390935292909190830190600160a01b900460ff166004811115610aa457610aa46128f0565b6004811115610ab557610ab56128f0565b81526020016001820160159054906101000a900460ff166003811115610add57610add6128f0565b6003811115610aee57610aee6128f0565b81526002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff808216151560a084015261010090910416151560c09091015292915050565b610b47611af8565b610b516000611e44565b565b610b5b611af8565b60048114610b7c5760405163251f56a160e21b815260040160405180910390fd5b6105a78282611e94565b610b8e611af8565b600754811080610b9c575080155b15610bd3576040517f7d32d1a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077a81612091565b600060036000836004811115610bf457610bf46128f0565b6004811115610c0557610c056128f0565b8152602001908152602001600020600101549050919050565b6040517f9bd853950000000000000000000000000000000000000000000000000000000081526000903090639bd8539590610c63908890889088908890600401612dfb565b600060405180830381600087803b158015610c7d57600080fd5b505af1158015610c91573d6000803e3d6000fd5b50506040517fae169a500000000000000000000000000000000000000000000000000000000081526004810188905230925063ae169a5091506024016020604051808303816000875af1158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d109190612e43565b95945050505050565b6000600654831180610d2c575060075483105b15610d63576040517f9de3d44100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826004811115610d7757610d776128f0565b03610dae576040517f183f358c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416610dd55760405163e99d5ac560e01b815260040160405180910390fd5b600a543390610def906001600160a01b03168230876120c6565b60058054906000610dff83612e5c565b919050559150604051806101400160405280826001600160a01b03168152602001866001600160a01b03168152602001846004811115610e4157610e416128f0565b8152602001600181526020808201879052600060408084018290526060840182905242608085015260a0840182905260c090930181905285815260028252829020835181546001600160a01b039182166001600160a01b0319918216178355928501516001830180549190921693811684178255938501519193919290917fffffffffffffffffffffff0000000000000000000000000000000000000000001617600160a01b836004811115610ef957610ef96128f0565b0217905550606082015160018201805460ff60a81b1916600160a81b836003811115610f2757610f276128f0565b02179055506080820151600282015560a0820151600382015560c0820151600482015560e0820151600582015561010080830151600690920180546101209094015161ffff1990941692151561ff00191692909217921515029190911790556040518281526001600160a01b038216907f43e08d78302cdf9c94e1ffd293c2a3696139ee41cf3199b6f5eed9c7f6cc60909060200160405180910390a2509392505050565b600084815260026020819052604090912090810154610fea86611cab565b6110068260010160159054906101000a900460ff166001611ce6565b42841015611040576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815460018301546110639188916001600160a01b03918216911688858989612105565b60018201805460ff60a81b19167502000000000000000000000000000000000000000000179081905560038084018790556000918290600160a01b900460ff1660048111156110b4576110b46128f0565b60048111156110c5576110c56128f0565b815260208101919091526040016000205460068401805460ff1916918810801592831790915590915061115857620186a0600460008560010160149054906101000a900460ff16600481111561111d5761111d6128f0565b600481111561112e5761112e6128f0565b815260200190815260200160002054836111489190612d75565b6111529190612d8c565b60048401555b867f99a825dafd25f19a2f36300d5240607fa48cafd42572f5996ac26068385954688260405161118c911515815260200190565b60405180910390a250505050505050565b6111a5611af8565b620186a0811015806111b5575080155b156111ec576040517f16ae118c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077a81612206565b60055460609081906000805b828110156112615785600381111561121b5761121b6128f0565b600082815260026020526040902060010154600160a81b900460ff166003811115611248576112486128f0565b036112595761125682612e5c565b91505b600101611201565b508067ffffffffffffffff81111561127b5761127b612af4565b6040519080825280602002602001820160405280156112a4578160200160208202803683370190505b5093508067ffffffffffffffff8111156112c0576112c0612af4565b60405190808252806020026020018201604052801561134b57816020015b61133860408051610140810182526000808252602082018190529091820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001906001900390816112de5790505b50925060005b828110156114d35785600381111561136b5761136b6128f0565b600082815260026020526040902060010154600160a81b900460ff166003811115611398576113986128f0565b036114cb57808582815181106113b0576113b0612dc1565b60209081029190910181019190915260008281526002825260409081902081516101408101835281546001600160a01b039081168252600183015490811694820194909452929091830190600160a01b900460ff166004811115611416576114166128f0565b6004811115611427576114276128f0565b81526020016001820160159054906101000a900460ff16600381111561144f5761144f6128f0565b6003811115611460576114606128f0565b81526002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff808216151560a084015261010090910416151560c09091015284518590839081106114bf576114bf612dc1565b60200260200101819052505b600101611351565b505050915091565b60008181526002602052604081206114f283611cab565b600181015461150c90600160a81b900460ff166002611ce6565b600681015460ff16611552576040517ffef521ec000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b6006810154610100900460ff1615611599576040517f7443277f00000000000000000000000000000000000000000000000000000000815260048101849052602401611549565b60068101805461ff001916610100179055600481015460018201549092506115ca906001600160a01b03168361223b565b50919050565b600060016005546115e19190612dae565b905090565b6000828152600260205260409020336115fe84611cab565b61161a8260010160159054906101000a900460ff166001611ce6565b81546001600160a01b038281169116146116475760405163011f4d2760e41b815260040160405180910390fd5b611652848285612299565b6002820154600854600090620186a09061166c9084612d75565b6116769190612d8c565b600a54600b54919250611696916001600160a01b03918216911683611d45565b600a546116b1906001600160a01b03168461066b8486612dae565b60018401805460ff60a81b1916600360a81b1790556040518681526001600160a01b038416907fa93e870117c34319bff8abace21e29dab4a1d5d0ffc0c00ab598fcb0f185e6579060200160405180910390a2505050505050565b611714611af8565b6001600160a01b03811661173b5760405163e99d5ac560e01b815260040160405180910390fd5b61077a81612302565b60006003600083600481111561175c5761175c6128f0565b600481111561176d5761176d6128f0565b815260208101919091526040016000205492915050565b60008060006003600085600481111561179f5761179f6128f0565b60048111156117b0576117b06128f0565b815260208082019290925260409081016000208151808301909252805480835260019091015491909201819052909590945092505050565b6117f0611af8565b6001600160a01b0381166118175760405163e99d5ac560e01b815260040160405180910390fd5b61077a8161234c565b611828611af8565b6001600160a01b03811661186b576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401611549565b61077a81611e44565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156118bf5750825b905060008267ffffffffffffffff1660011480156118dc5750303b155b9050811580156118ea575080155b15611921576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561195557845468ff00000000000000001916680100000000000000001785555b61195e33611e44565b611a52604080518082018252600c81527f466c6f70707947616d626c6500000000000000000000000000000000000000006020918201528151808301835260018082527f31000000000000000000000000000000000000000000000000000000000000009183019190915282517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527fccde1516443966be894aef9bd1129ba92f6c978ee46be32d355c9aa6fcacf17a928101929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69282019290925246606082015230608082015260a090209055565b611a5c8989611e94565b611a668787611b3e565b611a6f8f612302565b611a788e61234c565b611a818b611dfa565b611a8a8d612091565b611a938c611dbe565b611a9c8a612206565b8315611ae757845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050505050505050565b6000546001600160a01b03163314610b51576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401611549565b81816000818110611b5157611b51612dc1565b60016000819052600460209081529190910292909201357fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05555082908290818110611b9e57611b9e612dc1565b60026000819052600460209081529190910292909201357f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7555082908290818110611beb57611beb612dc1565b60036000819052600460209081529190910292909201357f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0555082908290818110611c3857611c38612dc1565b6004600081905260209081520291909101357f1a1e6821cde7d0159c0d293177871e09677b4e42307c7db3ba94f8648a5a050f55506040517fa6901dc46e1bfe954191f75fb584f52bffbf8db847dc6584c1928476a7fad5c690611c9f9084908490612e75565b60405180910390a15050565b600554811061077a576040517f7f36fbaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003811115611cf857611cf86128f0565b826003811115611d0a57611d0a6128f0565b146105a75781816040517fa49e2fcc000000000000000000000000000000000000000000000000000000008152600401611549929190612ec7565b6040516001600160a01b03838116602483015260448201839052611db991859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612396565b505050565b60078190556040518181527fc1d36d2328f906f4b042346e6a3a073bf22179c7aa2702bcb8d1b014c39231e3906020015b60405180910390a150565b600980546001600160a01b0319166001600160a01b0383169081179091556040517f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81816000818110611ea757611ea7612dc1565b60016000819052600360209081526040929092029390930180357fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5501357fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054d555082908290818110611f1b57611f1b612dc1565b60026000819052600360209081526040929092029390930180357fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d5501357fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4e555082908290818110611f8f57611f8f612dc1565b6003600081905260208181526040929092029390930180357fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af5501357fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495b055508290829081811061200157612001612dc1565b60046000526003602090815260409182029390930180357f83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe9377246555909201357f83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe937724665550517f591230896a6ba0a1339f8c126f007088fa0b06539eca077cae49b6e9bba6964390611c9f9084908490612ee2565b60068190556040518181527f0e858e4fc13b98505f129e4c64b83a3fcdfcfba2bd6b17d1a218390d19d0e76990602001611def565b6040516001600160a01b0384811660248301528381166044830152606482018390526120ff9186918216906323b872dd90608401611d72565b50505050565b600154604080517f50868ac445b6de6f2e1973a0c096591dec8882fe4d476c7b8682133b74f7452360208201529081018990526001600160a01b0380891660608301528716608082015260a0810186905260c0810185905260e081018490526000916121cb916121c59190610100015b604051602081830303815290604052805190602001206040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b83612412565b6009549091506001600160a01b038083169116146121fc57604051638baa579f60e01b815260040160405180910390fd5b5050505050505050565b60088190556040518181527f534287b2be02d8a21436472f300769fef24590ba6b8e00555ef98742d6eb9c6390602001611def565b600a54612252906001600160a01b03168383611d45565b816001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72418260405161228d91815260200190565b60405180910390a25050565b600154604080516000602082018190529181018690526001600160a01b038516606082015290916122d1916121c59190608001612175565b6009549091506001600160a01b038083169116146120ff57604051638baa579f60e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a90600090a250565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f4edbfac5b40fe46ac1af1fd222b224b38cfeeb9e21bd4fc6344526c245f7549b90600090a250565b60006123ab6001600160a01b0384168361243c565b905080516000141580156123d05750808060200190518101906123ce9190612f1c565b155b15611db9576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401611549565b600080600080612422868661244a565b9250925092506124328282612497565b5090949350505050565b606061071b8383600061259b565b600080600083516041036124845760208401516040850151606086015160001a61247688828585612653565b955095509550505050612490565b50508151600091506002905b9250925092565b60008260038111156124ab576124ab6128f0565b036124b4575050565b60018260038111156124c8576124c86128f0565b036124ff576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115612513576125136128f0565b0361254d576040517ffce698f700000000000000000000000000000000000000000000000000000000815260048101829052602401611549565b6003826003811115612561576125616128f0565b036105a7576040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260048101829052602401611549565b6060814710156125d9576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401611549565b600080856001600160a01b031684866040516125f59190612f3e565b60006040518083038185875af1925050503d8060008114612632576040519150601f19603f3d011682016040523d82523d6000602084013e612637565b606091505b5091509150612647868383612722565b925050505b9392505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561268e5750600091506003905082612718565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156126e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661270e57506000925060019150829050612718565b9250600091508190505b9450945094915050565b6060826127375761273282612797565b61264c565b815115801561274e57506001600160a01b0384163b155b15612790576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611549565b508061264c565b8051156127a75780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083601f8401126127eb57600080fd5b50813567ffffffffffffffff81111561280357600080fd5b6020830191508360208260051b850101111561281e57600080fd5b9250929050565b6000806020838503121561283857600080fd5b823567ffffffffffffffff81111561284f57600080fd5b61285b858286016127d9565b90969095509350505050565b60006020828403121561287957600080fd5b5035919050565b80356005811061288f57600080fd5b919050565b600080604083850312156128a757600080fd5b6128b083612880565b946020939093013593505050565b6001600160a01b038116811461077a57600080fd5b6000602082840312156128e557600080fd5b813561264c816128be565b634e487b7160e01b600052602160045260246000fd5b60058110612916576129166128f0565b9052565b60048110612916576129166128f0565b80516001600160a01b03168252602081015161295160208401826001600160a01b03169052565b5060408101516129646040840182612906565b506060810151612977606084018261291a565b506080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201516129b48285018215159052565b505061012081810151801515848301526120ff565b604080825283519082018190526000906020906060840190828701845b82811015612a02578151845292840192908401906001016129e6565b5050508381038285015284518082528583019183019060005b81811015612a4257612a2e83855161292a565b928401926101409290920191600101612a1b565b5090979650505050505050565b610140810161071e828461292a565b60008083601f840112612a7057600080fd5b50813567ffffffffffffffff811115612a8857600080fd5b6020830191508360208260061b850101111561281e57600080fd5b60008060208385031215612ab657600080fd5b823567ffffffffffffffff811115612acd57600080fd5b61285b85828601612a5e565b600060208284031215612aeb57600080fd5b61071b82612880565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612b1b57600080fd5b813567ffffffffffffffff80821115612b3657612b36612af4565b604051601f8301601f19908116603f01168101908282118183101715612b5e57612b5e612af4565b81604052838152866020858801011115612b7757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612bad57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115612bd957600080fd5b612be587828801612b0a565b91505092959194509250565b600080600060608486031215612c0657600080fd5b8335612c11816128be565b925060208401359150612c2660408501612880565b90509250925092565b600060208284031215612c4157600080fd5b81356004811061264c57600080fd5b60008060408385031215612c6357600080fd5b82359150602083013567ffffffffffffffff811115612c8157600080fd5b612c8d85828601612b0a565b9150509250929050565b6000806000806000806000806000806101008b8d031215612cb757600080fd5b8a35612cc2816128be565b995060208b0135612cd2816128be565b985060408b0135975060608b0135965060808b0135612cf0816128be565b955060a08b0135945060c08b013567ffffffffffffffff80821115612d1457600080fd5b612d208e838f01612a5e565b909650945060e08d0135915080821115612d3957600080fd5b50612d468d828e016127d9565b915080935050809150509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761071e5761071e612d5f565b600082612da957634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561071e5761071e612d5f565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612df2578181015183820152602001612dda565b50506000910152565b8481528360208201528260408201526080606082015260008251806080840152612e2c8160a0850160208701612dd7565b601f01601f19169190910160a00195945050505050565b600060208284031215612e5557600080fd5b5051919050565b600060018201612e6e57612e6e612d5f565b5060010190565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612eae57600080fd5b8260051b80856040850137919091016040019392505050565b60408101612ed5828561291a565b61264c602083018461291a565b6020808252818101839052600090604080840186845b87811015612a42578135835284820135858401529183019190830190600101612ef8565b600060208284031215612f2e57600080fd5b8151801515811461264c57600080fd5b60008251612f50818460208701612dd7565b919091019291505056fea26469706673582212206905540c4a2489ced08c9ab064b78ca5d7b1aaf2c1e7480df96798b4358d9dd264736f6c63430008190033\"",
  "callValue": 0,
  "chainId": 2021,
  "constructorArgs": "0x",
  "contractName": "FloppyGamble",
  "deployedBytecode": "\"0x608060405234801561001057600080fd5b50600436106102925760003560e01c80637cfbc7a511610160578063a6c8260f116100d8578063d254b3a21161008c578063deaa59df11610071578063deaa59df1461053b578063f2fde38b1461054e578063f3105f6a1461056157600080fd5b8063d254b3a214610500578063d9198a151461051357600080fd5b8063b30187a5116100bd578063b30187a5146104d2578063c6d87da9146104da578063d0d552dd146104ed57600080fd5b8063a6c8260f146104ac578063ae169a50146104bf57600080fd5b80638cee193f1161012f5780638f8f1b7c116101145780638f8f1b7c146104735780639bd8539514610486578063a32589501461049957600080fd5b80638cee193f1461044f5780638da5cb5b1461046257600080fd5b80637cfbc7a514610419578063816521521461042c57806382a5285d1461043f5780638b01b6681461044757600080fd5b80634c255c971161020e578063700eae73116101c2578063715018a6116101a7578063715018a6146103ed5780637ac3c02f146103f55780637c1262f41461040657600080fd5b8063700eae73146103b7578063707883e7146103cd57600080fd5b80635c222bad116101f35780635c222bad146103805780636c188593146103915780636c19e783146103a457600080fd5b80634c255c971461036e578063550ed1f01461037857600080fd5b8063306b1b3e11610265578063357401f51161024a578063357401f51461033f5780633644e5151461035257806348c060da1461035b57600080fd5b8063306b1b3e1461030f57806330adf81f1461031857600080fd5b806304f38b5d1461029757806310383fe6146102ae57806313299604146102c357806320606b70146102e8575b600080fd5b6008545b6040519081526020015b60405180910390f35b6102c16102bc366004612825565b610574565b005b600b546001600160a01b03165b6040516001600160a01b0390911681526020016102a5565b61029b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61029b610e1081565b61029b7f50868ac445b6de6f2e1973a0c096591dec8882fe4d476c7b8682133b74f7452381565b6102c161034d366004612867565b6105ab565b61029b60015481565b61029b610369366004612894565b6106ca565b61029b620186a081565b60065461029b565b600a546001600160a01b03166102d0565b6102c161039f366004612867565b610724565b6102c16103b23660046128d3565b61077d565b6103bf6107b5565b6040516102a59291906129c9565b6103e06103db366004612867565b6109ef565b6040516102a59190612a4f565b6102c1610b3f565b6009546001600160a01b03166102d0565b6102c1610414366004612aa3565b610b53565b6102c1610427366004612867565b610b86565b61029b61043a366004612ad9565b610bdc565b60075461029b565b61029b600081565b61029b61045d366004612b97565b610c1e565b6000546001600160a01b03166102d0565b61029b610481366004612bf1565b610d19565b6102c1610494366004612b97565b610fcc565b6102c16104a7366004612867565b61119d565b6103bf6104ba366004612c2f565b6111f5565b61029b6104cd366004612867565b6114db565b61029b6115d0565b6102c16104e8366004612c50565b6115e6565b6102c16104fb3660046128d3565b61170c565b61029b61050e366004612ad9565b611744565b610526610521366004612ad9565b611784565b604080519283526020830191909152016102a5565b6102c16105493660046128d3565b6117e8565b6102c161055c3660046128d3565b611820565b6102c161056f366004612c97565b611874565b61057c611af8565b6004811461059d5760405163251f56a160e21b815260040160405180910390fd5b6105a78282611b3e565b5050565b6000818152600260205260409020336105c383611cab565b6105df8260010160159054906101000a900460ff166001611ce6565b81546001600160a01b0382811691161461060c5760405163011f4d2760e41b815260040160405180910390fd5b6002820154600854600090620186a0906106269084612d75565b6106309190612d8c565b600a54600b54919250610650916001600160a01b03918216911683611d45565b600a54610670906001600160a01b03168461066b8486612dae565b611d45565b60018401805460ff60a81b1916600360a81b1790556040518581526001600160a01b038416907fa93e870117c34319bff8abace21e29dab4a1d5d0ffc0c00ab598fcb0f185e6579060200160405180910390a25050505050565b6000620186a0600460008560048111156106e6576106e66128f0565b60048111156106f7576106f76128f0565b815260200190815260200160002054836107119190612d75565b61071b9190612d8c565b90505b92915050565b61072c611af8565b60065481118061073a575080155b15610771576040517fa1739ae100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077a81611dbe565b50565b610785611af8565b6001600160a01b0381166107ac5760405163e99d5ac560e01b815260040160405180910390fd5b61077a81611dfa565b60055460609081908067ffffffffffffffff8111156107d6576107d6612af4565b6040519080825280602002602001820160405280156107ff578160200160208202803683370190505b5092508067ffffffffffffffff81111561081b5761081b612af4565b6040519080825280602002602001820160405280156108a657816020015b61089360408051610140810182526000808252602082018190529091820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001906001900390816108395790505b50915060005b818110156109e957808482815181106108c7576108c7612dc1565b60209081029190910181019190915260008281526002825260409081902081516101408101835281546001600160a01b039081168252600183015490811694820194909452929091830190600160a01b900460ff16600481111561092d5761092d6128f0565b600481111561093e5761093e6128f0565b81526020016001820160159054906101000a900460ff166003811115610966576109666128f0565b6003811115610977576109776128f0565b81526002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff808216151560a084015261010090910416151560c09091015283518490839081106109d6576109d6612dc1565b60209081029190910101526001016108ac565b50509091565b610a4960408051610140810182526000808252602082018190529091820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60008281526002602090815260409182902082516101408101845281546001600160a01b03908116825260018301549081169382019390935292909190830190600160a01b900460ff166004811115610aa457610aa46128f0565b6004811115610ab557610ab56128f0565b81526020016001820160159054906101000a900460ff166003811115610add57610add6128f0565b6003811115610aee57610aee6128f0565b81526002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff808216151560a084015261010090910416151560c09091015292915050565b610b47611af8565b610b516000611e44565b565b610b5b611af8565b60048114610b7c5760405163251f56a160e21b815260040160405180910390fd5b6105a78282611e94565b610b8e611af8565b600754811080610b9c575080155b15610bd3576040517f7d32d1a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077a81612091565b600060036000836004811115610bf457610bf46128f0565b6004811115610c0557610c056128f0565b8152602001908152602001600020600101549050919050565b6040517f9bd853950000000000000000000000000000000000000000000000000000000081526000903090639bd8539590610c63908890889088908890600401612dfb565b600060405180830381600087803b158015610c7d57600080fd5b505af1158015610c91573d6000803e3d6000fd5b50506040517fae169a500000000000000000000000000000000000000000000000000000000081526004810188905230925063ae169a5091506024016020604051808303816000875af1158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d109190612e43565b95945050505050565b6000600654831180610d2c575060075483105b15610d63576040517f9de3d44100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826004811115610d7757610d776128f0565b03610dae576040517f183f358c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416610dd55760405163e99d5ac560e01b815260040160405180910390fd5b600a543390610def906001600160a01b03168230876120c6565b60058054906000610dff83612e5c565b919050559150604051806101400160405280826001600160a01b03168152602001866001600160a01b03168152602001846004811115610e4157610e416128f0565b8152602001600181526020808201879052600060408084018290526060840182905242608085015260a0840182905260c090930181905285815260028252829020835181546001600160a01b039182166001600160a01b0319918216178355928501516001830180549190921693811684178255938501519193919290917fffffffffffffffffffffff0000000000000000000000000000000000000000001617600160a01b836004811115610ef957610ef96128f0565b0217905550606082015160018201805460ff60a81b1916600160a81b836003811115610f2757610f276128f0565b02179055506080820151600282015560a0820151600382015560c0820151600482015560e0820151600582015561010080830151600690920180546101209094015161ffff1990941692151561ff00191692909217921515029190911790556040518281526001600160a01b038216907f43e08d78302cdf9c94e1ffd293c2a3696139ee41cf3199b6f5eed9c7f6cc60909060200160405180910390a2509392505050565b600084815260026020819052604090912090810154610fea86611cab565b6110068260010160159054906101000a900460ff166001611ce6565b42841015611040576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815460018301546110639188916001600160a01b03918216911688858989612105565b60018201805460ff60a81b19167502000000000000000000000000000000000000000000179081905560038084018790556000918290600160a01b900460ff1660048111156110b4576110b46128f0565b60048111156110c5576110c56128f0565b815260208101919091526040016000205460068401805460ff1916918810801592831790915590915061115857620186a0600460008560010160149054906101000a900460ff16600481111561111d5761111d6128f0565b600481111561112e5761112e6128f0565b815260200190815260200160002054836111489190612d75565b6111529190612d8c565b60048401555b867f99a825dafd25f19a2f36300d5240607fa48cafd42572f5996ac26068385954688260405161118c911515815260200190565b60405180910390a250505050505050565b6111a5611af8565b620186a0811015806111b5575080155b156111ec576040517f16ae118c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077a81612206565b60055460609081906000805b828110156112615785600381111561121b5761121b6128f0565b600082815260026020526040902060010154600160a81b900460ff166003811115611248576112486128f0565b036112595761125682612e5c565b91505b600101611201565b508067ffffffffffffffff81111561127b5761127b612af4565b6040519080825280602002602001820160405280156112a4578160200160208202803683370190505b5093508067ffffffffffffffff8111156112c0576112c0612af4565b60405190808252806020026020018201604052801561134b57816020015b61133860408051610140810182526000808252602082018190529091820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001906001900390816112de5790505b50925060005b828110156114d35785600381111561136b5761136b6128f0565b600082815260026020526040902060010154600160a81b900460ff166003811115611398576113986128f0565b036114cb57808582815181106113b0576113b0612dc1565b60209081029190910181019190915260008281526002825260409081902081516101408101835281546001600160a01b039081168252600183015490811694820194909452929091830190600160a01b900460ff166004811115611416576114166128f0565b6004811115611427576114276128f0565b81526020016001820160159054906101000a900460ff16600381111561144f5761144f6128f0565b6003811115611460576114606128f0565b81526002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff808216151560a084015261010090910416151560c09091015284518590839081106114bf576114bf612dc1565b60200260200101819052505b600101611351565b505050915091565b60008181526002602052604081206114f283611cab565b600181015461150c90600160a81b900460ff166002611ce6565b600681015460ff16611552576040517ffef521ec000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b6006810154610100900460ff1615611599576040517f7443277f00000000000000000000000000000000000000000000000000000000815260048101849052602401611549565b60068101805461ff001916610100179055600481015460018201549092506115ca906001600160a01b03168361223b565b50919050565b600060016005546115e19190612dae565b905090565b6000828152600260205260409020336115fe84611cab565b61161a8260010160159054906101000a900460ff166001611ce6565b81546001600160a01b038281169116146116475760405163011f4d2760e41b815260040160405180910390fd5b611652848285612299565b6002820154600854600090620186a09061166c9084612d75565b6116769190612d8c565b600a54600b54919250611696916001600160a01b03918216911683611d45565b600a546116b1906001600160a01b03168461066b8486612dae565b60018401805460ff60a81b1916600360a81b1790556040518681526001600160a01b038416907fa93e870117c34319bff8abace21e29dab4a1d5d0ffc0c00ab598fcb0f185e6579060200160405180910390a2505050505050565b611714611af8565b6001600160a01b03811661173b5760405163e99d5ac560e01b815260040160405180910390fd5b61077a81612302565b60006003600083600481111561175c5761175c6128f0565b600481111561176d5761176d6128f0565b815260208101919091526040016000205492915050565b60008060006003600085600481111561179f5761179f6128f0565b60048111156117b0576117b06128f0565b815260208082019290925260409081016000208151808301909252805480835260019091015491909201819052909590945092505050565b6117f0611af8565b6001600160a01b0381166118175760405163e99d5ac560e01b815260040160405180910390fd5b61077a8161234c565b611828611af8565b6001600160a01b03811661186b576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401611549565b61077a81611e44565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156118bf5750825b905060008267ffffffffffffffff1660011480156118dc5750303b155b9050811580156118ea575080155b15611921576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561195557845468ff00000000000000001916680100000000000000001785555b61195e33611e44565b611a52604080518082018252600c81527f466c6f70707947616d626c6500000000000000000000000000000000000000006020918201528151808301835260018082527f31000000000000000000000000000000000000000000000000000000000000009183019190915282517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527fccde1516443966be894aef9bd1129ba92f6c978ee46be32d355c9aa6fcacf17a928101929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69282019290925246606082015230608082015260a090209055565b611a5c8989611e94565b611a668787611b3e565b611a6f8f612302565b611a788e61234c565b611a818b611dfa565b611a8a8d612091565b611a938c611dbe565b611a9c8a612206565b8315611ae757845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050505050505050565b6000546001600160a01b03163314610b51576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401611549565b81816000818110611b5157611b51612dc1565b60016000819052600460209081529190910292909201357fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05555082908290818110611b9e57611b9e612dc1565b60026000819052600460209081529190910292909201357f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7555082908290818110611beb57611beb612dc1565b60036000819052600460209081529190910292909201357f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0555082908290818110611c3857611c38612dc1565b6004600081905260209081520291909101357f1a1e6821cde7d0159c0d293177871e09677b4e42307c7db3ba94f8648a5a050f55506040517fa6901dc46e1bfe954191f75fb584f52bffbf8db847dc6584c1928476a7fad5c690611c9f9084908490612e75565b60405180910390a15050565b600554811061077a576040517f7f36fbaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003811115611cf857611cf86128f0565b826003811115611d0a57611d0a6128f0565b146105a75781816040517fa49e2fcc000000000000000000000000000000000000000000000000000000008152600401611549929190612ec7565b6040516001600160a01b03838116602483015260448201839052611db991859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612396565b505050565b60078190556040518181527fc1d36d2328f906f4b042346e6a3a073bf22179c7aa2702bcb8d1b014c39231e3906020015b60405180910390a150565b600980546001600160a01b0319166001600160a01b0383169081179091556040517f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81816000818110611ea757611ea7612dc1565b60016000819052600360209081526040929092029390930180357fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5501357fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054d555082908290818110611f1b57611f1b612dc1565b60026000819052600360209081526040929092029390930180357fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d5501357fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4e555082908290818110611f8f57611f8f612dc1565b6003600081905260208181526040929092029390930180357fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af5501357fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495b055508290829081811061200157612001612dc1565b60046000526003602090815260409182029390930180357f83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe9377246555909201357f83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe937724665550517f591230896a6ba0a1339f8c126f007088fa0b06539eca077cae49b6e9bba6964390611c9f9084908490612ee2565b60068190556040518181527f0e858e4fc13b98505f129e4c64b83a3fcdfcfba2bd6b17d1a218390d19d0e76990602001611def565b6040516001600160a01b0384811660248301528381166044830152606482018390526120ff9186918216906323b872dd90608401611d72565b50505050565b600154604080517f50868ac445b6de6f2e1973a0c096591dec8882fe4d476c7b8682133b74f7452360208201529081018990526001600160a01b0380891660608301528716608082015260a0810186905260c0810185905260e081018490526000916121cb916121c59190610100015b604051602081830303815290604052805190602001206040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b83612412565b6009549091506001600160a01b038083169116146121fc57604051638baa579f60e01b815260040160405180910390fd5b5050505050505050565b60088190556040518181527f534287b2be02d8a21436472f300769fef24590ba6b8e00555ef98742d6eb9c6390602001611def565b600a54612252906001600160a01b03168383611d45565b816001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72418260405161228d91815260200190565b60405180910390a25050565b600154604080516000602082018190529181018690526001600160a01b038516606082015290916122d1916121c59190608001612175565b6009549091506001600160a01b038083169116146120ff57604051638baa579f60e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a90600090a250565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f4edbfac5b40fe46ac1af1fd222b224b38cfeeb9e21bd4fc6344526c245f7549b90600090a250565b60006123ab6001600160a01b0384168361243c565b905080516000141580156123d05750808060200190518101906123ce9190612f1c565b155b15611db9576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401611549565b600080600080612422868661244a565b9250925092506124328282612497565b5090949350505050565b606061071b8383600061259b565b600080600083516041036124845760208401516040850151606086015160001a61247688828585612653565b955095509550505050612490565b50508151600091506002905b9250925092565b60008260038111156124ab576124ab6128f0565b036124b4575050565b60018260038111156124c8576124c86128f0565b036124ff576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115612513576125136128f0565b0361254d576040517ffce698f700000000000000000000000000000000000000000000000000000000815260048101829052602401611549565b6003826003811115612561576125616128f0565b036105a7576040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260048101829052602401611549565b6060814710156125d9576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401611549565b600080856001600160a01b031684866040516125f59190612f3e565b60006040518083038185875af1925050503d8060008114612632576040519150601f19603f3d011682016040523d82523d6000602084013e612637565b606091505b5091509150612647868383612722565b925050505b9392505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561268e5750600091506003905082612718565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156126e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661270e57506000925060019150829050612718565b9250600091508190505b9450945094915050565b6060826127375761273282612797565b61264c565b815115801561274e57506001600160a01b0384163b155b15612790576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611549565b508061264c565b8051156127a75780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083601f8401126127eb57600080fd5b50813567ffffffffffffffff81111561280357600080fd5b6020830191508360208260051b850101111561281e57600080fd5b9250929050565b6000806020838503121561283857600080fd5b823567ffffffffffffffff81111561284f57600080fd5b61285b858286016127d9565b90969095509350505050565b60006020828403121561287957600080fd5b5035919050565b80356005811061288f57600080fd5b919050565b600080604083850312156128a757600080fd5b6128b083612880565b946020939093013593505050565b6001600160a01b038116811461077a57600080fd5b6000602082840312156128e557600080fd5b813561264c816128be565b634e487b7160e01b600052602160045260246000fd5b60058110612916576129166128f0565b9052565b60048110612916576129166128f0565b80516001600160a01b03168252602081015161295160208401826001600160a01b03169052565b5060408101516129646040840182612906565b506060810151612977606084018261291a565b506080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201516129b48285018215159052565b505061012081810151801515848301526120ff565b604080825283519082018190526000906020906060840190828701845b82811015612a02578151845292840192908401906001016129e6565b5050508381038285015284518082528583019183019060005b81811015612a4257612a2e83855161292a565b928401926101409290920191600101612a1b565b5090979650505050505050565b610140810161071e828461292a565b60008083601f840112612a7057600080fd5b50813567ffffffffffffffff811115612a8857600080fd5b6020830191508360208260061b850101111561281e57600080fd5b60008060208385031215612ab657600080fd5b823567ffffffffffffffff811115612acd57600080fd5b61285b85828601612a5e565b600060208284031215612aeb57600080fd5b61071b82612880565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612b1b57600080fd5b813567ffffffffffffffff80821115612b3657612b36612af4565b604051601f8301601f19908116603f01168101908282118183101715612b5e57612b5e612af4565b81604052838152866020858801011115612b7757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612bad57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115612bd957600080fd5b612be587828801612b0a565b91505092959194509250565b600080600060608486031215612c0657600080fd5b8335612c11816128be565b925060208401359150612c2660408501612880565b90509250925092565b600060208284031215612c4157600080fd5b81356004811061264c57600080fd5b60008060408385031215612c6357600080fd5b82359150602083013567ffffffffffffffff811115612c8157600080fd5b612c8d85828601612b0a565b9150509250929050565b6000806000806000806000806000806101008b8d031215612cb757600080fd5b8a35612cc2816128be565b995060208b0135612cd2816128be565b985060408b0135975060608b0135965060808b0135612cf0816128be565b955060a08b0135945060c08b013567ffffffffffffffff80821115612d1457600080fd5b612d208e838f01612a5e565b909650945060e08d0135915080821115612d3957600080fd5b50612d468d828e016127d9565b915080935050809150509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761071e5761071e612d5f565b600082612da957634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561071e5761071e612d5f565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612df2578181015183820152602001612dda565b50506000910152565b8481528360208201528260408201526080606082015260008251806080840152612e2c8160a0850160208701612dd7565b601f01601f19169190910160a00195945050505050565b600060208284031215612e5557600080fd5b5051919050565b600060018201612e6e57612e6e612d5f565b5060010190565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612eae57600080fd5b8260051b80856040850137919091016040019392505050565b60408101612ed5828561291a565b61264c602083018461291a565b6020808252818101839052600090604080840186845b87811015612a42578135835284820135858401529183019190830190600101612ef8565b600060208284031215612f2e57600080fd5b8151801515811461264c57600080fd5b60008251612f50818460208701612dd7565b919091019291505056fea26469706673582212206905540c4a2489ced08c9ab064b78ca5d7b1aaf2c1e7480df96798b4358d9dd264736f6c63430008190033\"",
  "deployer": "0xEf46169CD1e954aB10D5e4C280737D9b92d0a936",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "cancelBet(uint256,bytes)": {
        "details": "Cancels a bet that has been placed. This function allows the requester to cancel their bet. Only the requester who placed the bet can cancel it. Emits a {BetCanceled} event.",
        "params": {
          "betId": "The ID of the bet to be canceled."
        }
      },
      "claimReward(uint256)": {
        "details": "Claims the reward for a bet that has been resolved. This function allows the receiver to claim the reward based on the bet outcome. Emits a {RewardClaimed} event.",
        "params": {
          "betId": "The ID of the bet to claim the reward for."
        }
      },
      "getAllBets()": {
        "details": "Function to get all bets."
      },
      "getAsset()": {
        "details": "Function to get the current asset address"
      },
      "getBetInfoById(uint256)": {
        "details": "Function to get the bet info for a given bet ID"
      },
      "getBetsByStatus(uint8)": {
        "details": "Function to get bets by status."
      },
      "getMaxBetAmount()": {
        "details": "Function to get the maximum bet amount"
      },
      "getMaxPointsForTier(uint8)": {
        "details": "Function to get the maximum points for a given tier"
      },
      "getMinBetAmount()": {
        "details": "Function to get the minimum bet amount"
      },
      "getMinPointsForTier(uint8)": {
        "details": "Function to get the minimum points for a given tier"
      },
      "getPenaltyForCanceledBet()": {
        "details": "Function to get the penalty for canceled bet"
      },
      "getPointsRangeForTier(uint8)": {
        "details": "Function to get the points range for a given tier"
      },
      "getReward(uint8,uint256)": {
        "details": "Function to get the reward for a given tier and bet amount"
      },
      "getSigner()": {
        "details": "Function to get the current signer address"
      },
      "getWallet()": {
        "details": "Function to get the current wallet address"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "placeBet(address,uint256,uint8)": {
        "details": "Places a bet with the specified amount and tier. This function allows a user to place a bet by specifying the amount and the tier of the bet. Emits a {BetPlaced} event.",
        "params": {
          "amount": "The amount of the bet.",
          "receiver": "The address of the receiver of the bet.",
          "tier": "The tier of the bet."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolveBet(uint256,uint256,uint256,bytes)": {
        "details": "Resolves a bet that has been placed. This function determines the outcome of the bet and updates the bet information accordingly. Emits a {BetResolved} event.",
        "params": {
          "betId": "The ID of the bet to be resolved.",
          "deadline": "The timestamp after which the signature becomes invalid.",
          "points": "The number of points achieved in the bet.",
          "signature": "The cryptographic signature provided by the backend to validate the result."
        }
      },
      "resolveBetAndClaimReward(uint256,uint256,uint256,bytes)": {
        "details": "Resolves a bet and claims the reward. This function resolves a bet and distributes the reward to the receiver based on the bet outcome. Emits a {BetResolved} event and a {RewardClaimed} event if the bet is won.",
        "params": {
          "betId": "The ID of the bet to be resolved.",
          "deadline": "The timestamp after which the signature becomes invalid.",
          "points": "The number of points achieved in the bet.",
          "signature": "The cryptographic signature provided by the backend to validate the result."
        },
        "returns": {
          "rewardAmount": "The amount of the reward distributed, or 0 if the bet is lost."
        }
      },
      "setAsset(address)": {
        "details": "Sets the asset token.",
        "params": {
          "asset": "The new asset token address. Only callable by the owner."
        }
      },
      "setMaxBetAmount(uint256)": {
        "details": "Sets the maximum bet amount.",
        "params": {
          "maxBetAmount": "The new maximum bet amount. Only callable by the owner."
        }
      },
      "setMinBetAmount(uint256)": {
        "details": "Sets the minimum bet amount.",
        "params": {
          "minBetAmount": "The new minimum bet amount. Only callable by the owner."
        }
      },
      "setPenaltyForCanceledBet(uint256)": {
        "details": "Sets the penalty for canceled bets.",
        "params": {
          "penaltyForCanceledBet": "The new penalty percentage. Only callable by the owner."
        }
      },
      "setPointsRanges((uint256,uint256)[])": {
        "details": "Sets the points ranges for bet tiers.",
        "params": {
          "pointsRanges": "The new points ranges for each tier. Only callable by the owner."
        }
      },
      "setRewardPercentages(uint256[])": {
        "details": "Sets the reward percentages for bet tiers.",
        "params": {
          "rewardPercentages": "The new reward percentages for each tier. Only callable by the owner."
        }
      },
      "setSigner(address)": {
        "details": "Sets the signer address.",
        "params": {
          "signer": "The new signer address. Only callable by the owner."
        }
      },
      "setWallet(address)": {
        "details": "Sets the wallet address.",
        "params": {
          "wallet": "The new wallet address. Only callable by the owner."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "events": {
      "AssetUpdated(address)": {
        "details": "Emit when the asset is updated."
      },
      "BetCanceled(address,uint256)": {
        "details": "Emit when a bet is canceled."
      },
      "BetPlaced(address,uint256)": {
        "details": "Emit when a bet is placed."
      },
      "BetResolved(uint256,bool)": {
        "details": "Emit when a bet is resolved."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxBetAmountUpdated(uint256)": {
        "details": "Emit when the max bet amount is updated."
      },
      "MinBetAmountUpdated(uint256)": {
        "details": "Emit when the min bet amount is updated."
      },
      "PenaltyForCanceledBetUpdated(uint256)": {
        "details": "Emit when the penalty for canceled bet is updated."
      },
      "PointsRangesUpdated((uint256,uint256)[])": {
        "details": "Emit when the points ranges are updated."
      },
      "RewardClaimed(address,uint256)": {
        "details": "Emit when a user claims their reward"
      },
      "RewardPercentagesUpdated(uint256[])": {
        "details": "Emit when the reward percentages are updated."
      },
      "SignerUpdated(address)": {
        "details": "Emit when the signer is updated."
      },
      "WalletUpdated(address)": {
        "details": "Emit when the wallet used to distribute rewards is updated."
      }
    },
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "BetAlreadyCanceled(uint256)": [
        {
          "details": "Revert when the bet is already canceled."
        }
      ],
      "BetAlreadyResolved(uint256)": [
        {
          "details": "Revert when the bet is already resolved."
        }
      ],
      "BetDoesNotExist()": [
        {
          "details": "Revert when bet does not exist."
        }
      ],
      "BetLost(uint256)": [
        {
          "details": "Revert when claim the reward for lost bet."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "ErrNotRequester()": [
        {
          "details": "Revert when the user is not the requester."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidBetAmount()": [
        {
          "details": "Revert when the bet amount is invalid."
        }
      ],
      "InvalidBetId()": [
        {
          "details": "Revert when the bet id is invalid."
        }
      ],
      "InvalidBetStatus(uint8,uint8)": [
        {
          "details": "Revert when the bet status is not expected."
        }
      ],
      "InvalidBetTier()": [
        {
          "details": "Revert when the bet tier is invalid."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidLength()": [
        {
          "details": "Revert when array length is invalid."
        }
      ],
      "InvalidMaxBetAmount()": [
        {
          "details": "Revert when max bet amount is less than min bet amount or equal to zero."
        }
      ],
      "InvalidMinBetAmount()": [
        {
          "details": "Revert when min bet amount is greater than max bet amount or equal to zero."
        }
      ],
      "InvalidPenaltyForCanceledBet()": [
        {
          "details": "Revert when penalty for canceled bet is greater than 100% or equal to zero."
        }
      ],
      "InvalidSignature()": [
        {
          "details": "Revert when the signature is invalid."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "NullAddress()": [
        {
          "details": "Revert when the receiver is null."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "RewardAlreadyClaimed(uint256)": [
        {
          "details": "Revert when claim the reward for already claimed bet."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "SignatureExpired()": [
        {
          "details": "Revert when signature expired."
        }
      ],
      "TooSoonToCancel()": [
        {
          "details": "Revert when too soon to cancel bet."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "\"{\\\"compiler\\\":{\\\"version\\\":\\\"0.8.25+commit.b61c2a91\\\"},\\\"language\\\":\\\"Solidity\\\",\\\"output\\\":{\\\"abi\\\":[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"target\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddressEmptyCode\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddressInsufficientBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BetAlreadyCanceled\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BetAlreadyResolved\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"BetDoesNotExist\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BetLost\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ECDSAInvalidSignature\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"length\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ECDSAInvalidSignatureLength\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"ECDSAInvalidSignatureS\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ErrNotRequester\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"FailedInnerCall\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidBetAmount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidBetId\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum IFloppyGamble.BetStatus\\\",\\\"name\\\":\\\"expected\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetStatus\\\",\\\"name\\\":\\\"actual\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"InvalidBetStatus\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidBetTier\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidInitialization\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidLength\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidMaxBetAmount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidMinBetAmount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidPenaltyForCanceledBet\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidSignature\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotInitializing\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NullAddress\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnableInvalidOwner\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnableUnauthorizedAccount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"RewardAlreadyClaimed\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SafeERC20FailedOperation\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"SignatureExpired\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"TooSoonToCancel\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AssetUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"requester\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BetCanceled\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"requester\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BetPlaced\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"win\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"BetResolved\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxBetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"MaxBetAmountUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minBetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"MinBetAmountUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"penaltyForCanceledBet\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PenaltyForCanceledBetUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minPoints\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPoints\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"indexed\\\":false,\\\"internalType\\\":\\\"struct IFloppyGamble.PointsRange[]\\\",\\\"name\\\":\\\"pointsRanges\\\",\\\"type\\\":\\\"tuple[]\\\"}],\\\"name\\\":\\\"PointsRangesUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"RewardClaimed\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"rewardPercentages\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"RewardPercentagesUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"signer\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SignerUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"wallet\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"WalletUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"CANCELLATION_PERIOD\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"CANCEL_PERMIT_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_SEPARATOR\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MAX_PERCENTAGE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PERMIT_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"cancelBet\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"signature\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"cancelBet\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"claimReward\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"rewardAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getAllBets\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"betIds\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"requester\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetStatus\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"points\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"timestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"win\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"claimed\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct IFloppyGamble.BetInfo[]\\\",\\\"name\\\":\\\"bets\\\",\\\"type\\\":\\\"tuple[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getAsset\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getBetInfoById\\\",\\\"outputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"requester\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetStatus\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"points\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"timestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"win\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"claimed\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct IFloppyGamble.BetInfo\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum IFloppyGamble.BetStatus\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"getBetsByStatus\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"betIds\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"requester\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetStatus\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"points\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"timestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"win\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"claimed\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct IFloppyGamble.BetInfo[]\\\",\\\"name\\\":\\\"bets\\\",\\\"type\\\":\\\"tuple[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getLastBetId\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getMaxBetAmount\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"getMaxPointsForTier\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getMinBetAmount\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"getMinPointsForTier\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getPenaltyForCanceledBet\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"getPointsRangeForTier\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getReward\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getSigner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getWallet\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"wallet\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxBetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minBetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"signer\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"penaltyForCanceledBet\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minPoints\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPoints\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct IFloppyGamble.PointsRange[]\\\",\\\"name\\\":\\\"pointsRanges\\\",\\\"type\\\":\\\"tuple[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"rewardPercentages\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"enum IFloppyGamble.BetTier\\\",\\\"name\\\":\\\"tier\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"placeBet\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"points\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"signature\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"resolveBet\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"betId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"points\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"signature\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"resolveBetAndClaimReward\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"rewardAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setAsset\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxBetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setMaxBetAmount\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minBetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setMinBetAmount\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"penaltyForCanceledBet\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setPenaltyForCanceledBet\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minPoints\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPoints\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct IFloppyGamble.PointsRange[]\\\",\\\"name\\\":\\\"pointsRanges\\\",\\\"type\\\":\\\"tuple[]\\\"}],\\\"name\\\":\\\"setPointsRanges\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"rewardPercentages\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setRewardPercentages\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"signer\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setSigner\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"wallet\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setWallet\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}],\\\"devdoc\\\":{\\\"errors\\\":{\\\"AddressEmptyCode(address)\\\":[{\\\"details\\\":\\\"There's no code at `target` (it is not a contract).\\\"}],\\\"AddressInsufficientBalance(address)\\\":[{\\\"details\\\":\\\"The ETH balance of the account is not enough to perform the operation.\\\"}],\\\"BetAlreadyCanceled(uint256)\\\":[{\\\"details\\\":\\\"Revert when the bet is already canceled.\\\"}],\\\"BetAlreadyResolved(uint256)\\\":[{\\\"details\\\":\\\"Revert when the bet is already resolved.\\\"}],\\\"BetDoesNotExist()\\\":[{\\\"details\\\":\\\"Revert when bet does not exist.\\\"}],\\\"BetLost(uint256)\\\":[{\\\"details\\\":\\\"Revert when claim the reward for lost bet.\\\"}],\\\"ECDSAInvalidSignature()\\\":[{\\\"details\\\":\\\"The signature derives the `address(0)`.\\\"}],\\\"ECDSAInvalidSignatureLength(uint256)\\\":[{\\\"details\\\":\\\"The signature has an invalid length.\\\"}],\\\"ECDSAInvalidSignatureS(bytes32)\\\":[{\\\"details\\\":\\\"The signature has an S value that is in the upper half order.\\\"}],\\\"ErrNotRequester()\\\":[{\\\"details\\\":\\\"Revert when the user is not the requester.\\\"}],\\\"FailedInnerCall()\\\":[{\\\"details\\\":\\\"A call to an address target failed. The target may have reverted.\\\"}],\\\"InvalidBetAmount()\\\":[{\\\"details\\\":\\\"Revert when the bet amount is invalid.\\\"}],\\\"InvalidBetId()\\\":[{\\\"details\\\":\\\"Revert when the bet id is invalid.\\\"}],\\\"InvalidBetStatus(uint8,uint8)\\\":[{\\\"details\\\":\\\"Revert when the bet status is not expected.\\\"}],\\\"InvalidBetTier()\\\":[{\\\"details\\\":\\\"Revert when the bet tier is invalid.\\\"}],\\\"InvalidInitialization()\\\":[{\\\"details\\\":\\\"The contract is already initialized.\\\"}],\\\"InvalidLength()\\\":[{\\\"details\\\":\\\"Revert when array length is invalid.\\\"}],\\\"InvalidMaxBetAmount()\\\":[{\\\"details\\\":\\\"Revert when max bet amount is less than min bet amount or equal to zero.\\\"}],\\\"InvalidMinBetAmount()\\\":[{\\\"details\\\":\\\"Revert when min bet amount is greater than max bet amount or equal to zero.\\\"}],\\\"InvalidPenaltyForCanceledBet()\\\":[{\\\"details\\\":\\\"Revert when penalty for canceled bet is greater than 100% or equal to zero.\\\"}],\\\"InvalidSignature()\\\":[{\\\"details\\\":\\\"Revert when the signature is invalid.\\\"}],\\\"NotInitializing()\\\":[{\\\"details\\\":\\\"The contract is not initializing.\\\"}],\\\"NullAddress()\\\":[{\\\"details\\\":\\\"Revert when the receiver is null.\\\"}],\\\"OwnableInvalidOwner(address)\\\":[{\\\"details\\\":\\\"The owner is not a valid owner account. (eg. `address(0)`)\\\"}],\\\"OwnableUnauthorizedAccount(address)\\\":[{\\\"details\\\":\\\"The caller account is not authorized to perform an operation.\\\"}],\\\"RewardAlreadyClaimed(uint256)\\\":[{\\\"details\\\":\\\"Revert when claim the reward for already claimed bet.\\\"}],\\\"SafeERC20FailedOperation(address)\\\":[{\\\"details\\\":\\\"An operation with an ERC20 token failed.\\\"}],\\\"SignatureExpired()\\\":[{\\\"details\\\":\\\"Revert when signature expired.\\\"}],\\\"TooSoonToCancel()\\\":[{\\\"details\\\":\\\"Revert when too soon to cancel bet.\\\"}]},\\\"events\\\":{\\\"AssetUpdated(address)\\\":{\\\"details\\\":\\\"Emit when the asset is updated.\\\"},\\\"BetCanceled(address,uint256)\\\":{\\\"details\\\":\\\"Emit when a bet is canceled.\\\"},\\\"BetPlaced(address,uint256)\\\":{\\\"details\\\":\\\"Emit when a bet is placed.\\\"},\\\"BetResolved(uint256,bool)\\\":{\\\"details\\\":\\\"Emit when a bet is resolved.\\\"},\\\"Initialized(uint64)\\\":{\\\"details\\\":\\\"Triggered when the contract has been initialized or reinitialized.\\\"},\\\"MaxBetAmountUpdated(uint256)\\\":{\\\"details\\\":\\\"Emit when the max bet amount is updated.\\\"},\\\"MinBetAmountUpdated(uint256)\\\":{\\\"details\\\":\\\"Emit when the min bet amount is updated.\\\"},\\\"PenaltyForCanceledBetUpdated(uint256)\\\":{\\\"details\\\":\\\"Emit when the penalty for canceled bet is updated.\\\"},\\\"PointsRangesUpdated((uint256,uint256)[])\\\":{\\\"details\\\":\\\"Emit when the points ranges are updated.\\\"},\\\"RewardClaimed(address,uint256)\\\":{\\\"details\\\":\\\"Emit when a user claims their reward\\\"},\\\"RewardPercentagesUpdated(uint256[])\\\":{\\\"details\\\":\\\"Emit when the reward percentages are updated.\\\"},\\\"SignerUpdated(address)\\\":{\\\"details\\\":\\\"Emit when the signer is updated.\\\"},\\\"WalletUpdated(address)\\\":{\\\"details\\\":\\\"Emit when the wallet used to distribute rewards is updated.\\\"}},\\\"kind\\\":\\\"dev\\\",\\\"methods\\\":{\\\"cancelBet(uint256,bytes)\\\":{\\\"details\\\":\\\"Cancels a bet that has been placed. This function allows the requester to cancel their bet. Only the requester who placed the bet can cancel it. Emits a {BetCanceled} event.\\\",\\\"params\\\":{\\\"betId\\\":\\\"The ID of the bet to be canceled.\\\"}},\\\"claimReward(uint256)\\\":{\\\"details\\\":\\\"Claims the reward for a bet that has been resolved. This function allows the receiver to claim the reward based on the bet outcome. Emits a {RewardClaimed} event.\\\",\\\"params\\\":{\\\"betId\\\":\\\"The ID of the bet to claim the reward for.\\\"}},\\\"getAllBets()\\\":{\\\"details\\\":\\\"Function to get all bets.\\\"},\\\"getAsset()\\\":{\\\"details\\\":\\\"Function to get the current asset address\\\"},\\\"getBetInfoById(uint256)\\\":{\\\"details\\\":\\\"Function to get the bet info for a given bet ID\\\"},\\\"getBetsByStatus(uint8)\\\":{\\\"details\\\":\\\"Function to get bets by status.\\\"},\\\"getMaxBetAmount()\\\":{\\\"details\\\":\\\"Function to get the maximum bet amount\\\"},\\\"getMaxPointsForTier(uint8)\\\":{\\\"details\\\":\\\"Function to get the maximum points for a given tier\\\"},\\\"getMinBetAmount()\\\":{\\\"details\\\":\\\"Function to get the minimum bet amount\\\"},\\\"getMinPointsForTier(uint8)\\\":{\\\"details\\\":\\\"Function to get the minimum points for a given tier\\\"},\\\"getPenaltyForCanceledBet()\\\":{\\\"details\\\":\\\"Function to get the penalty for canceled bet\\\"},\\\"getPointsRangeForTier(uint8)\\\":{\\\"details\\\":\\\"Function to get the points range for a given tier\\\"},\\\"getReward(uint8,uint256)\\\":{\\\"details\\\":\\\"Function to get the reward for a given tier and bet amount\\\"},\\\"getSigner()\\\":{\\\"details\\\":\\\"Function to get the current signer address\\\"},\\\"getWallet()\\\":{\\\"details\\\":\\\"Function to get the current wallet address\\\"},\\\"owner()\\\":{\\\"details\\\":\\\"Returns the address of the current owner.\\\"},\\\"placeBet(address,uint256,uint8)\\\":{\\\"details\\\":\\\"Places a bet with the specified amount and tier. This function allows a user to place a bet by specifying the amount and the tier of the bet. Emits a {BetPlaced} event.\\\",\\\"params\\\":{\\\"amount\\\":\\\"The amount of the bet.\\\",\\\"receiver\\\":\\\"The address of the receiver of the bet.\\\",\\\"tier\\\":\\\"The tier of the bet.\\\"}},\\\"renounceOwnership()\\\":{\\\"details\\\":\\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\\\"},\\\"resolveBet(uint256,uint256,uint256,bytes)\\\":{\\\"details\\\":\\\"Resolves a bet that has been placed. This function determines the outcome of the bet and updates the bet information accordingly. Emits a {BetResolved} event.\\\",\\\"params\\\":{\\\"betId\\\":\\\"The ID of the bet to be resolved.\\\",\\\"deadline\\\":\\\"The timestamp after which the signature becomes invalid.\\\",\\\"points\\\":\\\"The number of points achieved in the bet.\\\",\\\"signature\\\":\\\"The cryptographic signature provided by the backend to validate the result.\\\"}},\\\"resolveBetAndClaimReward(uint256,uint256,uint256,bytes)\\\":{\\\"details\\\":\\\"Resolves a bet and claims the reward. This function resolves a bet and distributes the reward to the receiver based on the bet outcome. Emits a {BetResolved} event and a {RewardClaimed} event if the bet is won.\\\",\\\"params\\\":{\\\"betId\\\":\\\"The ID of the bet to be resolved.\\\",\\\"deadline\\\":\\\"The timestamp after which the signature becomes invalid.\\\",\\\"points\\\":\\\"The number of points achieved in the bet.\\\",\\\"signature\\\":\\\"The cryptographic signature provided by the backend to validate the result.\\\"},\\\"returns\\\":{\\\"rewardAmount\\\":\\\"The amount of the reward distributed, or 0 if the bet is lost.\\\"}},\\\"setAsset(address)\\\":{\\\"details\\\":\\\"Sets the asset token.\\\",\\\"params\\\":{\\\"asset\\\":\\\"The new asset token address. Only callable by the owner.\\\"}},\\\"setMaxBetAmount(uint256)\\\":{\\\"details\\\":\\\"Sets the maximum bet amount.\\\",\\\"params\\\":{\\\"maxBetAmount\\\":\\\"The new maximum bet amount. Only callable by the owner.\\\"}},\\\"setMinBetAmount(uint256)\\\":{\\\"details\\\":\\\"Sets the minimum bet amount.\\\",\\\"params\\\":{\\\"minBetAmount\\\":\\\"The new minimum bet amount. Only callable by the owner.\\\"}},\\\"setPenaltyForCanceledBet(uint256)\\\":{\\\"details\\\":\\\"Sets the penalty for canceled bets.\\\",\\\"params\\\":{\\\"penaltyForCanceledBet\\\":\\\"The new penalty percentage. Only callable by the owner.\\\"}},\\\"setPointsRanges((uint256,uint256)[])\\\":{\\\"details\\\":\\\"Sets the points ranges for bet tiers.\\\",\\\"params\\\":{\\\"pointsRanges\\\":\\\"The new points ranges for each tier. Only callable by the owner.\\\"}},\\\"setRewardPercentages(uint256[])\\\":{\\\"details\\\":\\\"Sets the reward percentages for bet tiers.\\\",\\\"params\\\":{\\\"rewardPercentages\\\":\\\"The new reward percentages for each tier. Only callable by the owner.\\\"}},\\\"setSigner(address)\\\":{\\\"details\\\":\\\"Sets the signer address.\\\",\\\"params\\\":{\\\"signer\\\":\\\"The new signer address. Only callable by the owner.\\\"}},\\\"setWallet(address)\\\":{\\\"details\\\":\\\"Sets the wallet address.\\\",\\\"params\\\":{\\\"wallet\\\":\\\"The new wallet address. Only callable by the owner.\\\"}},\\\"transferOwnership(address)\\\":{\\\"details\\\":\\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\\"}},\\\"stateVariables\\\":{\\\"CANCELLATION_PERIOD\\\":{\\\"details\\\":\\\"Time period within which a bet can be canceled\\\"},\\\"CANCEL_PERMIT_TYPEHASH\\\":{\\\"details\\\":\\\"keccak256(\\\\\\\"Permit(uint256 betId,address requester)\\\\\\\")\\\"},\\\"DOMAIN_TYPEHASH\\\":{\\\"details\\\":\\\"keccak256(\\\\\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\\\\\")\\\"},\\\"PERMIT_TYPEHASH\\\":{\\\"details\\\":\\\"keccak256(\\\\\\\"Permit(uint256 betId,address requester,address receiver,uint256 points,uint256 betAmount,uint256 deadline)\\\\\\\");\\\"},\\\"_____gap\\\":{\\\"details\\\":\\\"Reserved space for upgradeability\\\"},\\\"_asset\\\":{\\\"details\\\":\\\"ERC20 token used for betting\\\"},\\\"_bets\\\":{\\\"details\\\":\\\"Mapping of bet IDs to their corresponding bet information\\\"},\\\"_ids\\\":{\\\"details\\\":\\\"Counter for bet IDs\\\"},\\\"_maxBetAmount\\\":{\\\"details\\\":\\\"Maximum allowed bet amount\\\"},\\\"_minBetAmount\\\":{\\\"details\\\":\\\"Minimum allowed bet amount\\\"},\\\"_penaltyForCanceledBet\\\":{\\\"details\\\":\\\"Percentage of the bet amount to be deducted as a penalty when a bet is canceled\\\"},\\\"_pointsRanges\\\":{\\\"details\\\":\\\"Mapping of bet tiers to their corresponding points ranges\\\"},\\\"_rewardPercentages\\\":{\\\"details\\\":\\\"Mapping of bet tiers to their corresponding reward percentages\\\"},\\\"_signer\\\":{\\\"details\\\":\\\"Address of the signer for bet validation\\\"},\\\"_wallet\\\":{\\\"details\\\":\\\"Address of the wallet used to distribute rewards\\\"}},\\\"version\\\":1},\\\"userdoc\\\":{\\\"kind\\\":\\\"user\\\",\\\"methods\\\":{},\\\"version\\\":1}},\\\"settings\\\":{\\\"compilationTarget\\\":{\\\"src/FLoppyGamble.sol\\\":\\\"FloppyGamble\\\"},\\\"evmVersion\\\":\\\"istanbul\\\",\\\"libraries\\\":{},\\\"metadata\\\":{\\\"bytecodeHash\\\":\\\"ipfs\\\",\\\"useLiteralContent\\\":true},\\\"optimizer\\\":{\\\"enabled\\\":true,\\\"runs\\\":1000},\\\"remappings\\\":[\\\":@contracts/=src/\\\",\\\":@fdk-0.3.0-beta/=dependencies/@fdk-0.3.0-beta/\\\",\\\":@fdk/=dependencies/@fdk-0.3.0-beta/script/\\\",\\\":@interfaces/=src/interfaces/\\\",\\\":@openzeppelin-contracts-5.0.2/=dependencies/@openzeppelin-contracts-5.0.2/\\\",\\\":@openzeppelin-contracts-upgradeable-5.0.2/=dependencies/@openzeppelin-contracts-upgradeable-5.0.2/\\\",\\\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\\\",\\\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\\\",\\\":@prb-test-0.6.4/=dependencies/@prb-test-0.6.4/\\\",\\\":@script/=script/\\\",\\\":@solady/=dependencies/@fdk-0.3.0-beta/dependencies/solady-0.0.206/src/\\\",\\\":@uniswap-core/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-periphery/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":@uniswap-v2-core-1.0.1/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-v2-periphery-1.1.0-beta.0/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\\\",\\\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\\\",\\\":forge-std/=lib/forge-std/src/\\\",\\\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\\\",\\\":openzeppelin-contracts/=lib/openzeppelin-contracts/\\\"]},\\\"sources\\\":{\\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\\\n *\\\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\\\n * reused. This mechanism prevents re-execution of each \\\\\\\"step\\\\\\\" but allows the creation of new initialization steps in\\\\n * case an upgrade adds a module that needs to be initialized.\\\\n *\\\\n * For example:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```solidity\\\\n * contract MyToken is ERC20Upgradeable {\\\\n *     function initialize() initializer public {\\\\n *         __ERC20_init(\\\\\\\"MyToken\\\\\\\", \\\\\\\"MTK\\\\\\\");\\\\n *     }\\\\n * }\\\\n *\\\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\\\n *     function initializeV2() reinitializer(2) public {\\\\n *         __ERC20Permit_init(\\\\\\\"MyToken\\\\\\\");\\\\n *     }\\\\n * }\\\\n * ```\\\\n *\\\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\\\n *\\\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\\\n *\\\\n * [CAUTION]\\\\n * ====\\\\n * Avoid leaving a contract uninitialized.\\\\n *\\\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```\\\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\\\n * constructor() {\\\\n *     _disableInitializers();\\\\n * }\\\\n * ```\\\\n * ====\\\\n */\\\\nabstract contract Initializable {\\\\n    /**\\\\n     * @dev Storage of the initializable contract.\\\\n     *\\\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\\\n     * when using with upgradeable contracts.\\\\n     *\\\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\\\n     */\\\\n    struct InitializableStorage {\\\\n        /**\\\\n         * @dev Indicates that the contract has been initialized.\\\\n         */\\\\n        uint64 _initialized;\\\\n        /**\\\\n         * @dev Indicates that the contract is in the process of being initialized.\\\\n         */\\\\n        bool _initializing;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.Initializable\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\\\n\\\\n    /**\\\\n     * @dev The contract is already initialized.\\\\n     */\\\\n    error InvalidInitialization();\\\\n\\\\n    /**\\\\n     * @dev The contract is not initializing.\\\\n     */\\\\n    error NotInitializing();\\\\n\\\\n    /**\\\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\\\n     */\\\\n    event Initialized(uint64 version);\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\\\n     *\\\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\\\n     * production.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier initializer() {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        // Cache values to avoid duplicated sloads\\\\n        bool isTopLevelCall = !$._initializing;\\\\n        uint64 initialized = $._initialized;\\\\n\\\\n        // Allowed calls:\\\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\\\n        //                 initialized\\\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\\\n        //                 current contract is just being deployed\\\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\\\n\\\\n        if (!initialSetup && !construction) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = 1;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = true;\\\\n        }\\\\n        _;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = false;\\\\n            emit Initialized(1);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\\\n     * used to initialize parent contracts.\\\\n     *\\\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\\\n     * are added through upgrades and that require initialization.\\\\n     *\\\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\\\n     *\\\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\\\n     * a contract, executing them in the right order is up to the developer or operator.\\\\n     *\\\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier reinitializer(uint64 version) {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing || $._initialized >= version) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = version;\\\\n        $._initializing = true;\\\\n        _;\\\\n        $._initializing = false;\\\\n        emit Initialized(version);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\\\n     */\\\\n    modifier onlyInitializing() {\\\\n        _checkInitializing();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\\\n     */\\\\n    function _checkInitializing() internal view virtual {\\\\n        if (!_isInitializing()) {\\\\n            revert NotInitializing();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\\\n     * through proxies.\\\\n     *\\\\n     * Emits an {Initialized} event the first time it is successfully executed.\\\\n     */\\\\n    function _disableInitializers() internal virtual {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        if ($._initialized != type(uint64).max) {\\\\n            $._initialized = type(uint64).max;\\\\n            emit Initialized(type(uint64).max);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\\\n     */\\\\n    function _getInitializedVersion() internal view returns (uint64) {\\\\n        return _getInitializableStorage()._initialized;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\\\n     */\\\\n    function _isInitializing() internal view returns (bool) {\\\\n        return _getInitializableStorage()._initializing;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns a pointer to the storage namespace.\\\\n     */\\\\n    // solhint-disable-next-line var-name-mixedcase\\\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\\\n        assembly {\\\\n            $.slot := INITIALIZABLE_STORAGE\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Context} from \\\\\\\"../utils/Context.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * The initial owner is set to the address provided by the deployer. This can\\\\n * later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    /**\\\\n     * @dev The caller account is not authorized to perform an operation.\\\\n     */\\\\n    error OwnableUnauthorizedAccount(address account);\\\\n\\\\n    /**\\\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\\\n     */\\\\n    error OwnableInvalidOwner(address owner);\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\\\n     */\\\\n    constructor(address initialOwner) {\\\\n        if (initialOwner == address(0)) {\\\\n            revert OwnableInvalidOwner(address(0));\\\\n        }\\\\n        _transferOwnership(initialOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        _checkOwner();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the sender is not the owner.\\\\n     */\\\\n    function _checkOwner() internal view virtual {\\\\n        if (owner() != _msgSender()) {\\\\n            revert OwnableUnauthorizedAccount(_msgSender());\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby disabling any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        if (newOwner == address(0)) {\\\\n            revert OwnableInvalidOwner(address(0));\\\\n        }\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address to, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\\\n     * caller's tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender's allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\\\n     * allowance mechanism. `value` is then deducted from the caller's\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\\\n *\\\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\\\n * need to send a transaction, and thus is not required to hold Ether at all.\\\\n *\\\\n * ==== Security Considerations\\\\n *\\\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\\\n * generally recommended is:\\\\n *\\\\n * ```solidity\\\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\\\n *     doThing(..., value);\\\\n * }\\\\n *\\\\n * function doThing(..., uint256 value) public {\\\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\\\n *     ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\\\n * {SafeERC20-safeTransferFrom}).\\\\n *\\\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\\\n * contracts should have entry points that don't rely on permit.\\\\n */\\\\ninterface IERC20Permit {\\\\n    /**\\\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\\\n     * given ``owner``'s signed approval.\\\\n     *\\\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\\\n     * ordering also apply here.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `deadline` must be a timestamp in the future.\\\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\\\n     * over the EIP712-formatted function arguments.\\\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\\\n     *\\\\n     * For more information on the signature format, see the\\\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\\\n     * section].\\\\n     *\\\\n     * CAUTION: See Security Considerations above.\\\\n     */\\\\n    function permit(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 value,\\\\n        uint256 deadline,\\\\n        uint8 v,\\\\n        bytes32 r,\\\\n        bytes32 s\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the current nonce for `owner`. This value must be\\\\n     * included whenever a signature is generated for {permit}.\\\\n     *\\\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\\\n     * prevents a signature from being used multiple times.\\\\n     */\\\\n    function nonces(address owner) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\\\n     */\\\\n    // solhint-disable-next-line func-name-mixedcase\\\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"../IERC20.sol\\\\\\\";\\\\nimport {IERC20Permit} from \\\\\\\"../extensions/IERC20Permit.sol\\\\\\\";\\\\nimport {Address} from \\\\\\\"../../../utils/Address.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @title SafeERC20\\\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\\\n * contract returns false). Tokens that return no value (and instead revert or\\\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\\\n * successful.\\\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\\\n */\\\\nlibrary SafeERC20 {\\\\n    using Address for address;\\\\n\\\\n    /**\\\\n     * @dev An operation with an ERC20 token failed.\\\\n     */\\\\n    error SafeERC20FailedOperation(address token);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failed `decreaseAllowance` request.\\\\n     */\\\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\\\n\\\\n    /**\\\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\\\n        forceApprove(token, spender, oldAllowance + value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\\\n     * value, non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\\\n        unchecked {\\\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\\\n            if (currentAllowance < requestedDecrease) {\\\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\\\n            }\\\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\\\n     */\\\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\\\n\\\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\\\n            _callOptionalReturn(token, approvalCall);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     */\\\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\\\n        // the target address contains contract code and also asserts for success in the low-level call.\\\\n\\\\n        bytes memory returndata = address(token).functionCall(data);\\\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\\\n            revert SafeERC20FailedOperation(address(token));\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     *\\\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\\\n     */\\\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\\\n        // and not revert is the subcall reverts.\\\\n\\\\n        (bool success, bytes memory returndata) = address(token).call(data);\\\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\\\n     */\\\\n    error AddressInsufficientBalance(address account);\\\\n\\\\n    /**\\\\n     * @dev There's no code at `target` (it is not a contract).\\\\n     */\\\\n    error AddressEmptyCode(address target);\\\\n\\\\n    /**\\\\n     * @dev A call to an address target failed. The target may have reverted.\\\\n     */\\\\n    error FailedInnerCall();\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        if (address(this).balance < amount) {\\\\n            revert AddressInsufficientBalance(address(this));\\\\n        }\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\\"\\\\\\\");\\\\n        if (!success) {\\\\n            revert FailedInnerCall();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\\\n     * up by this function (like regular Solidity function calls). However, if\\\\n     * the call reverted with no returned reason, this function reverts with a\\\\n     * {FailedInnerCall} error.\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        if (address(this).balance < value) {\\\\n            revert AddressInsufficientBalance(address(this));\\\\n        }\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\\\n     * unsuccessful call.\\\\n     */\\\\n    function verifyCallResultFromTarget(\\\\n        address target,\\\\n        bool success,\\\\n        bytes memory returndata\\\\n    ) internal view returns (bytes memory) {\\\\n        if (!success) {\\\\n            _revert(returndata);\\\\n        } else {\\\\n            // only check if target is a contract if the call was successful and the return data is empty\\\\n            // otherwise we already know that it was a contract\\\\n            if (returndata.length == 0 && target.code.length == 0) {\\\\n                revert AddressEmptyCode(target);\\\\n            }\\\\n            return returndata;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\\\n     * revert reason or with a default {FailedInnerCall} error.\\\\n     */\\\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\\\n        if (!success) {\\\\n            _revert(returndata);\\\\n        } else {\\\\n            return returndata;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\\\n     */\\\\n    function _revert(bytes memory returndata) private pure {\\\\n        // Look for revert reason and bubble it up if present\\\\n        if (returndata.length > 0) {\\\\n            // The easiest way to bubble the revert reason is using memory via assembly\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                let returndata_size := mload(returndata)\\\\n                revert(add(32, returndata), returndata_size)\\\\n            }\\\\n        } else {\\\\n            revert FailedInnerCall();\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Math} from \\\\\\\"./math/Math.sol\\\\\\\";\\\\nimport {SignedMath} from \\\\\\\"./math/SignedMath.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant HEX_DIGITS = \\\\\\\"0123456789abcdef\\\\\\\";\\\\n    uint8 private constant ADDRESS_LENGTH = 20;\\\\n\\\\n    /**\\\\n     * @dev The `value` string doesn't fit in the specified `length`.\\\\n     */\\\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        unchecked {\\\\n            uint256 length = Math.log10(value) + 1;\\\\n            string memory buffer = new string(length);\\\\n            uint256 ptr;\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                ptr := add(buffer, add(32, length))\\\\n            }\\\\n            while (true) {\\\\n                ptr--;\\\\n                /// @solidity memory-safe-assembly\\\\n                assembly {\\\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\\\n                }\\\\n                value /= 10;\\\\n                if (value == 0) break;\\\\n            }\\\\n            return buffer;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\\\n        return string.concat(value < 0 ? \\\\\\\"-\\\\\\\" : \\\\\\\"\\\\\\\", toString(SignedMath.abs(value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        unchecked {\\\\n            return toHexString(value, Math.log256(value) + 1);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\n        uint256 localValue = value;\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\\"0\\\\\\\";\\\\n        buffer[1] = \\\\\\\"x\\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\\\n            localValue >>= 4;\\\\n        }\\\\n        if (localValue != 0) {\\\\n            revert StringsInsufficientHexLength(value, length);\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\\\n     * representation.\\\\n     */\\\\n    function toHexString(address addr) internal pure returns (string memory) {\\\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the two strings are equal.\\\\n     */\\\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    enum RecoverError {\\\\n        NoError,\\\\n        InvalidSignature,\\\\n        InvalidSignatureLength,\\\\n        InvalidSignatureS\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev The signature derives the `address(0)`.\\\\n     */\\\\n    error ECDSAInvalidSignature();\\\\n\\\\n    /**\\\\n     * @dev The signature has an invalid length.\\\\n     */\\\\n    error ECDSAInvalidSignatureLength(uint256 length);\\\\n\\\\n    /**\\\\n     * @dev The signature has an S value that is in the upper half order.\\\\n     */\\\\n    error ECDSAInvalidSignatureS(bytes32 s);\\\\n\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\\\n     * and a bytes32 providing additional information about the error.\\\\n     *\\\\n     * If no error is returned, then the address can be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\\\n     *\\\\n     * Documentation for signature generation:\\\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\\\n     */\\\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\\\n        if (signature.length == 65) {\\\\n            bytes32 r;\\\\n            bytes32 s;\\\\n            uint8 v;\\\\n            // ecrecover takes the signature parameters, and the only way to get them\\\\n            // currently is to use assembly.\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                r := mload(add(signature, 0x20))\\\\n                s := mload(add(signature, 0x40))\\\\n                v := byte(0, mload(add(signature, 0x60)))\\\\n            }\\\\n            return tryRecover(hash, v, r, s);\\\\n        } else {\\\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\\\n        _throwError(error, errorArg);\\\\n        return recovered;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\\\n     *\\\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\\\n     */\\\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\\\n        unchecked {\\\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\\\n            return tryRecover(hash, v, r, s);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\\\n     */\\\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\\\n        _throwError(error, errorArg);\\\\n        return recovered;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\\\n     * `r` and `s` signature fields separately.\\\\n     */\\\\n    function tryRecover(\\\\n        bytes32 hash,\\\\n        uint8 v,\\\\n        bytes32 r,\\\\n        bytes32 s\\\\n    ) internal pure returns (address, RecoverError, bytes32) {\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (301): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (302): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        if (signer == address(0)) {\\\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\\\n        }\\\\n\\\\n        return (signer, RecoverError.NoError, bytes32(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\\\n     * `r` and `s` signature fields separately.\\\\n     */\\\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\\\n        _throwError(error, errorArg);\\\\n        return recovered;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\\\n     */\\\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\\\n        if (error == RecoverError.NoError) {\\\\n            return; // no error: do nothing\\\\n        } else if (error == RecoverError.InvalidSignature) {\\\\n            revert ECDSAInvalidSignature();\\\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\\\n        } else if (error == RecoverError.InvalidSignatureS) {\\\\n            revert ECDSAInvalidSignatureS(errorArg);\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Strings} from \\\\\\\"../Strings.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\\\n *\\\\n * The library provides methods for generating a hash of a message that conforms to the\\\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\\\n * specifications.\\\\n */\\\\nlibrary MessageHashUtils {\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n     * `0x45` (`personal_sign` messages).\\\\n     *\\\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\\\n     * `\\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\\"` and hashing the result. It corresponds with the\\\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\\\n     *\\\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\\\n     * be re-hashed.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            mstore(0x00, \\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\\") // 32 is the bytes-length of messageHash\\\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n     * `0x45` (`personal_sign` messages).\\\\n     *\\\\n     * The digest is calculated by prefixing an arbitrary `message` with\\\\n     * `\\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n\\\\\\\" + len(message)` and hashing the result. It corresponds with the\\\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\\\n        return\\\\n            keccak256(bytes.concat(\\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n\\\\\\\", bytes(Strings.toString(message.length)), message));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n     * `0x00` (data with intended validator).\\\\n     *\\\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\\\\\"\\\\\\\\x19\\\\\\\\x00\\\\\\\"` and the intended\\\\n     * `validator` address. Then hashing the result.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\\\n        return keccak256(abi.encodePacked(hex\\\\\\\"19_00\\\\\\\", validator, data));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\\\n     *\\\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\\\n     * `\\\\\\\\x19\\\\\\\\x01` and hashing the result. It corresponds to the hash signed by the\\\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            let ptr := mload(0x40)\\\\n            mstore(ptr, hex\\\\\\\"19_01\\\\\\\")\\\\n            mstore(add(ptr, 0x02), domainSeparator)\\\\n            mstore(add(ptr, 0x22), structHash)\\\\n            digest := keccak256(ptr, 0x42)\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Muldiv operation overflow.\\\\n     */\\\\n    error MathOverflowedMulDiv();\\\\n\\\\n    enum Rounding {\\\\n        Floor, // Toward negative infinity\\\\n        Ceil, // Toward positive infinity\\\\n        Trunc, // Toward zero\\\\n        Expand // Away from zero\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\\\n            // benefit is lost if 'b' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a > b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow.\\\\n        return (a & b) + (a ^ b) / 2;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the ceiling of the division of two numbers.\\\\n     *\\\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\\\n     * of rounding towards zero.\\\\n     */\\\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        if (b == 0) {\\\\n            // Guarantee the same behavior as in a regular Solidity division.\\\\n            return a / b;\\\\n        }\\\\n\\\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\\\n     * denominator == 0.\\\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\\\n     * Uniswap Labs also under MIT license.\\\\n     */\\\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\\\n        unchecked {\\\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\\\n            // variables such that product = prod1 * 2^256 + prod0.\\\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\\\n            uint256 prod1; // Most significant 256 bits of the product\\\\n            assembly {\\\\n                let mm := mulmod(x, y, not(0))\\\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\\\n            }\\\\n\\\\n            // Handle non-overflow cases, 256 by 256 division.\\\\n            if (prod1 == 0) {\\\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\\\n                // The surrounding unchecked block does not change this fact.\\\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\\\n                return prod0 / denominator;\\\\n            }\\\\n\\\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\\\n            if (denominator <= prod1) {\\\\n                revert MathOverflowedMulDiv();\\\\n            }\\\\n\\\\n            ///////////////////////////////////////////////\\\\n            // 512 by 256 division.\\\\n            ///////////////////////////////////////////////\\\\n\\\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\\\n            uint256 remainder;\\\\n            assembly {\\\\n                // Compute remainder using mulmod.\\\\n                remainder := mulmod(x, y, denominator)\\\\n\\\\n                // Subtract 256 bit number from 512 bit number.\\\\n                prod1 := sub(prod1, gt(remainder, prod0))\\\\n                prod0 := sub(prod0, remainder)\\\\n            }\\\\n\\\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\\\n\\\\n            uint256 twos = denominator & (0 - denominator);\\\\n            assembly {\\\\n                // Divide denominator by twos.\\\\n                denominator := div(denominator, twos)\\\\n\\\\n                // Divide [prod1 prod0] by twos.\\\\n                prod0 := div(prod0, twos)\\\\n\\\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\\\n                twos := add(div(sub(0, twos), twos), 1)\\\\n            }\\\\n\\\\n            // Shift in bits from prod1 into prod0.\\\\n            prod0 |= prod1 * twos;\\\\n\\\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\\\n            uint256 inverse = (3 * denominator) ^ 2;\\\\n\\\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\\\n            // works in modular arithmetic, doubling the correct bits in each step.\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\\\n\\\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\\\n            // is no longer required.\\\\n            result = prod0 * inverse;\\\\n            return result;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\\\n     */\\\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\\\n        uint256 result = mulDiv(x, y, denominator);\\\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\\\n            result += 1;\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\\\n     * towards zero.\\\\n     *\\\\n     * Inspired by Henry S. Warren, Jr.'s \\\\\\\"Hacker's Delight\\\\\\\" (Chapter 11).\\\\n     */\\\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\\\n        //\\\\n        // We know that the \\\\\\\"msb\\\\\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\\\n        //\\\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\\\n        // \\\\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\\\n        // \\\\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\\\n        //\\\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\\\n        uint256 result = 1 << (log2(a) >> 1);\\\\n\\\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\\\n        // into the expected uint128 result.\\\\n        unchecked {\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            return min(result, a / result);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\\\n     */\\\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = sqrt(a);\\\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log2(uint256 value) internal pure returns (uint256) {\\\\n        uint256 result = 0;\\\\n        unchecked {\\\\n            if (value >> 128 > 0) {\\\\n                value >>= 128;\\\\n                result += 128;\\\\n            }\\\\n            if (value >> 64 > 0) {\\\\n                value >>= 64;\\\\n                result += 64;\\\\n            }\\\\n            if (value >> 32 > 0) {\\\\n                value >>= 32;\\\\n                result += 32;\\\\n            }\\\\n            if (value >> 16 > 0) {\\\\n                value >>= 16;\\\\n                result += 16;\\\\n            }\\\\n            if (value >> 8 > 0) {\\\\n                value >>= 8;\\\\n                result += 8;\\\\n            }\\\\n            if (value >> 4 > 0) {\\\\n                value >>= 4;\\\\n                result += 4;\\\\n            }\\\\n            if (value >> 2 > 0) {\\\\n                value >>= 2;\\\\n                result += 2;\\\\n            }\\\\n            if (value >> 1 > 0) {\\\\n                result += 1;\\\\n            }\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = log2(value);\\\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log10(uint256 value) internal pure returns (uint256) {\\\\n        uint256 result = 0;\\\\n        unchecked {\\\\n            if (value >= 10 ** 64) {\\\\n                value /= 10 ** 64;\\\\n                result += 64;\\\\n            }\\\\n            if (value >= 10 ** 32) {\\\\n                value /= 10 ** 32;\\\\n                result += 32;\\\\n            }\\\\n            if (value >= 10 ** 16) {\\\\n                value /= 10 ** 16;\\\\n                result += 16;\\\\n            }\\\\n            if (value >= 10 ** 8) {\\\\n                value /= 10 ** 8;\\\\n                result += 8;\\\\n            }\\\\n            if (value >= 10 ** 4) {\\\\n                value /= 10 ** 4;\\\\n                result += 4;\\\\n            }\\\\n            if (value >= 10 ** 2) {\\\\n                value /= 10 ** 2;\\\\n                result += 2;\\\\n            }\\\\n            if (value >= 10 ** 1) {\\\\n                result += 1;\\\\n            }\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = log10(value);\\\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\\\n     * Returns 0 if given 0.\\\\n     *\\\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\\\n     */\\\\n    function log256(uint256 value) internal pure returns (uint256) {\\\\n        uint256 result = 0;\\\\n        unchecked {\\\\n            if (value >> 128 > 0) {\\\\n                value >>= 128;\\\\n                result += 16;\\\\n            }\\\\n            if (value >> 64 > 0) {\\\\n                value >>= 64;\\\\n                result += 8;\\\\n            }\\\\n            if (value >> 32 > 0) {\\\\n                value >>= 32;\\\\n                result += 4;\\\\n            }\\\\n            if (value >> 16 > 0) {\\\\n                value >>= 16;\\\\n                result += 2;\\\\n            }\\\\n            if (value >> 8 > 0) {\\\\n                result += 1;\\\\n            }\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = log256(value);\\\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\\\n     */\\\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\\\n        return uint8(rounding) % 2 == 1;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard signed math utilities missing in the Solidity language.\\\\n */\\\\nlibrary SignedMath {\\\\n    /**\\\\n     * @dev Returns the largest of two signed numbers.\\\\n     */\\\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\\\n        return a > b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two signed numbers.\\\\n     */\\\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two signed numbers without overflow.\\\\n     * The result is rounded towards zero.\\\\n     */\\\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\\\n        // Formula from the book \\\\\\\"Hacker's Delight\\\\\\\"\\\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the absolute unsigned value of a signed value.\\\\n     */\\\\n    function abs(int256 n) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            // must be unchecked in order to support `n = type(int256).min`\\\\n            return uint256(n >= 0 ? n : -n);\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/FLoppyGamble.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport \\\\\\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\\\\\";\\\\nimport \\\\\\\"@interfaces/IFloppyGamble.sol\\\\\\\";\\\\nimport { SafeERC20, IERC20 } from \\\\\\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\\\\\";\\\\nimport { ECDSA } from \\\\\\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\\\\\";\\\\nimport { MessageHashUtils } from \\\\\\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\\\\\";\\\\nimport { Ownable } from \\\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\\";\\\\n\\\\ncontract FloppyGamble is IFloppyGamble, Initializable, Ownable {\\\\n  uint256 public constant MAX_PERCENTAGE = 100_000;\\\\n  /// @dev keccak256(\\\\\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\\\\\")\\\\n  bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\\\n  /// @dev keccak256(\\\\\\\"Permit(uint256 betId,address requester,address receiver,uint256 points,uint256 betAmount,uint256 deadline)\\\\\\\");\\\\n  bytes32 public constant PERMIT_TYPEHASH = 0x50868ac445b6de6f2e1973a0c096591dec8882fe4d476c7b8682133b74f74523;\\\\n  /// @dev keccak256(\\\\\\\"Permit(uint256 betId,address requester)\\\\\\\")\\\\n  bytes32 public constant CANCEL_PERMIT_TYPEHASH = 0x0;\\\\n\\\\n  /// @dev Time period within which a bet can be canceled\\\\n  uint256 public constant CANCELLATION_PERIOD = 1 hours;\\\\n  bytes32 public DOMAIN_SEPARATOR;\\\\n  /// @dev Mapping of bet IDs to their corresponding bet information\\\\n  mapping(uint256 betId => BetInfo info) internal _bets;\\\\n  /// @dev Mapping of bet tiers to their corresponding points ranges\\\\n  mapping(BetTier tier => PointsRange range) internal _pointsRanges;\\\\n  /// @dev Mapping of bet tiers to their corresponding reward percentages\\\\n  mapping(BetTier tier => uint256 rewardPercentage) internal _rewardPercentages;\\\\n  /// @dev Counter for bet IDs\\\\n  uint256 internal _ids;\\\\n  /// @dev Maximum allowed bet amount\\\\n  uint256 internal _maxBetAmount;\\\\n  /// @dev Minimum allowed bet amount\\\\n  uint256 internal _minBetAmount;\\\\n  /// @dev Percentage of the bet amount to be deducted as a penalty when a bet is canceled\\\\n  uint256 internal _penaltyForCanceledBet;\\\\n  /// @dev Address of the signer for bet validation\\\\n  address internal _signer;\\\\n  /// @dev ERC20 token used for betting\\\\n  IERC20 internal _asset;\\\\n  /// @dev Address of the wallet used to distribute rewards\\\\n  address internal _wallet;\\\\n  /// @dev Reserved space for upgradeability\\\\n  uint256[50] private _____gap;\\\\n\\\\n constructor() Ownable(_msgSender()) {\\\\n    _disableInitializers();\\\\n  }\\\\n\\\\n  function initialize(\\\\n    IERC20 asset,\\\\n    address wallet,\\\\n    uint256 maxBetAmount,\\\\n    uint256 minBetAmount,\\\\n    address signer,\\\\n    uint256 penaltyForCanceledBet,\\\\n    // Points ranges for each bet tier\\\\n    // pointsRanges[0] -> Bronze\\\\n    // pointsRanges[1] -> Silver\\\\n    // pointsRanges[2] -> Gold\\\\n    // pointsRanges[3] -> Diamond\\\\n    PointsRange[] calldata pointsRanges,\\\\n    // Reward percentages for each bet tier\\\\n    // rewardPercentages[0] -> Bronze\\\\n    // rewardPercentages[1] -> Silver\\\\n    // rewardPercentages[2] -> Gold\\\\n    // rewardPercentages[3] -> Diamond\\\\n    uint256[] calldata rewardPercentages\\\\n  ) external initializer {\\\\n    _transferOwnership(_msgSender());\\\\n    _updateDomainSeparator();\\\\n    _setPointsRanges(pointsRanges);\\\\n    _setRewardPercentages(rewardPercentages);\\\\n    _setAsset(asset);\\\\n    _setWallet(wallet);\\\\n    _setSigner(signer);\\\\n    _setMaxBetAmount(maxBetAmount);\\\\n    _setMinBetAmount(minBetAmount);\\\\n    _setPenaltyForCanceledBet(penaltyForCanceledBet);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function placeBet(address receiver, uint256 amount, BetTier tier) external returns (uint256 betId) {\\\\n    if (amount > _maxBetAmount || amount < _minBetAmount) {\\\\n      revert InvalidBetAmount();\\\\n    }\\\\n    if (tier == BetTier.Unknown) revert InvalidBetTier();\\\\n    if (receiver == address(0)) revert NullAddress();\\\\n    address requester = _msgSender();\\\\n\\\\n    SafeERC20.safeTransferFrom(_asset, requester, address(this), amount);\\\\n    betId = _ids++;\\\\n\\\\n    _bets[betId] = BetInfo({\\\\n      requester: requester,\\\\n      receiver: receiver,\\\\n      amount: amount,\\\\n      tier: tier,\\\\n      status: BetStatus.Pending,\\\\n      timestamp: block.timestamp,\\\\n      points: 0,\\\\n      reward: 0,\\\\n      win: false,\\\\n      claimed: false\\\\n    });\\\\n\\\\n    emit BetPlaced(requester, betId);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function cancelBet(uint256 betId, bytes memory signature) external {\\\\n    BetInfo storage betInfo = _bets[betId];\\\\n    address requester = _msgSender();\\\\n    \\\\n    _requireBetExists(betId);\\\\n    _requireBetStatus(betInfo.status, BetStatus.Pending);\\\\n    if (betInfo.requester != requester) revert ErrNotRequester();\\\\n\\\\n    _validateCancelSignature(betId, requester, signature);\\\\n\\\\n    uint256 betAmount = betInfo.amount;\\\\n    uint256 penaltyAmount = (betAmount * _penaltyForCanceledBet) / MAX_PERCENTAGE;\\\\n    SafeERC20.safeTransfer(_asset, _wallet, penaltyAmount);\\\\n    SafeERC20.safeTransfer(_asset, requester, betAmount - penaltyAmount);\\\\n\\\\n    betInfo.status = BetStatus.Canceled;\\\\n    emit BetCanceled(requester, betId);\\\\n  }\\\\n\\\\n  function cancelBet(uint256 betId) external {\\\\n    BetInfo storage betInfo = _bets[betId];\\\\n    address requester = _msgSender();\\\\n    \\\\n    _requireBetExists(betId);\\\\n    _requireBetStatus(betInfo.status, BetStatus.Pending);\\\\n    if (betInfo.requester != requester) revert ErrNotRequester();\\\\n\\\\n    uint256 betAmount = betInfo.amount;\\\\n    uint256 penaltyAmount = (betAmount * _penaltyForCanceledBet) / MAX_PERCENTAGE;\\\\n    SafeERC20.safeTransfer(_asset, _wallet, penaltyAmount);\\\\n    SafeERC20.safeTransfer(_asset, requester, betAmount - penaltyAmount);\\\\n\\\\n    betInfo.status = BetStatus.Canceled;\\\\n    emit BetCanceled(requester, betId);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function resolveBet(uint256 betId, uint256 points, uint256 deadline, bytes memory signature) external {\\\\n    BetInfo storage betInfo = _bets[betId];\\\\n    uint256 betAmount = betInfo.amount;\\\\n    _requireBetExists(betId);\\\\n    _requireBetStatus(betInfo.status, BetStatus.Pending);\\\\n    if (deadline < block.timestamp) revert SignatureExpired();\\\\n\\\\n    _validateSignature(betId, betInfo.requester, betInfo.receiver, points, betAmount, deadline, signature);\\\\n\\\\n    betInfo.status = BetStatus.Resolved;\\\\n    betInfo.points = points;\\\\n    bool isWin = points >= _pointsRanges[betInfo.tier].minPoints;\\\\n    betInfo.win = isWin;\\\\n    if (isWin) {\\\\n      betInfo.reward = (betAmount * _rewardPercentages[betInfo.tier]) / MAX_PERCENTAGE;\\\\n    }\\\\n\\\\n    emit BetResolved(betId, isWin);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function claimReward(uint256 betId) external returns (uint256 rewardAmount) {\\\\n    BetInfo storage betInfo = _bets[betId];\\\\n    _requireBetExists(betId);\\\\n    _requireBetStatus(betInfo.status, BetStatus.Resolved);\\\\n    if (!betInfo.win) revert BetLost(betId);\\\\n    if (betInfo.claimed) revert RewardAlreadyClaimed(betId);\\\\n\\\\n    betInfo.claimed = true;\\\\n    rewardAmount = betInfo.reward;\\\\n    _claimReward(betInfo.receiver, rewardAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function resolveBetAndClaimReward(\\\\n    uint256 betId,\\\\n    uint256 points,\\\\n    uint256 deadline,\\\\n    bytes memory signature\\\\n  ) external returns (uint256 rewardAmount) {\\\\n    this.resolveBet(betId, points, deadline, signature);\\\\n    rewardAmount = this.claimReward(betId);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setMinBetAmount(uint256 minBetAmount) external onlyOwner {\\\\n    if (minBetAmount > _maxBetAmount || minBetAmount == 0) {\\\\n      revert InvalidMinBetAmount();\\\\n    }\\\\n    _setMinBetAmount(minBetAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setMaxBetAmount(uint256 maxBetAmount) external onlyOwner {\\\\n    if (maxBetAmount < _minBetAmount || maxBetAmount == 0) {\\\\n      revert InvalidMaxBetAmount();\\\\n    }\\\\n    _setMaxBetAmount(maxBetAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setSigner(address signer) external onlyOwner {\\\\n    if (signer == address(0)) revert NullAddress();\\\\n    _setSigner(signer);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setAsset(IERC20 asset) external onlyOwner {\\\\n    if (address(asset) == address(0)) revert NullAddress();\\\\n    _setAsset(asset);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setWallet(address wallet) external onlyOwner {\\\\n    if (wallet == address(0)) revert NullAddress();\\\\n    _setWallet(wallet);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setPenaltyForCanceledBet(uint256 penaltyForCanceledBet) external onlyOwner {\\\\n    if (penaltyForCanceledBet >= MAX_PERCENTAGE || penaltyForCanceledBet == 0) revert InvalidPenaltyForCanceledBet();\\\\n    _setPenaltyForCanceledBet(penaltyForCanceledBet);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setPointsRanges(PointsRange[] calldata pointsRanges) external onlyOwner {\\\\n    if (pointsRanges.length != 4) revert InvalidLength();\\\\n    _setPointsRanges(pointsRanges);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function setRewardPercentages(uint256[] calldata rewardPercentages) external onlyOwner {\\\\n    if (rewardPercentages.length != 4) revert InvalidLength();\\\\n    _setRewardPercentages(rewardPercentages);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getMaxPointsForTier(BetTier tier) external view returns (uint256) {\\\\n    return _pointsRanges[tier].maxPoints;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getMinPointsForTier(BetTier tier) external view returns (uint256) {\\\\n    return _pointsRanges[tier].minPoints;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getPointsRangeForTier(BetTier tier) external view returns (uint256, uint256) {\\\\n    PointsRange memory range = _pointsRanges[tier];\\\\n    return (range.minPoints, range.maxPoints);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getPenaltyForCanceledBet() external view returns (uint256) {\\\\n    return _penaltyForCanceledBet;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getReward(BetTier tier, uint256 betAmount) external view returns (uint256) {\\\\n    return (betAmount * _rewardPercentages[tier]) / MAX_PERCENTAGE;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getBetInfoById(uint256 betId) external view returns (BetInfo memory) {\\\\n    return _bets[betId];\\\\n  }\\\\n\\\\n  function getLastBetId() external view returns (uint256) {\\\\n    return _ids - 1;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getBetsByStatus(BetStatus status) external view returns (uint256[] memory betIds, BetInfo[] memory bets) {\\\\n    uint256 length = _ids;\\\\n    uint256 count;\\\\n    for (uint256 i = 0; i < length; ++i) {\\\\n      if (_bets[i].status == status) ++count;\\\\n    }\\\\n\\\\n    betIds = new uint256[](count);\\\\n    bets = new BetInfo[](count);\\\\n\\\\n    for (uint256 i = 0; i < length; ++i) {\\\\n      if (_bets[i].status == status) {\\\\n        betIds[i] = i;\\\\n        bets[i] = _bets[i];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getAllBets() external view returns (uint256[] memory betIds, BetInfo[] memory bets) {\\\\n    uint256 length = _ids;\\\\n    betIds = new uint256[](length);\\\\n    bets = new BetInfo[](length);\\\\n\\\\n    for (uint256 i = 0; i < length; ++i) {\\\\n      betIds[i] = i;\\\\n      bets[i] = _bets[i];\\\\n    }\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getMaxBetAmount() external view returns (uint256) {\\\\n    return _maxBetAmount;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getMinBetAmount() external view returns (uint256) {\\\\n    return _minBetAmount;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getSigner() external view returns (address) {\\\\n    return _signer;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getAsset() external view returns (address) {\\\\n    return address(_asset);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyGamble\\\\n  function getWallet() external view returns (address) {\\\\n    return _wallet;\\\\n  }\\\\n\\\\n  function _setMinBetAmount(uint256 minBetAmount) internal {\\\\n    _minBetAmount = minBetAmount;\\\\n    emit MinBetAmountUpdated(minBetAmount);\\\\n  }\\\\n\\\\n  function _setMaxBetAmount(uint256 maxBetAmount) internal {\\\\n    _maxBetAmount = maxBetAmount;\\\\n    emit MaxBetAmountUpdated(maxBetAmount);\\\\n  }\\\\n\\\\n  function _setSigner(address signer) internal {\\\\n    _signer = signer;\\\\n    emit SignerUpdated(signer);\\\\n  }\\\\n\\\\n  function _setAsset(IERC20 asset) internal {\\\\n    _asset = asset;\\\\n    emit AssetUpdated(address(asset));\\\\n  }\\\\n\\\\n  function _setWallet(address wallet) internal {\\\\n    _wallet = wallet;\\\\n    emit WalletUpdated(wallet);\\\\n  }\\\\n\\\\n  function _setPenaltyForCanceledBet(uint256 penaltyForCanceledBet) internal {\\\\n    _penaltyForCanceledBet = penaltyForCanceledBet;\\\\n    emit PenaltyForCanceledBetUpdated(penaltyForCanceledBet);\\\\n  }\\\\n\\\\n  function _setPointsRanges(PointsRange[] calldata pointsRanges) internal {\\\\n    _pointsRanges[BetTier.Bronze] = pointsRanges[0];\\\\n    _pointsRanges[BetTier.Silver] = pointsRanges[1];\\\\n    _pointsRanges[BetTier.Gold] = pointsRanges[2];\\\\n    _pointsRanges[BetTier.Diamond] = pointsRanges[3];\\\\n    emit PointsRangesUpdated(pointsRanges);\\\\n  }\\\\n\\\\n  function _setRewardPercentages(uint256[] calldata rewardPercentages) internal {\\\\n    _rewardPercentages[BetTier.Bronze] = rewardPercentages[0];\\\\n    _rewardPercentages[BetTier.Silver] = rewardPercentages[1];\\\\n    _rewardPercentages[BetTier.Gold] = rewardPercentages[2];\\\\n    _rewardPercentages[BetTier.Diamond] = rewardPercentages[3];\\\\n    emit RewardPercentagesUpdated(rewardPercentages);\\\\n  }\\\\n\\\\n  /// @dev Helper function for claiming reward.\\\\n  function _claimReward(address receiver, uint256 amount) internal {\\\\n    SafeERC20.safeTransfer(_asset, receiver, amount);\\\\n    emit RewardClaimed(receiver, amount);\\\\n  }\\\\n\\\\n  function _requireBetStatus(BetStatus status, BetStatus expected) internal pure {\\\\n    if (status != expected) revert InvalidBetStatus(status, expected);\\\\n  }\\\\n\\\\n  function _requireBetExists(uint256 betId) internal view {\\\\n    if (betId >= _ids) revert BetDoesNotExist();\\\\n  }\\\\n\\\\n  function _validateSignature(\\\\n    uint256 betId,\\\\n    address requester,\\\\n    address receiver,\\\\n    uint256 points,\\\\n    uint256 betAmount,\\\\n    uint256 deadline,\\\\n    bytes memory signature\\\\n  ) internal view {\\\\n    address signer = ECDSA.recover(\\\\n      MessageHashUtils.toTypedDataHash(\\\\n        DOMAIN_SEPARATOR,\\\\n        keccak256(abi.encode(PERMIT_TYPEHASH, betId, requester, receiver, points, betAmount, deadline))\\\\n      ),\\\\n      signature\\\\n    );\\\\n    if (signer != _signer) revert InvalidSignature();\\\\n  }\\\\n\\\\n  function _validateCancelSignature(uint256 betId, address requester, bytes memory signature) internal view {\\\\n    address signer = ECDSA.recover(\\\\n      MessageHashUtils.toTypedDataHash(\\\\n        DOMAIN_SEPARATOR, keccak256(abi.encode(CANCEL_PERMIT_TYPEHASH, betId, requester))\\\\n      ),\\\\n      signature\\\\n    );\\\\n    if (signer != _signer) revert InvalidSignature();\\\\n  }\\\\n\\\\n  /// @dev Updates domain separator.\\\\n  function _updateDomainSeparator() internal {\\\\n    bytes32 nameHash = keccak256(bytes(\\\\\\\"FloppyGamble\\\\\\\"));\\\\n    bytes32 versionHash = keccak256(bytes(\\\\\\\"1\\\\\\\"));\\\\n    assembly (\\\\\\\"memory-safe\\\\\\\") {\\\\n      let free_mem_ptr := mload(0x40) // Load the free memory pointer.\\\\n      mstore(free_mem_ptr, DOMAIN_TYPEHASH)\\\\n      mstore(add(free_mem_ptr, 0x20), nameHash)\\\\n      mstore(add(free_mem_ptr, 0x40), versionHash)\\\\n      mstore(add(free_mem_ptr, 0x60), chainid())\\\\n      mstore(add(free_mem_ptr, 0x80), address())\\\\n      sstore(DOMAIN_SEPARATOR.slot, keccak256(free_mem_ptr, 0xa0))\\\\n    }\\\\n  }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xad0ab58efb25f141f9a35e0775fdcbceffd4d98805663dae5bed1fd1a5432c7d\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/interfaces/IFloppyGamble.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport { IERC20 } from \\\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\\";\\\\n\\\\ninterface IFloppyGamble {\\\\n  enum BetTier {\\\\n    Unknown,\\\\n    Bronze, // 50 -> 100\\\\n    Silver, // 101 -> 200\\\\n    Gold, // 201 -> 400\\\\n    Diamond // 401 -> Infinity\\\\n\\\\n  }\\\\n\\\\n  enum BetStatus {\\\\n    Unknown,\\\\n    Pending,\\\\n    Resolved,\\\\n    Canceled\\\\n  }\\\\n\\\\n  struct BetInfo {\\\\n    address requester;\\\\n    address receiver;\\\\n    BetTier tier;\\\\n    BetStatus status;\\\\n    uint256 amount;\\\\n    uint256 points;\\\\n    uint256 reward;\\\\n    uint256 timestamp;\\\\n    bool win;\\\\n    bool claimed;\\\\n  }\\\\n\\\\n  struct PointsRange {\\\\n    uint256 minPoints;\\\\n    uint256 maxPoints;\\\\n  }\\\\n\\\\n  /// @dev Emit when the signer is updated.\\\\n  event SignerUpdated(address indexed signer);\\\\n  /// @dev Emit when the asset is updated.\\\\n  event AssetUpdated(address indexed asset);\\\\n  /// @dev Emit when the wallet used to distribute rewards is updated.\\\\n  event WalletUpdated(address indexed wallet);\\\\n  /// @dev Emit when the max bet amount is updated.\\\\n  event MaxBetAmountUpdated(uint256 maxBetAmount);\\\\n  /// @dev Emit when the min bet amount is updated.\\\\n  event MinBetAmountUpdated(uint256 minBetAmount);\\\\n  /// @dev Emit when the points ranges are updated.\\\\n  event PointsRangesUpdated(PointsRange[] pointsRanges);\\\\n  /// @dev Emit when a bet is placed.\\\\n  event BetPlaced(address indexed requester, uint256 betId);\\\\n  /// @dev Emit when a bet is canceled.\\\\n  event BetCanceled(address indexed requester, uint256 betId);\\\\n  /// @dev Emit when a bet is resolved.\\\\n  event BetResolved(uint256 indexed betId, bool win);\\\\n  /// @dev Emit when the penalty for canceled bet is updated.\\\\n  event PenaltyForCanceledBetUpdated(uint256 penaltyForCanceledBet);\\\\n  /// @dev Emit when the reward percentages are updated.\\\\n  event RewardPercentagesUpdated(uint256[] rewardPercentages);\\\\n  /// @dev Emit when a user claims their reward\\\\n  event RewardClaimed(address indexed receiver, uint256 amount);\\\\n\\\\n  /// @dev Revert when the signature is invalid.\\\\n  error InvalidSignature();\\\\n  /// @dev Revert when the bet tier is invalid.\\\\n  error InvalidBetTier();\\\\n  /// @dev Revert when the bet id is invalid.\\\\n  error InvalidBetId();\\\\n  /// @dev Revert when the bet is already resolved.\\\\n  error BetAlreadyResolved(uint256 betId);\\\\n  /// @dev Revert when the bet amount is invalid.\\\\n  error InvalidBetAmount();\\\\n  /// @dev Revert when array length is invalid.\\\\n  error InvalidLength();\\\\n  /// @dev Revert when the bet is already canceled.\\\\n  error BetAlreadyCanceled(uint256 betId);\\\\n  /// @dev Revert when the bet status is not expected.\\\\n  error InvalidBetStatus(BetStatus expected, BetStatus actual);\\\\n  /// @dev Revert when the receiver is null.\\\\n  error NullAddress();\\\\n  /// @dev Revert when the user is not the requester.\\\\n  error ErrNotRequester();\\\\n  /// @dev Revert when claim the reward for lost bet.\\\\n  error BetLost(uint256 betId);\\\\n  /// @dev Revert when claim the reward for already claimed bet.\\\\n  error RewardAlreadyClaimed(uint256 betId);\\\\n  /// @dev Revert when signature expired.\\\\n  error SignatureExpired();\\\\n  /// @dev Revert when min bet amount is greater than max bet amount or equal to zero.\\\\n  error InvalidMinBetAmount();\\\\n  /// @dev Revert when max bet amount is less than min bet amount or equal to zero.\\\\n  error InvalidMaxBetAmount();\\\\n  /// @dev Revert when penalty for canceled bet is greater than 100% or equal to zero.\\\\n  error InvalidPenaltyForCanceledBet();\\\\n  /// @dev Revert when bet does not exist.\\\\n  error BetDoesNotExist();\\\\n  /// @dev Revert when too soon to cancel bet.\\\\n  error TooSoonToCancel();\\\\n\\\\n  /**\\\\n   * @dev Places a bet with the specified amount and tier.\\\\n   * This function allows a user to place a bet by specifying the amount and the tier of the bet.\\\\n   * Emits a {BetPlaced} event.\\\\n   *\\\\n   * @param receiver The address of the receiver of the bet.\\\\n   * @param amount The amount of the bet.\\\\n   * @param tier The tier of the bet.\\\\n   */\\\\n  function placeBet(address receiver, uint256 amount, BetTier tier) external returns (uint256);\\\\n\\\\n  /**\\\\n   * @dev Cancels a bet that has been placed.\\\\n   * This function allows the requester to cancel their bet.\\\\n   * Only the requester who placed the bet can cancel it.\\\\n   * Emits a {BetCanceled} event.\\\\n   *\\\\n   * @param betId The ID of the bet to be canceled.\\\\n   */\\\\n  function cancelBet(uint256 betId, bytes memory signature) external;\\\\n\\\\n  /**\\\\n   * @dev Resolves a bet that has been placed.\\\\n   * This function determines the outcome of the bet and updates the bet information accordingly.\\\\n   * Emits a {BetResolved} event.\\\\n   *\\\\n   * @param betId The ID of the bet to be resolved.\\\\n   * @param points The number of points achieved in the bet.\\\\n   * @param deadline The timestamp after which the signature becomes invalid.\\\\n   * @param signature The cryptographic signature provided by the backend to validate the result.\\\\n   */\\\\n  function resolveBet(uint256 betId, uint256 points, uint256 deadline, bytes memory signature) external;\\\\n  /**\\\\n   * @dev Resolves a bet and claims the reward.\\\\n   * This function resolves a bet and distributes the reward to the receiver based on the bet outcome.\\\\n   * Emits a {BetResolved} event and a {RewardClaimed} event if the bet is won.\\\\n   *\\\\n   * @param betId The ID of the bet to be resolved.\\\\n   * @param points The number of points achieved in the bet.\\\\n   * @param deadline The timestamp after which the signature becomes invalid.\\\\n   * @param signature The cryptographic signature provided by the backend to validate the result.\\\\n   * @return The amount of the reward distributed, or 0 if the bet is lost.\\\\n   */\\\\n  function resolveBetAndClaimReward(\\\\n    uint256 betId,\\\\n    uint256 points,\\\\n    uint256 deadline,\\\\n    bytes memory signature\\\\n  ) external returns (uint256);\\\\n\\\\n  /**\\\\n   * @dev Claims the reward for a bet that has been resolved.\\\\n   * This function allows the receiver to claim the reward based on the bet outcome.\\\\n   * Emits a {RewardClaimed} event.\\\\n   *\\\\n   * @param betId The ID of the bet to claim the reward for.\\\\n   */\\\\n  function claimReward(uint256 betId) external returns (uint256);\\\\n  /**\\\\n   * @dev Sets the minimum bet amount.\\\\n   * @param minBetAmount The new minimum bet amount.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setMinBetAmount(uint256 minBetAmount) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the maximum bet amount.\\\\n   * @param maxBetAmount The new maximum bet amount.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setMaxBetAmount(uint256 maxBetAmount) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the signer address.\\\\n   * @param signer The new signer address.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setSigner(address signer) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the asset token.\\\\n   * @param asset The new asset token address.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setAsset(IERC20 asset) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the wallet address.\\\\n   * @param wallet The new wallet address.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setWallet(address wallet) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the penalty for canceled bets.\\\\n   * @param penaltyForCanceledBet The new penalty percentage.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setPenaltyForCanceledBet(uint256 penaltyForCanceledBet) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the reward percentages for bet tiers.\\\\n   * @param rewardPercentages The new reward percentages for each tier.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setRewardPercentages(uint256[] calldata rewardPercentages) external;\\\\n\\\\n  /**\\\\n   * @dev Sets the points ranges for bet tiers.\\\\n   * @param pointsRanges The new points ranges for each tier.\\\\n   * Only callable by the owner.\\\\n   */\\\\n  function setPointsRanges(PointsRange[] calldata pointsRanges) external;\\\\n\\\\n  /// @dev Function to get the penalty for canceled bet\\\\n  function getPenaltyForCanceledBet() external view returns (uint256);\\\\n\\\\n  /// @dev Function to get the maximum points for a given tier\\\\n  function getMaxPointsForTier(BetTier tier) external view returns (uint256);\\\\n\\\\n  /// @dev Function to get the minimum points for a given tier\\\\n  function getMinPointsForTier(BetTier tier) external view returns (uint256);\\\\n\\\\n  /// @dev Function to get the points range for a given tier\\\\n  function getPointsRangeForTier(BetTier tier) external view returns (uint256, uint256);\\\\n\\\\n  /// @dev Function to get the reward for a given tier and bet amount\\\\n  function getReward(BetTier tier, uint256 betAmount) external view returns (uint256);\\\\n\\\\n  /// @dev Function to get the bet info for a given bet ID\\\\n  function getBetInfoById(uint256 betId) external view returns (BetInfo memory);\\\\n\\\\n  /// @dev Function to get bets by status.\\\\n  function getBetsByStatus(BetStatus status) external view returns (uint256[] memory, BetInfo[] memory);\\\\n\\\\n  /// @dev Function to get all bets.\\\\n  function getAllBets() external view returns (uint256[] memory, BetInfo[] memory);\\\\n\\\\n  /// @dev Function to get the maximum bet amount\\\\n  function getMaxBetAmount() external view returns (uint256);\\\\n\\\\n  /// @dev Function to get the minimum bet amount\\\\n  function getMinBetAmount() external view returns (uint256);\\\\n\\\\n  /// @dev Function to get the current signer address\\\\n  function getSigner() external view returns (address);\\\\n\\\\n  /// @dev Function to get the current asset address\\\\n  function getAsset() external view returns (address);\\\\n\\\\n  /// @dev Function to get the current wallet address\\\\n  function getWallet() external view returns (address);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x7bd7ef374ab3400e8f4646df3d512c2dd6c620259ccfec8aec020a9d3d355712\\\",\\\"license\\\":\\\"MIT\\\"}},\\\"version\\\":1}\"",
  "nonce": 53,
  "storageLayout": {
    "storage": [
      {
        "astId": 98104,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 104240,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 104246,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_bets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(BetInfo)108166_storage)"
      },
      {
        "astId": 104253,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_pointsRanges",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(BetTier)108138,t_struct(PointsRange)108171_storage)"
      },
      {
        "astId": 104259,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_rewardPercentages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(BetTier)108138,t_uint256)"
      },
      {
        "astId": 104262,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_ids",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 104265,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_maxBetAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 104268,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_minBetAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 104271,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_penaltyForCanceledBet",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 104274,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_signer",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 104278,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_asset",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)99732"
      },
      {
        "astId": 104281,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_wallet",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 104286,
        "contract": "src/FLoppyGamble.sol:FloppyGamble",
        "label": "_____gap",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)99732": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)108143": {
        "encoding": "inplace",
        "label": "enum IFloppyGamble.BetStatus",
        "numberOfBytes": "1"
      },
      "t_enum(BetTier)108138": {
        "encoding": "inplace",
        "label": "enum IFloppyGamble.BetTier",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(BetTier)108138,t_struct(PointsRange)108171_storage)": {
        "encoding": "mapping",
        "key": "t_enum(BetTier)108138",
        "label": "mapping(enum IFloppyGamble.BetTier => struct IFloppyGamble.PointsRange)",
        "numberOfBytes": "32",
        "value": "t_struct(PointsRange)108171_storage"
      },
      "t_mapping(t_enum(BetTier)108138,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(BetTier)108138",
        "label": "mapping(enum IFloppyGamble.BetTier => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(BetInfo)108166_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IFloppyGamble.BetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BetInfo)108166_storage"
      },
      "t_struct(BetInfo)108166_storage": {
        "encoding": "inplace",
        "label": "struct IFloppyGamble.BetInfo",
        "numberOfBytes": "224",
        "members": [
          {
            "astId": 108145,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 108147,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 108150,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "tier",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(BetTier)108138"
          },
          {
            "astId": 108153,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "status",
            "offset": 21,
            "slot": "1",
            "type": "t_enum(BetStatus)108143"
          },
          {
            "astId": 108155,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 108157,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "points",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 108159,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 108161,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 108163,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "win",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 108165,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "claimed",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ]
      },
      "t_struct(PointsRange)108171_storage": {
        "encoding": "inplace",
        "label": "struct IFloppyGamble.PointsRange",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 108168,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "minPoints",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 108170,
            "contract": "src/FLoppyGamble.sol:FloppyGamble",
            "label": "maxPoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "timestamp": 1731174476,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}