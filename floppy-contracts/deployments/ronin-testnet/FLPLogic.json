{
  "abi": "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unwhitelist\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"whitelist\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"whitelisted\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SpenderUnwhitelisted\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SpenderWhitelisted\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ERC20InsufficientAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSpender\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
  "absolutePath": "FLP.sol",
  "address": "0x399ca34d8AaCd931cC3fc9322b8AaA1aa52C0d17",
  "ast": "",
  "blockNumber": 30711961,
  "bytecode": "\"\"",
  "callValue": 0,
  "chainId": 2021,
  "constructorArgs": "0x",
  "contractName": "FLP",
  "deployedBytecode": "\"\"",
  "deployer": "0xEf46169CD1e954aB10D5e4C280737D9b92d0a936",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "\"{\\\"compiler\\\":{\\\"version\\\":\\\"0.8.25+commit.b61c2a91\\\"},\\\"language\\\":\\\"Solidity\\\",\\\"output\\\":{\\\"abi\\\":[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"allowance\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"needed\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ERC20InsufficientAllowance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"balance\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"needed\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ERC20InsufficientBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"approver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidApprover\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidReceiver\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidSender\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidSpender\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidInitialization\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotInitializing\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnableInvalidOwner\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnableUnauthorizedAccount\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Approval\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SpenderUnwhitelisted\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SpenderWhitelisted\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"allowance\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"approve\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transfer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferFrom\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"unwhitelist\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"whitelist\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"whitelisted\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}],\\\"devdoc\\\":{\\\"errors\\\":{\\\"ERC20InsufficientAllowance(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `spender`\\\\u2019s `allowance`. Used in transfers.\\\",\\\"params\\\":{\\\"allowance\\\":\\\"Amount of tokens a `spender` is allowed to operate with.\\\",\\\"needed\\\":\\\"Minimum amount required to perform a transfer.\\\",\\\"spender\\\":\\\"Address that may be allowed to operate on tokens without being their owner.\\\"}}],\\\"ERC20InsufficientBalance(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\",\\\"params\\\":{\\\"balance\\\":\\\"Current balance for the interacting account.\\\",\\\"needed\\\":\\\"Minimum amount required to perform a transfer.\\\",\\\"sender\\\":\\\"Address whose tokens are being transferred.\\\"}}],\\\"ERC20InvalidApprover(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\",\\\"params\\\":{\\\"approver\\\":\\\"Address initiating an approval operation.\\\"}}],\\\"ERC20InvalidReceiver(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the token `receiver`. Used in transfers.\\\",\\\"params\\\":{\\\"receiver\\\":\\\"Address to which tokens are being transferred.\\\"}}],\\\"ERC20InvalidSender(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the token `sender`. Used in transfers.\\\",\\\"params\\\":{\\\"sender\\\":\\\"Address whose tokens are being transferred.\\\"}}],\\\"ERC20InvalidSpender(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `spender` to be approved. Used in approvals.\\\",\\\"params\\\":{\\\"spender\\\":\\\"Address that may be allowed to operate on tokens without being their owner.\\\"}}],\\\"InvalidInitialization()\\\":[{\\\"details\\\":\\\"The contract is already initialized.\\\"}],\\\"NotInitializing()\\\":[{\\\"details\\\":\\\"The contract is not initializing.\\\"}],\\\"OwnableInvalidOwner(address)\\\":[{\\\"details\\\":\\\"The owner is not a valid owner account. (eg. `address(0)`)\\\"}],\\\"OwnableUnauthorizedAccount(address)\\\":[{\\\"details\\\":\\\"The caller account is not authorized to perform an operation.\\\"}]},\\\"events\\\":{\\\"Approval(address,address,uint256)\\\":{\\\"details\\\":\\\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\\\"},\\\"Initialized(uint64)\\\":{\\\"details\\\":\\\"Triggered when the contract has been initialized or reinitialized.\\\"},\\\"Transfer(address,address,uint256)\\\":{\\\"details\\\":\\\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\\\"}},\\\"kind\\\":\\\"dev\\\",\\\"methods\\\":{\\\"approve(address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\\\"},\\\"balanceOf(address)\\\":{\\\"details\\\":\\\"See {IERC20-balanceOf}.\\\"},\\\"decimals()\\\":{\\\"details\\\":\\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\\"},\\\"name()\\\":{\\\"details\\\":\\\"Returns the name of the token.\\\"},\\\"owner()\\\":{\\\"details\\\":\\\"Returns the address of the current owner.\\\"},\\\"renounceOwnership()\\\":{\\\"details\\\":\\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\\\"},\\\"symbol()\\\":{\\\"details\\\":\\\"Returns the symbol of the token, usually a shorter version of the name.\\\"},\\\"totalSupply()\\\":{\\\"details\\\":\\\"See {IERC20-totalSupply}.\\\"},\\\"transfer(address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\\\"},\\\"transferFrom(address,address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\\\"},\\\"transferOwnership(address)\\\":{\\\"details\\\":\\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\\"}},\\\"version\\\":1},\\\"userdoc\\\":{\\\"kind\\\":\\\"user\\\",\\\"methods\\\":{},\\\"version\\\":1}},\\\"settings\\\":{\\\"compilationTarget\\\":{\\\"src/token/FLP.sol\\\":\\\"FLP\\\"},\\\"evmVersion\\\":\\\"istanbul\\\",\\\"libraries\\\":{},\\\"metadata\\\":{\\\"bytecodeHash\\\":\\\"ipfs\\\",\\\"useLiteralContent\\\":true},\\\"optimizer\\\":{\\\"enabled\\\":true,\\\"runs\\\":1000},\\\"remappings\\\":[\\\":@contracts/=src/\\\",\\\":@fdk-0.3.0-beta/=dependencies/@fdk-0.3.0-beta/\\\",\\\":@fdk/=dependencies/@fdk-0.3.0-beta/script/\\\",\\\":@interfaces/=src/interfaces/\\\",\\\":@openzeppelin-contracts-5.0.2/=dependencies/@openzeppelin-contracts-5.0.2/\\\",\\\":@openzeppelin-contracts-upgradeable-5.0.2/=dependencies/@openzeppelin-contracts-upgradeable-5.0.2/\\\",\\\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\\\",\\\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\\\",\\\":@prb-test-0.6.4/=dependencies/@prb-test-0.6.4/\\\",\\\":@script/=script/\\\",\\\":@solady/=dependencies/@fdk-0.3.0-beta/dependencies/solady-0.0.206/src/\\\",\\\":@uniswap-core/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-periphery/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":@uniswap-v2-core-1.0.1/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-v2-periphery-1.1.0-beta.0/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\\\",\\\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\\\",\\\":forge-std/=lib/forge-std/src/\\\",\\\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\\\",\\\":openzeppelin-contracts/=lib/openzeppelin-contracts/\\\"]},\\\"sources\\\":{\\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\\\n *\\\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\\\n * reused. This mechanism prevents re-execution of each \\\\\\\"step\\\\\\\" but allows the creation of new initialization steps in\\\\n * case an upgrade adds a module that needs to be initialized.\\\\n *\\\\n * For example:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```solidity\\\\n * contract MyToken is ERC20Upgradeable {\\\\n *     function initialize() initializer public {\\\\n *         __ERC20_init(\\\\\\\"MyToken\\\\\\\", \\\\\\\"MTK\\\\\\\");\\\\n *     }\\\\n * }\\\\n *\\\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\\\n *     function initializeV2() reinitializer(2) public {\\\\n *         __ERC20Permit_init(\\\\\\\"MyToken\\\\\\\");\\\\n *     }\\\\n * }\\\\n * ```\\\\n *\\\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\\\n *\\\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\\\n *\\\\n * [CAUTION]\\\\n * ====\\\\n * Avoid leaving a contract uninitialized.\\\\n *\\\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```\\\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\\\n * constructor() {\\\\n *     _disableInitializers();\\\\n * }\\\\n * ```\\\\n * ====\\\\n */\\\\nabstract contract Initializable {\\\\n    /**\\\\n     * @dev Storage of the initializable contract.\\\\n     *\\\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\\\n     * when using with upgradeable contracts.\\\\n     *\\\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\\\n     */\\\\n    struct InitializableStorage {\\\\n        /**\\\\n         * @dev Indicates that the contract has been initialized.\\\\n         */\\\\n        uint64 _initialized;\\\\n        /**\\\\n         * @dev Indicates that the contract is in the process of being initialized.\\\\n         */\\\\n        bool _initializing;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.Initializable\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\\\n\\\\n    /**\\\\n     * @dev The contract is already initialized.\\\\n     */\\\\n    error InvalidInitialization();\\\\n\\\\n    /**\\\\n     * @dev The contract is not initializing.\\\\n     */\\\\n    error NotInitializing();\\\\n\\\\n    /**\\\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\\\n     */\\\\n    event Initialized(uint64 version);\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\\\n     *\\\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\\\n     * production.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier initializer() {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        // Cache values to avoid duplicated sloads\\\\n        bool isTopLevelCall = !$._initializing;\\\\n        uint64 initialized = $._initialized;\\\\n\\\\n        // Allowed calls:\\\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\\\n        //                 initialized\\\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\\\n        //                 current contract is just being deployed\\\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\\\n\\\\n        if (!initialSetup && !construction) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = 1;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = true;\\\\n        }\\\\n        _;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = false;\\\\n            emit Initialized(1);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\\\n     * used to initialize parent contracts.\\\\n     *\\\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\\\n     * are added through upgrades and that require initialization.\\\\n     *\\\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\\\n     *\\\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\\\n     * a contract, executing them in the right order is up to the developer or operator.\\\\n     *\\\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier reinitializer(uint64 version) {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing || $._initialized >= version) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = version;\\\\n        $._initializing = true;\\\\n        _;\\\\n        $._initializing = false;\\\\n        emit Initialized(version);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\\\n     */\\\\n    modifier onlyInitializing() {\\\\n        _checkInitializing();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\\\n     */\\\\n    function _checkInitializing() internal view virtual {\\\\n        if (!_isInitializing()) {\\\\n            revert NotInitializing();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\\\n     * through proxies.\\\\n     *\\\\n     * Emits an {Initialized} event the first time it is successfully executed.\\\\n     */\\\\n    function _disableInitializers() internal virtual {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        if ($._initialized != type(uint64).max) {\\\\n            $._initialized = type(uint64).max;\\\\n            emit Initialized(type(uint64).max);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\\\n     */\\\\n    function _getInitializedVersion() internal view returns (uint64) {\\\\n        return _getInitializableStorage()._initialized;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\\\n     */\\\\n    function _isInitializing() internal view returns (bool) {\\\\n        return _getInitializableStorage()._initializing;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns a pointer to the storage namespace.\\\\n     */\\\\n    // solhint-disable-next-line var-name-mixedcase\\\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\\\n        assembly {\\\\n            $.slot := INITIALIZABLE_STORAGE\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\\";\\\\nimport {IERC20Metadata} from \\\\\\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\\\\\";\\\\nimport {ContextUpgradeable} from \\\\\\\"../../utils/ContextUpgradeable.sol\\\\\\\";\\\\nimport {IERC20Errors} from \\\\\\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\\\\\";\\\\nimport {Initializable} from \\\\\\\"../../proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * The default value of {decimals} is 18. To change this, you should override\\\\n * this function so it returns a different value.\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn't required by the specification.\\\\n */\\\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\\\n    struct ERC20Storage {\\\\n        mapping(address account => uint256) _balances;\\\\n\\\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\\\n\\\\n        uint256 _totalSupply;\\\\n\\\\n        string _name;\\\\n        string _symbol;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.ERC20\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\\\n\\\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\\\n        assembly {\\\\n            $.slot := ERC20StorageLocation\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\\\n        __ERC20_init_unchained(name_, symbol_);\\\\n    }\\\\n\\\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        $._name = name_;\\\\n        $._symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual returns (string memory) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual returns (string memory) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the default value returned by this function, unless\\\\n     * it's overridden.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `value`.\\\\n     */\\\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\\\n        address owner = _msgSender();\\\\n        _transfer(owner, to, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\\\n        address owner = _msgSender();\\\\n        _approve(owner, spender, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * NOTE: Does not update the allowance if the current allowance\\\\n     * is the maximum `uint256`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` and `to` cannot be the zero address.\\\\n     * - `from` must have a balance of at least `value`.\\\\n     * - the caller must have allowance for ``from``'s tokens of at least\\\\n     * `value`.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\\\n        address spender = _msgSender();\\\\n        _spendAllowance(from, spender, value);\\\\n        _transfer(from, to, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\\\n     */\\\\n    function _transfer(address from, address to, uint256 value) internal {\\\\n        if (from == address(0)) {\\\\n            revert ERC20InvalidSender(address(0));\\\\n        }\\\\n        if (to == address(0)) {\\\\n            revert ERC20InvalidReceiver(address(0));\\\\n        }\\\\n        _update(from, to, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\\\n     * this function.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _update(address from, address to, uint256 value) internal virtual {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        if (from == address(0)) {\\\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\\\n            $._totalSupply += value;\\\\n        } else {\\\\n            uint256 fromBalance = $._balances[from];\\\\n            if (fromBalance < value) {\\\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\\\n            }\\\\n            unchecked {\\\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\\\n                $._balances[from] = fromBalance - value;\\\\n            }\\\\n        }\\\\n\\\\n        if (to == address(0)) {\\\\n            unchecked {\\\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\\\n                $._totalSupply -= value;\\\\n            }\\\\n        } else {\\\\n            unchecked {\\\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\\\n                $._balances[to] += value;\\\\n            }\\\\n        }\\\\n\\\\n        emit Transfer(from, to, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\\\n     * Relies on the `_update` mechanism\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\\\n     */\\\\n    function _mint(address account, uint256 value) internal {\\\\n        if (account == address(0)) {\\\\n            revert ERC20InvalidReceiver(address(0));\\\\n        }\\\\n        _update(address(0), account, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\\\n     * Relies on the `_update` mechanism.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\\\n     */\\\\n    function _burn(address account, uint256 value) internal {\\\\n        if (account == address(0)) {\\\\n            revert ERC20InvalidSender(address(0));\\\\n        }\\\\n        _update(account, address(0), value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     *\\\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 value) internal {\\\\n        _approve(owner, spender, value, true);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\\\n     *\\\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\\\n     * `Approval` event during `transferFrom` operations.\\\\n     *\\\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\\\n     * true using the following override:\\\\n     * ```\\\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\\\n     *     super._approve(owner, spender, value, true);\\\\n     * }\\\\n     * ```\\\\n     *\\\\n     * Requirements are the same as {_approve}.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        if (owner == address(0)) {\\\\n            revert ERC20InvalidApprover(address(0));\\\\n        }\\\\n        if (spender == address(0)) {\\\\n            revert ERC20InvalidSpender(address(0));\\\\n        }\\\\n        $._allowances[owner][spender] = value;\\\\n        if (emitEvent) {\\\\n            emit Approval(owner, spender, value);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\\\n     *\\\\n     * Does not update the allowance value in case of infinite allowance.\\\\n     * Revert if not enough allowance is available.\\\\n     *\\\\n     * Does not emit an {Approval} event.\\\\n     */\\\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\\\n        uint256 currentAllowance = allowance(owner, spender);\\\\n        if (currentAllowance != type(uint256).max) {\\\\n            if (currentAllowance < value) {\\\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\\\n            }\\\\n            unchecked {\\\\n                _approve(owner, spender, currentAllowance - value, false);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\nimport {Initializable} from \\\\\\\"../proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract ContextUpgradeable is Initializable {\\\\n    function __Context_init() internal onlyInitializing {\\\\n    }\\\\n\\\\n    function __Context_init_unchained() internal onlyInitializing {\\\\n    }\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Context} from \\\\\\\"../utils/Context.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * The initial owner is set to the address provided by the deployer. This can\\\\n * later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    /**\\\\n     * @dev The caller account is not authorized to perform an operation.\\\\n     */\\\\n    error OwnableUnauthorizedAccount(address account);\\\\n\\\\n    /**\\\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\\\n     */\\\\n    error OwnableInvalidOwner(address owner);\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\\\n     */\\\\n    constructor(address initialOwner) {\\\\n        if (initialOwner == address(0)) {\\\\n            revert OwnableInvalidOwner(address(0));\\\\n        }\\\\n        _transferOwnership(initialOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        _checkOwner();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the sender is not the owner.\\\\n     */\\\\n    function _checkOwner() internal view virtual {\\\\n        if (owner() != _msgSender()) {\\\\n            revert OwnableUnauthorizedAccount(_msgSender());\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby disabling any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        if (newOwner == address(0)) {\\\\n            revert OwnableInvalidOwner(address(0));\\\\n        }\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard ERC20 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\\\n */\\\\ninterface IERC20Errors {\\\\n    /**\\\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param balance Current balance for the interacting account.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     */\\\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC20InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC20InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `spender`\\\\u2019s `allowance`. Used in transfers.\\\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     */\\\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC20InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC20InvalidSpender(address spender);\\\\n}\\\\n\\\\n/**\\\\n * @dev Standard ERC721 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\\\n */\\\\ninterface IERC721Errors {\\\\n    /**\\\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\\\n     * Used in balance queries.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC721InvalidOwner(address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC721NonexistentToken(uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param tokenId Identifier number of a token.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC721InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC721InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator`\\\\u2019s approval. Used in transfers.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC721InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC721InvalidOperator(address operator);\\\\n}\\\\n\\\\n/**\\\\n * @dev Standard ERC1155 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\\\n */\\\\ninterface IERC1155Errors {\\\\n    /**\\\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param balance Current balance for the interacting account.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC1155InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC1155InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator`\\\\u2019s approval. Used in transfers.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC1155InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC1155InvalidOperator(address operator);\\\\n\\\\n    /**\\\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\\\n     * Used in batch transfers.\\\\n     * @param idsLength Length of the array of token identifiers\\\\n     * @param valuesLength Length of the array of token amounts\\\\n     */\\\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address to, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\\\n     * caller's tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender's allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\\\n     * allowance mechanism. `value` is then deducted from the caller's\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"../IERC20.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/common/ERC20SpenderWhitelist.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport { SpenderWhitelist } from \\\\\\\"./SpenderWhitelist.sol\\\\\\\";\\\\nimport { ERC20Upgradeable } from \\\\\\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\\\\\";\\\\n\\\\ncontract ERC20SpenderWhitelist is SpenderWhitelist, ERC20Upgradeable {\\\\n  function allowance(address _owner, address _spender) public view virtual override returns (uint256 _value) {\\\\n    if (whitelisted[_spender]) {\\\\n      return type(uint256).max;\\\\n    }\\\\n\\\\n    return super.allowance(_owner, _spender);\\\\n  }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x5f1dd823bd775b602967cb00322e80f9adcbcac91e2e059067a98201bd8bfada\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/common/SpenderWhitelist.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\ncontract SpenderWhitelist {\\\\n  event SpenderWhitelisted(address indexed _spender);\\\\n  event SpenderUnwhitelisted(address indexed _spender);\\\\n\\\\n  mapping(address => bool) public whitelisted;\\\\n\\\\n  function _whitelist(address _spender) internal {\\\\n    whitelisted[_spender] = true;\\\\n    emit SpenderWhitelisted(_spender);\\\\n  }\\\\n\\\\n  function _unwhitelist(address _spender) internal {\\\\n    delete whitelisted[_spender];\\\\n    emit SpenderUnwhitelisted(_spender);\\\\n  }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xe1e21e02b5cae5fa46d7ee1d6b00e704ca101fa6af766842dec6cafa644f49be\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/token/FLP.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport { ERC20SpenderWhitelist } from \\\\\\\"src/common/ERC20SpenderWhitelist.sol\\\\\\\";\\\\nimport { Ownable } from \\\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\\";\\\\nimport { ContextUpgradeable } from \\\\\\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\\\\\";\\\\nimport { Context } from \\\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\\";\\\\n\\\\ncontract FLP is ERC20SpenderWhitelist, Ownable {\\\\n  constructor() Ownable(_msgSender()) {\\\\n    _disableInitializers();\\\\n  }\\\\n\\\\n  function initialize(address owner) external initializer {\\\\n    __ERC20_init(\\\\\\\"Floppy\\\\\\\", \\\\\\\"FLP\\\\\\\");\\\\n    _mint(owner, 100 * 1e9 * 1e18);\\\\n    _transferOwnership(owner);\\\\n  }\\\\n\\\\n  function whitelist(address _spender) external onlyOwner {\\\\n    _whitelist(_spender);\\\\n  }\\\\n\\\\n  function unwhitelist(address _spender) external onlyOwner {\\\\n    _unwhitelist(_spender);\\\\n  }\\\\n\\\\n  function _msgSender() internal view override(Context, ContextUpgradeable) returns (address) {\\\\n    return super._msgSender();\\\\n  }\\\\n\\\\n  function _msgData() internal view override(Context, ContextUpgradeable) returns (bytes calldata) {\\\\n    return super._msgData();\\\\n  }\\\\n\\\\n  function _contextSuffixLength() internal view override(Context, ContextUpgradeable) returns (uint256) {\\\\n    return super._contextSuffixLength();\\\\n  }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x470d66458397dee64bea649d103c81bc53b5434cd3c5f1e92d4e56ab73c6a279\\\",\\\"license\\\":\\\"MIT\\\"}},\\\"version\\\":1}\"",
  "nonce": 42,
  "storageLayout": {
    "storage": [
      {
        "astId": 65614,
        "contract": "src/token/FLP.sol:FLP",
        "label": "whitelisted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 59120,
        "contract": "src/token/FLP.sol:FLP",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  },
  "timestamp": 1725877643,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}