{
  "abi": "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DOMAIN_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_PERCENTAGE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PERMIT_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"asset\",\"inputs\":[],\"outputs\":[{\"name\":\"assetTokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"convertToAssets\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"assetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"convertToShares\",\"inputs\":[{\"name\":\"assetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleMember\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleMemberCount\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getUserNonce\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contract IERC20\"},{\"name\":\"taxPercent\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"maxRedeem\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"maxWithdraw\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permitRewardWithdraw\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"previewDeposit\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewMint\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewRedeem\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewWithdraw\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAsset\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\",\"internalType\":\"contract IERC20\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSigner\",\"inputs\":[{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalAssets\",\"inputs\":[],\"outputs\":[{\"name\":\"totalManagedAssets\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AssetUpdated\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Deposit\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SignerUpdated\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UserNonceIncreased\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newNonce\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WithdrawReward\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSpender\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrInvalidNonce\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExceededMaxRedeem\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ExceededMaxWithdraw\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAmount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAssetAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SignatureExprired\",\"inputs\":[]}]",
  "absolutePath": "FloppyVault.sol",
  "address": "0x2DB40d263A74d677959F00d6D4b579d1487F95f6",
  "ast": "",
  "blockNumber": 30711961,
  "bytecode": "\"\"",
  "callValue": 0,
  "chainId": 2021,
  "constructorArgs": "0x",
  "contractName": "FloppyVault",
  "deployedBytecode": "\"0x608060405234801561001057600080fd5b50600436106102f45760003560e01c80636c19e78311610191578063b3d7f6b9116100e3578063ce96cb7711610097578063d905777e11610071578063d905777e14610692578063dd62ed3e146106a5578063ef8b30f71461063357600080fd5b8063ce96cb7714610659578063d0d552dd1461066c578063d547741f1461067f57600080fd5b8063ba087652116100c8578063ba08765214610620578063c6e6f59214610633578063ca15c8731461064657600080fd5b8063b3d7f6b91461034c578063b460af941461060d57600080fd5b80639010d07c1161014557806395d89b411161011f57806395d89b41146105ea578063a217fddf146105f2578063a9059cbb146105fa57600080fd5b80639010d07c1461058b57806391d148541461059e57806394bf804d146105d757600080fd5b806370a082311161017657806370a082311461052857806376f0c19a146105705780638456cb591461058357600080fd5b80636c19e783146105025780636e553f651461051557600080fd5b80632f2ff15d1161024a57806338d52e0f116101fe5780634cdad506116101d85780634cdad506146104bb5780635c975abb146104ce5780636834e3a8146104d957600080fd5b806338d52e0f146104845780633f4ba83a146104a95780634c255c97146104b157600080fd5b8063313ce5671161022f578063313ce567146104595780633644e5151461046857806336568abe1461047157600080fd5b80632f2ff15d1461041f57806330adf81f1461043257600080fd5b80630a28a477116102ac57806320606b701161028657806320606b70146103c157806323b872dd146103e8578063248a9ca3146103fb57600080fd5b80630a28a477146103725780631794bb3c1461038557806318160ddd1461039a57600080fd5b806306fdde03116102dd57806306fdde031461033757806307a2d13a1461034c578063095ea7b31461035f57600080fd5b806301e1d114146102f957806301ffc9a714610314575b600080fd5b6103016106fd565b6040519081526020015b60405180910390f35b610327610322366004612472565b610788565b604051901515815260200161030b565b61033f6107cc565b60405161030b91906124c0565b61030161035a3660046124f3565b6108a1565b61032761036d366004612521565b6108ac565b6103016103803660046124f3565b6108c4565b61039861039336600461254d565b6108eb565b005b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610301565b6103017f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103276103f636600461254d565b610c14565b6103016104093660046124f3565b6000908152600160208190526040909120015490565b61039861042d36600461258e565b610c38565b6103017fb365888e64ab7bc61fb16d9b1949494d2eb12e26fcdf26e14b500893673a5a5981565b6040516012815260200161030b565b61030160355481565b61039861047f36600461258e565b610c64565b6037546001600160a01b03165b6040516001600160a01b03909116815260200161030b565b610398610cb5565b610301620186a081565b6103016104c93660046124f3565b610ccb565b60005460ff16610327565b6103016104e73660046125be565b6001600160a01b031660009081526036602052604090205490565b6103986105103660046125be565b610cf8565b61030161052336600461258e565b610d5b565b6103016105363660046125be565b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00602052604090205490565b61039861057e3660046125f1565b610da5565b610398610ecb565b6104916105993660046126d2565b610ede565b6103276105ac36600461258e565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103016105e536600461258e565b610ef6565b61033f610f39565b610301600081565b610327610608366004612521565b610f8a565b61030161061b3660046126f4565b610f98565b61030161062e3660046126f4565b61104a565b6103016106413660046124f3565b6110ee565b6103016106543660046124f3565b6110f9565b6103016106673660046125be565b611110565b61039861067a3660046125be565b611151565b61039861068d36600461258e565b6111b4565b6103016106a03660046125be565b6111da565b6103016106b3366004612736565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b6037546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190612764565b905090565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806107c657506107c682611217565b92915050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060917f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace009161081d9061277d565b80601f01602080910402602001604051908101604052809291908181526020018280546108499061277d565b80156108965780601f1061086b57610100808354040283529160200191610896565b820191906000526020600020905b81548152906001019060200180831161087957829003601f168201915b505050505091505090565b60006107c68261127e565b6000336108ba8185856112df565b5060019392505050565b6000806108d0836112ec565b90506108e46108df82856127cd565b611300565b9392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156109365750825b905060008267ffffffffffffffff1660011480156109535750303b155b905081158015610961575080155b15610998576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109cc57845468ff00000000000000001916680100000000000000001785555b6001600160a01b038716610a0c576040517f3334921400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a806040518060400160405280600c81526020017f466c6f707079205661756c7400000000000000000000000000000000000000008152506040518060400160405280600381526020017f465654000000000000000000000000000000000000000000000000000000000081525061134d565b610a8b600089611363565b50610b7d604080518082018252600b81527f466c6f7070795661756c7400000000000000000000000000000000000000000060209182015281518083018352600181527f31000000000000000000000000000000000000000000000000000000000000009082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527fdf15ca589dcc9ae927fc54592b03d1353faf5118bb550c6b9571e5439ffaaf3d918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69181019190915246606082015230608082015260a09020603555565b603780546001600160a01b03808a1673ffffffffffffffffffffffffffffffffffffffff1992831617909255603888905560398054928b16929091169190911790558315610c0a57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600033610c22858285611398565b610c2d858585611448565b506001949350505050565b60008281526001602081905260409091200154610c54816114a7565b610c5e8383611363565b50505050565b6001600160a01b0381163314610ca6576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cb082826114b1565b505050565b6000610cc0816114a7565b610cc86114de565b50565b600080610cd78361127e565b90506000610ce4826112ec565b9050610cf081836127e0565b949350505050565b6000610d03816114a7565b6039805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a25050565b6000610d65611530565b8280600003610d875760405163162908e360e11b815260040160405180910390fd5b610d90846110ee565b9150610d9e3384868561156f565b5092915050565b610dad611530565b8380600003610dcf5760405163162908e360e11b815260040160405180910390fd5b42831015610e09576040517f0205f45a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152603660205260409020548414610e51576040517f2f0fd70500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e5f3387868887876115ed565b610e6833611701565b50603754610e80906001600160a01b03168787611776565b856001600160a01b03167fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e506686604051610ebb91815260200190565b60405180910390a2505050505050565b6000610ed6816114a7565b610cc86117ea565b60008281526002602052604081206108e49083611827565b6000610f00611530565b8280600003610f225760405163162908e360e11b815260040160405180910390fd5b610f2b846108a1565b9150610d9e3384848761156f565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060917f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace009161081d9061277d565b6000336108ba818585611448565b6000610fa2611530565b8380600003610fc45760405163162908e360e11b815260040160405180910390fd5b6000610fcf84611110565b905080861115611029576040517fd929e4430000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260248101879052604481018290526064015b60405180910390fd5b611032866108c4565b92506110413385878987611833565b50509392505050565b6000611054611530565b83806000036110765760405163162908e360e11b815260040160405180910390fd5b6000611081846111da565b9050808611156110d6576040517fb8b8b59c0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024810187905260448101829052606401611020565b6110df86610ccb565b9250611041338587868a611833565b60006107c682611300565b60008181526002602052604081206107c6906118df565b6001600160a01b03811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260408120546107c690610ccb565b600061115c816114a7565b6037805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a90600090a25050565b600082815260016020819052604090912001546111d0816114a7565b610c5e83836114b1565b6001600160a01b03811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260408120546107c6565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806107c657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146107c6565b600061128c6003600a6128d7565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02546112b891906127cd565b6112c06106fd565b6112cb9060016127cd565b6112d590846128e6565b6107c691906128fd565b610cb083838360016118e9565b6000620186a0603854836112d591906128e6565b600061130a6106fd565b6113159060016127cd565b6113216003600a6128d7565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02546112cb91906127cd565b611355611a15565b61135f8282611a7c565b5050565b6000806113708484611adf565b905080156108e45760008481526002602052604090206113909084611b72565b509392505050565b6001600160a01b0383811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160209081526040808320938616835292905220546000198114610c5e5781811015611439576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401611020565b610c5e848484840360006118e9565b6001600160a01b03831661147257604051634b637e8f60e11b815260006004820152602401611020565b6001600160a01b03821661149c5760405163ec442f0560e01b815260006004820152602401611020565b610cb0838383611b87565b610cc88133611ce2565b6000806114be8484611d50565b905080156108e45760008481526002602052604090206113909084611dd7565b6114e6611dec565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff161561156d576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b603754611587906001600160a01b0316853085611e28565b6115918382611e61565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516115df929190918252602082015260400190565b60405180910390a350505050565b603554604080517fb365888e64ab7bc61fb16d9b1949494d2eb12e26fcdf26e14b500893673a5a5960208201526001600160a01b03808a169282019290925290871660608201526080810186905260a0810185905260c081018490526000916116ae916116a8919060e001604051602081830303815290604052805190602001206040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b83611e97565b6039549091506001600160a01b038083169116146116f8576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b6001600160a01b0381166000908152603660205260408120805482906117269061291f565b9190508190559050816001600160a01b03167f3f9c13c0623ea776c64ccf0f57ad2e491da85d6c6bc34bf961e6a8ab8e5188d28260405161176991815260200190565b60405180910390a2919050565b6040516001600160a01b03838116602483015260448201839052610cb091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ec1565b6117f2611530565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115133390565b60006108e48383611f3d565b836001600160a01b0316856001600160a01b03161461185757611857848683611398565b6118618482611f67565b603754611878906001600160a01b03168484611776565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db85856040516118d0929190918252602082015260400190565b60405180910390a45050505050565b60006107c6825490565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006001600160a01b03851661194d576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401611020565b6001600160a01b038416611990576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401611020565b6001600160a01b03808616600090815260018301602090815260408083209388168352929052208390558115611a0e57836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92585604051611a0591815260200190565b60405180910390a35b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff1661156d576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a84611a15565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03611ad08482612988565b5060048101610c5e8382612988565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16611b6a5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016107c6565b5060006107c6565b60006108e4836001600160a01b038416611f9d565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006001600160a01b038416611bd55781816002016000828254611bca91906127cd565b90915550611c609050565b6001600160a01b03841660009081526020829052604090205482811015611c41576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03861660048201526024810182905260448101849052606401611020565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b038316611c7e576002810180548390039055611c9d565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115df91815260200190565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661135f576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401611020565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff1615611b6a5760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016107c6565b60006108e4836001600160a01b038416611fe4565b60005460ff1661156d576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610c5e9186918216906323b872dd906084016117a3565b6001600160a01b038216611e8b5760405163ec442f0560e01b815260006004820152602401611020565b61135f60008383611b87565b600080600080611ea786866120d7565b925092509250611eb78282612124565b5090949350505050565b6000611ed66001600160a01b03841683612228565b90508051600014158015611efb575080806020019051810190611ef99190612a48565b155b15610cb0576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401611020565b6000826000018281548110611f5457611f54612a6a565b9060005260206000200154905092915050565b6001600160a01b038216611f9157604051634b637e8f60e11b815260006004820152602401611020565b61135f82600083611b87565b6000818152600183016020526040812054611b6a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107c6565b600081815260018301602052604081205480156120cd5760006120086001836127e0565b855490915060009061201c906001906127e0565b905080821461208157600086600001828154811061203c5761203c612a6a565b906000526020600020015490508087600001848154811061205f5761205f612a6a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061209257612092612a80565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107c6565b60009150506107c6565b600080600083516041036121115760208401516040850151606086015160001a61210388828585612236565b95509550955050505061211d565b50508151600091506002905b9250925092565b600082600381111561213857612138612a96565b03612141575050565b600182600381111561215557612155612a96565b0361218c576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028260038111156121a0576121a0612a96565b036121da576040517ffce698f700000000000000000000000000000000000000000000000000000000815260048101829052602401611020565b60038260038111156121ee576121ee612a96565b0361135f576040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260048101829052602401611020565b60606108e483836000612305565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561227157506000915060039050826122fb565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156122c5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122f1575060009250600191508290506122fb565b9250600091508190505b9450945094915050565b606081471015612343576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401611020565b600080856001600160a01b0316848660405161235f9190612aac565b60006040518083038185875af1925050503d806000811461239c576040519150601f19603f3d011682016040523d82523d6000602084013e6123a1565b606091505b50915091506123b18683836123bb565b9695505050505050565b6060826123d0576123cb82612430565b6108e4565b81511580156123e757506001600160a01b0384163b155b15612429576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611020565b50806108e4565b8051156124405780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561248457600080fd5b81356001600160e01b0319811681146108e457600080fd5b60005b838110156124b757818101518382015260200161249f565b50506000910152565b60208152600082518060208401526124df81604085016020870161249c565b601f01601f19169190910160400192915050565b60006020828403121561250557600080fd5b5035919050565b6001600160a01b0381168114610cc857600080fd5b6000806040838503121561253457600080fd5b823561253f8161250c565b946020939093013593505050565b60008060006060848603121561256257600080fd5b833561256d8161250c565b9250602084013561257d8161250c565b929592945050506040919091013590565b600080604083850312156125a157600080fd5b8235915060208301356125b38161250c565b809150509250929050565b6000602082840312156125d057600080fd5b81356108e48161250c565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561260957600080fd5b85356126148161250c565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff8082111561264657600080fd5b818801915088601f83011261265a57600080fd5b81358181111561266c5761266c6125db565b604051601f8201601f19908116603f01168101908382118183101715612694576126946125db565b816040528281528b60208487010111156126ad57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b600080604083850312156126e557600080fd5b50508035926020909101359150565b60008060006060848603121561270957600080fd5b83359250602084013561271b8161250c565b9150604084013561272b8161250c565b809150509250925092565b6000806040838503121561274957600080fd5b82356127548161250c565b915060208301356125b38161250c565b60006020828403121561277657600080fd5b5051919050565b600181811c9082168061279157607f821691505b6020821081036127b157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107c6576107c66127b7565b818103818111156107c6576107c66127b7565b600181815b8085111561282e578160001904821115612814576128146127b7565b8085161561282157918102915b93841c93908002906127f8565b509250929050565b600082612845575060016107c6565b81612852575060006107c6565b816001811461286857600281146128725761288e565b60019150506107c6565b60ff841115612883576128836127b7565b50506001821b6107c6565b5060208310610133831016604e8410600b84101617156128b1575081810a6107c6565b6128bb83836127f3565b80600019048211156128cf576128cf6127b7565b029392505050565b60006108e460ff841683612836565b80820281158282048414176107c6576107c66127b7565b60008261291a57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201612931576129316127b7565b5060010190565b601f821115610cb0576000816000526020600020601f850160051c810160208610156129615750805b601f850160051c820191505b818110156129805782815560010161296d565b505050505050565b815167ffffffffffffffff8111156129a2576129a26125db565b6129b6816129b0845461277d565b84612938565b602080601f8311600181146129eb57600084156129d35750858301515b600019600386901b1c1916600185901b178555612980565b600085815260208120601f198616915b82811015612a1a578886015182559484019460019091019084016129fb565b5085821015612a385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612a5a57600080fd5b815180151581146108e457600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60008251612abe81846020870161249c565b919091019291505056fea2646970667358221220fc2e407585a565a584a69d92e32761d439bf585394f9936775268a59e71c4c0b64736f6c63430008190033\"",
  "deployer": "0xEf46169CD1e954aB10D5e4C280737D9b92d0a936",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "Return token address managed by this vault."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "Return the ideal amount of tokens the Vault would exchange for the amount of shares."
      },
      "convertToShares(uint256)": {
        "details": "Return the ideal amount of shares the Vault would exchange for the amount of tokens recieved."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "deposit(uint256,address)": {
        "details": "Deposits assets into the vault and mints shares to the receiver. This function transfers assets from the caller to the vault and mints corresponding shares to the receiver.",
        "params": {
          "receiver": "The address receiving the minted shares.",
          "tokenAmount": "The amount of tokens to deposit."
        },
        "returns": {
          "shares": "The number of shares minted to the receiver."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getUserNonce(address)": {
        "details": "Return user's nonce. Emit an {UserNonceIncreased} event."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "maxRedeem(address)": {
        "details": "Return maximum shares user can burn."
      },
      "maxWithdraw(address)": {
        "details": "Return maximum amount of tokens user can withdraw."
      },
      "mint(uint256,address)": {
        "details": "Mints a specific amount of shares to the receiver by depositing assets. This function calculates the required asset amount and transfers it from the caller to mint the specified shares.",
        "params": {
          "receiver": "The address receiving the minted shares.",
          "shares": "The number of shares to mint."
        },
        "returns": {
          "tokenAmount": "The amount of tokens deposited to mint the shares."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Pauses the Vault functionality. Requirements: - The caller must have the admin role."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "permitRewardWithdraw(address,uint256,uint256,uint256,bytes)": {
        "details": "Withdraws reward with signature of the authorized signer. This function transfers assets directly to the recipient without burning shares. It requires a valid signature from the authorized signer.",
        "params": {
          "deadline": "The timestamp after which the signature is no longer valid.",
          "nonce": "The current nonce of the recipient, used to prevent replay attacks.",
          "recipient": "The address receiving the reward.",
          "signature": "The cryptographic signature authorizing the withdrawal.",
          "tokenAmount": "The amount of tokens to withdraw as a reward."
        }
      },
      "previewDeposit(uint256)": {
        "details": "Return the actual shares would be recieved when deposit amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc."
      },
      "previewMint(uint256)": {
        "details": "Return the token amount would need to deposit in order to mint exactly amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc."
      },
      "previewRedeem(uint256)": {
        "details": "Return the actual token amount would get when burn amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc."
      },
      "previewWithdraw(uint256)": {
        "details": "Return the amount of shares need to burn in order to withdraw exactly an amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc."
      },
      "redeem(uint256,address,address)": {
        "details": "Redeems a specific amount of shares from the owner for assets. This function burns the specified amount of shares from the owner and transfers the corresponding assets to the receiver.",
        "params": {
          "owner": "The address whose shares are being redeemed.",
          "receiver": "The address receiving the assets.",
          "shares": "The number of shares to redeem."
        },
        "returns": {
          "tokenAmount": "The amount of tokens transferred to the receiver."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAsset(address)": {
        "details": "Set Vault's asset. Just admin can call this function. Emit an {AssetUpdated} event."
      },
      "setSigner(address)": {
        "details": "Set Vault signer. Just admin can call this function. Emit an {SignerUpdated} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "Return total token amout of this vault."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "unpause()": {
        "details": "Unpauses the registrar controller's functionality. Requirements: - The caller must have the admin role."
      },
      "withdraw(uint256,address,address)": {
        "details": "Withdraws assets from the vault by burning shares from the owner. This function burns shares from the owner and transfers the corresponding assets to the receiver.",
        "params": {
          "owner": "The address whose shares are being burned.",
          "receiver": "The address receiving the withdrawn assets.",
          "tokenAmount": "The amount of tokens to withdraw."
        },
        "returns": {
          "shares": "The number of shares burned from the owner."
        }
      }
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "AssetUpdated(address)": {
        "details": "Emit when the vault's asset is updated."
      },
      "Deposit(address,address,uint256,uint256)": {
        "details": "Emit when user deposit ERC20 token."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "UserNonceIncreased(address,uint256)": {
        "details": "Emit when user's nonce is increased."
      },
      "Withdraw(address,address,address,uint256,uint256)": {
        "details": "Emit when user withdraw ERC20 token."
      },
      "WithdrawReward(address,uint256)": {
        "details": "Emit when user withdraw reward."
      }
    },
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ErrInvalidNonce()": [
        {
          "details": "Revert when nonce is not increase by one."
        }
      ],
      "ExceededMaxRedeem(address,uint256,uint256)": [
        {
          "details": "Attempted to redeem more shares than the max amount for `receiver`."
        }
      ],
      "ExceededMaxWithdraw(address,uint256,uint256)": [
        {
          "details": "Attempted to withdraw more assets than the max amount for `receiver`."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidAmount()": [
        {
          "details": "Revert when deposit or mint amount is 0;"
        }
      ],
      "InvalidAssetAddress()": [
        {
          "details": "Revert when asset is address(0);"
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidSignature()": [
        {
          "details": "Revert when signature is invalid."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "SignatureExprired()": [
        {
          "details": "Revert signature expired."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "\"{\\\"compiler\\\":{\\\"version\\\":\\\"0.8.25+commit.b61c2a91\\\"},\\\"language\\\":\\\"Solidity\\\",\\\"output\\\":{\\\"abi\\\":[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"AccessControlBadConfirmation\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"neededRole\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"AccessControlUnauthorizedAccount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"target\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddressEmptyCode\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddressInsufficientBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ECDSAInvalidSignature\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"length\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ECDSAInvalidSignatureLength\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"ECDSAInvalidSignatureS\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"allowance\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"needed\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ERC20InsufficientAllowance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"balance\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"needed\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ERC20InsufficientBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"approver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidApprover\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidReceiver\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidSender\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidSpender\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"EnforcedPause\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ErrInvalidNonce\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"max\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ExceededMaxRedeem\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"assets\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"max\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ExceededMaxWithdraw\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ExpectedPause\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"FailedInnerCall\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidAmount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidAssetAddress\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidInitialization\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidSignature\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotInitializing\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SafeERC20FailedOperation\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"SignatureExprired\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Approval\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AssetUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Deposit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"Paused\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"previousAdminRole\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"newAdminRole\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"RoleAdminChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"RoleGranted\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"RoleRevoked\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SignerUpdated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"Unpaused\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"newNonce\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"UserNonceIncreased\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Withdraw\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"WithdrawReward\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DEFAULT_ADMIN_ROLE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_SEPARATOR\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MAX_PERCENTAGE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PERMIT_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"allowance\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"approve\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"asset\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"assetTokenAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"convertToAssets\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"assetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"assetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"convertToShares\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"deposit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getRoleAdmin\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getRoleMember\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getRoleMemberCount\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"getUserNonce\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"grantRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"hasRole\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"admin\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"taxPercent\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"maxRedeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"maxWithdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"mint\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"pause\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"paused\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"nonce\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"signature\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"permitRewardWithdraw\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewDeposit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewMint\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewRedeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewWithdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"redeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"callerConfirmation\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"renounceRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"revokeRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setAsset\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"signer\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setSigner\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalAssets\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"totalManagedAssets\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transfer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferFrom\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"unpause\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}],\\\"devdoc\\\":{\\\"errors\\\":{\\\"AccessControlBadConfirmation()\\\":[{\\\"details\\\":\\\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\\"}],\\\"AccessControlUnauthorizedAccount(address,bytes32)\\\":[{\\\"details\\\":\\\"The `account` is missing a role.\\\"}],\\\"AddressEmptyCode(address)\\\":[{\\\"details\\\":\\\"There's no code at `target` (it is not a contract).\\\"}],\\\"AddressInsufficientBalance(address)\\\":[{\\\"details\\\":\\\"The ETH balance of the account is not enough to perform the operation.\\\"}],\\\"ECDSAInvalidSignature()\\\":[{\\\"details\\\":\\\"The signature derives the `address(0)`.\\\"}],\\\"ECDSAInvalidSignatureLength(uint256)\\\":[{\\\"details\\\":\\\"The signature has an invalid length.\\\"}],\\\"ECDSAInvalidSignatureS(bytes32)\\\":[{\\\"details\\\":\\\"The signature has an S value that is in the upper half order.\\\"}],\\\"ERC20InsufficientAllowance(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `spender`\\\\u2019s `allowance`. Used in transfers.\\\",\\\"params\\\":{\\\"allowance\\\":\\\"Amount of tokens a `spender` is allowed to operate with.\\\",\\\"needed\\\":\\\"Minimum amount required to perform a transfer.\\\",\\\"spender\\\":\\\"Address that may be allowed to operate on tokens without being their owner.\\\"}}],\\\"ERC20InsufficientBalance(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\",\\\"params\\\":{\\\"balance\\\":\\\"Current balance for the interacting account.\\\",\\\"needed\\\":\\\"Minimum amount required to perform a transfer.\\\",\\\"sender\\\":\\\"Address whose tokens are being transferred.\\\"}}],\\\"ERC20InvalidApprover(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\",\\\"params\\\":{\\\"approver\\\":\\\"Address initiating an approval operation.\\\"}}],\\\"ERC20InvalidReceiver(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the token `receiver`. Used in transfers.\\\",\\\"params\\\":{\\\"receiver\\\":\\\"Address to which tokens are being transferred.\\\"}}],\\\"ERC20InvalidSender(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the token `sender`. Used in transfers.\\\",\\\"params\\\":{\\\"sender\\\":\\\"Address whose tokens are being transferred.\\\"}}],\\\"ERC20InvalidSpender(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `spender` to be approved. Used in approvals.\\\",\\\"params\\\":{\\\"spender\\\":\\\"Address that may be allowed to operate on tokens without being their owner.\\\"}}],\\\"EnforcedPause()\\\":[{\\\"details\\\":\\\"The operation failed because the contract is paused.\\\"}],\\\"ErrInvalidNonce()\\\":[{\\\"details\\\":\\\"Revert when nonce is not increase by one.\\\"}],\\\"ExceededMaxRedeem(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Attempted to redeem more shares than the max amount for `receiver`.\\\"}],\\\"ExceededMaxWithdraw(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Attempted to withdraw more assets than the max amount for `receiver`.\\\"}],\\\"ExpectedPause()\\\":[{\\\"details\\\":\\\"The operation failed because the contract is not paused.\\\"}],\\\"FailedInnerCall()\\\":[{\\\"details\\\":\\\"A call to an address target failed. The target may have reverted.\\\"}],\\\"InvalidAmount()\\\":[{\\\"details\\\":\\\"Revert when deposit or mint amount is 0;\\\"}],\\\"InvalidAssetAddress()\\\":[{\\\"details\\\":\\\"Revert when asset is address(0);\\\"}],\\\"InvalidInitialization()\\\":[{\\\"details\\\":\\\"The contract is already initialized.\\\"}],\\\"InvalidSignature()\\\":[{\\\"details\\\":\\\"Revert when signature is invalid.\\\"}],\\\"NotInitializing()\\\":[{\\\"details\\\":\\\"The contract is not initializing.\\\"}],\\\"SafeERC20FailedOperation(address)\\\":[{\\\"details\\\":\\\"An operation with an ERC20 token failed.\\\"}],\\\"SignatureExprired()\\\":[{\\\"details\\\":\\\"Revert signature expired.\\\"}]},\\\"events\\\":{\\\"Approval(address,address,uint256)\\\":{\\\"details\\\":\\\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\\\"},\\\"AssetUpdated(address)\\\":{\\\"details\\\":\\\"Emit when the vault's asset is updated.\\\"},\\\"Deposit(address,address,uint256,uint256)\\\":{\\\"details\\\":\\\"Emit when user deposit ERC20 token.\\\"},\\\"Initialized(uint64)\\\":{\\\"details\\\":\\\"Triggered when the contract has been initialized or reinitialized.\\\"},\\\"Paused(address)\\\":{\\\"details\\\":\\\"Emitted when the pause is triggered by `account`.\\\"},\\\"RoleAdminChanged(bytes32,bytes32,bytes32)\\\":{\\\"details\\\":\\\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\\\"},\\\"RoleGranted(bytes32,address,address)\\\":{\\\"details\\\":\\\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\\\"},\\\"RoleRevoked(bytes32,address,address)\\\":{\\\"details\\\":\\\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\\"},\\\"Transfer(address,address,uint256)\\\":{\\\"details\\\":\\\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\\\"},\\\"Unpaused(address)\\\":{\\\"details\\\":\\\"Emitted when the pause is lifted by `account`.\\\"},\\\"UserNonceIncreased(address,uint256)\\\":{\\\"details\\\":\\\"Emit when user's nonce is increased.\\\"},\\\"Withdraw(address,address,address,uint256,uint256)\\\":{\\\"details\\\":\\\"Emit when user withdraw ERC20 token.\\\"},\\\"WithdrawReward(address,uint256)\\\":{\\\"details\\\":\\\"Emit when user withdraw reward.\\\"}},\\\"kind\\\":\\\"dev\\\",\\\"methods\\\":{\\\"allowance(address,address)\\\":{\\\"details\\\":\\\"See {IERC20-allowance}.\\\"},\\\"approve(address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\\\"},\\\"asset()\\\":{\\\"details\\\":\\\"Return token address managed by this vault.\\\"},\\\"balanceOf(address)\\\":{\\\"details\\\":\\\"See {IERC20-balanceOf}.\\\"},\\\"convertToAssets(uint256)\\\":{\\\"details\\\":\\\"Return the ideal amount of tokens the Vault would exchange for the amount of shares.\\\"},\\\"convertToShares(uint256)\\\":{\\\"details\\\":\\\"Return the ideal amount of shares the Vault would exchange for the amount of tokens recieved.\\\"},\\\"decimals()\\\":{\\\"details\\\":\\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\\"},\\\"deposit(uint256,address)\\\":{\\\"details\\\":\\\"Deposits assets into the vault and mints shares to the receiver. This function transfers assets from the caller to the vault and mints corresponding shares to the receiver.\\\",\\\"params\\\":{\\\"receiver\\\":\\\"The address receiving the minted shares.\\\",\\\"tokenAmount\\\":\\\"The amount of tokens to deposit.\\\"},\\\"returns\\\":{\\\"shares\\\":\\\"The number of shares minted to the receiver.\\\"}},\\\"getRoleAdmin(bytes32)\\\":{\\\"details\\\":\\\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\\\"},\\\"getRoleMember(bytes32,uint256)\\\":{\\\"details\\\":\\\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\\\"},\\\"getRoleMemberCount(bytes32)\\\":{\\\"details\\\":\\\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\\\"},\\\"getUserNonce(address)\\\":{\\\"details\\\":\\\"Return user's nonce. Emit an {UserNonceIncreased} event.\\\"},\\\"grantRole(bytes32,address)\\\":{\\\"details\\\":\\\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\\\"},\\\"hasRole(bytes32,address)\\\":{\\\"details\\\":\\\"Returns `true` if `account` has been granted `role`.\\\"},\\\"maxRedeem(address)\\\":{\\\"details\\\":\\\"Return maximum shares user can burn.\\\"},\\\"maxWithdraw(address)\\\":{\\\"details\\\":\\\"Return maximum amount of tokens user can withdraw.\\\"},\\\"mint(uint256,address)\\\":{\\\"details\\\":\\\"Mints a specific amount of shares to the receiver by depositing assets. This function calculates the required asset amount and transfers it from the caller to mint the specified shares.\\\",\\\"params\\\":{\\\"receiver\\\":\\\"The address receiving the minted shares.\\\",\\\"shares\\\":\\\"The number of shares to mint.\\\"},\\\"returns\\\":{\\\"tokenAmount\\\":\\\"The amount of tokens deposited to mint the shares.\\\"}},\\\"name()\\\":{\\\"details\\\":\\\"Returns the name of the token.\\\"},\\\"pause()\\\":{\\\"details\\\":\\\"Pauses the Vault functionality. Requirements: - The caller must have the admin role.\\\"},\\\"paused()\\\":{\\\"details\\\":\\\"Returns true if the contract is paused, and false otherwise.\\\"},\\\"permitRewardWithdraw(address,uint256,uint256,uint256,bytes)\\\":{\\\"details\\\":\\\"Withdraws reward with signature of the authorized signer. This function transfers assets directly to the recipient without burning shares. It requires a valid signature from the authorized signer.\\\",\\\"params\\\":{\\\"deadline\\\":\\\"The timestamp after which the signature is no longer valid.\\\",\\\"nonce\\\":\\\"The current nonce of the recipient, used to prevent replay attacks.\\\",\\\"recipient\\\":\\\"The address receiving the reward.\\\",\\\"signature\\\":\\\"The cryptographic signature authorizing the withdrawal.\\\",\\\"tokenAmount\\\":\\\"The amount of tokens to withdraw as a reward.\\\"}},\\\"previewDeposit(uint256)\\\":{\\\"details\\\":\\\"Return the actual shares would be recieved when deposit amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc.\\\"},\\\"previewMint(uint256)\\\":{\\\"details\\\":\\\"Return the token amount would need to deposit in order to mint exactly amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc.\\\"},\\\"previewRedeem(uint256)\\\":{\\\"details\\\":\\\"Return the actual token amount would get when burn amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc.\\\"},\\\"previewWithdraw(uint256)\\\":{\\\"details\\\":\\\"Return the amount of shares need to burn in order to withdraw exactly an amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc.\\\"},\\\"redeem(uint256,address,address)\\\":{\\\"details\\\":\\\"Redeems a specific amount of shares from the owner for assets. This function burns the specified amount of shares from the owner and transfers the corresponding assets to the receiver.\\\",\\\"params\\\":{\\\"owner\\\":\\\"The address whose shares are being redeemed.\\\",\\\"receiver\\\":\\\"The address receiving the assets.\\\",\\\"shares\\\":\\\"The number of shares to redeem.\\\"},\\\"returns\\\":{\\\"tokenAmount\\\":\\\"The amount of tokens transferred to the receiver.\\\"}},\\\"renounceRole(bytes32,address)\\\":{\\\"details\\\":\\\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\\\"},\\\"revokeRole(bytes32,address)\\\":{\\\"details\\\":\\\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\\\"},\\\"setAsset(address)\\\":{\\\"details\\\":\\\"Set Vault's asset. Just admin can call this function. Emit an {AssetUpdated} event.\\\"},\\\"setSigner(address)\\\":{\\\"details\\\":\\\"Set Vault signer. Just admin can call this function. Emit an {SignerUpdated} event.\\\"},\\\"supportsInterface(bytes4)\\\":{\\\"details\\\":\\\"See {IERC165-supportsInterface}.\\\"},\\\"symbol()\\\":{\\\"details\\\":\\\"Returns the symbol of the token, usually a shorter version of the name.\\\"},\\\"totalAssets()\\\":{\\\"details\\\":\\\"Return total token amout of this vault.\\\"},\\\"totalSupply()\\\":{\\\"details\\\":\\\"See {IERC20-totalSupply}.\\\"},\\\"transfer(address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\\\"},\\\"transferFrom(address,address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\\\"},\\\"unpause()\\\":{\\\"details\\\":\\\"Unpauses the registrar controller's functionality. Requirements: - The caller must have the admin role.\\\"},\\\"withdraw(uint256,address,address)\\\":{\\\"details\\\":\\\"Withdraws assets from the vault by burning shares from the owner. This function burns shares from the owner and transfers the corresponding assets to the receiver.\\\",\\\"params\\\":{\\\"owner\\\":\\\"The address whose shares are being burned.\\\",\\\"receiver\\\":\\\"The address receiving the withdrawn assets.\\\",\\\"tokenAmount\\\":\\\"The amount of tokens to withdraw.\\\"},\\\"returns\\\":{\\\"shares\\\":\\\"The number of shares burned from the owner.\\\"}}},\\\"stateVariables\\\":{\\\"DOMAIN_SEPARATOR\\\":{\\\"details\\\":\\\"Return domain seperator.\\\"},\\\"DOMAIN_TYPEHASH\\\":{\\\"details\\\":\\\"keccak256(\\\\\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\\\\\")\\\"},\\\"PERMIT_TYPEHASH\\\":{\\\"details\\\":\\\"keccak256(\\\\\\\"Permit(address requester,address recipient,uint256 nonce,uint256 amount,uint256 deadline)\\\\\\\");\\\"},\\\"_____gap\\\":{\\\"details\\\":\\\"Gap for upgradability.\\\"},\\\"_asset\\\":{\\\"details\\\":\\\"Address of the token asset.\\\"},\\\"_signer\\\":{\\\"details\\\":\\\"Signer address.\\\"},\\\"_taxPercent\\\":{\\\"details\\\":\\\"Tax percentage Vault would take per deposit or mint request. [0_000 -> 100_000] 0% -> 100%;\\\"},\\\"_userNonceMap\\\":{\\\"details\\\":\\\"mapping: user => nonce\\\"}},\\\"version\\\":1},\\\"userdoc\\\":{\\\"kind\\\":\\\"user\\\",\\\"methods\\\":{\\\"deposit(uint256,address)\\\":{\\\"notice\\\":\\\"The actual number of shares minted may differ from the ideal conversion due to rounding or fees. Emits a {Deposit} event.\\\"},\\\"mint(uint256,address)\\\":{\\\"notice\\\":\\\"The actual amount of assets required may be higher than expected due to rounding or fees. Emits a {Deposit} event.\\\"},\\\"permitRewardWithdraw(address,uint256,uint256,uint256,bytes)\\\":{\\\"notice\\\":\\\"This operation does not affect the recipient's share balance. Emits a {WithdrawReward} event.\\\"},\\\"redeem(uint256,address,address)\\\":{\\\"notice\\\":\\\"The caller must have approval to burn the owner's shares if not the owner. Emits a {Withdraw} event.\\\"},\\\"withdraw(uint256,address,address)\\\":{\\\"notice\\\":\\\"The caller must have approval to burn the owner's shares if not the owner. Emits a {Withdraw} event.\\\"}},\\\"version\\\":1}},\\\"settings\\\":{\\\"compilationTarget\\\":{\\\"src/FloppyVault.sol\\\":\\\"FloppyVault\\\"},\\\"evmVersion\\\":\\\"istanbul\\\",\\\"libraries\\\":{},\\\"metadata\\\":{\\\"bytecodeHash\\\":\\\"ipfs\\\",\\\"useLiteralContent\\\":true},\\\"optimizer\\\":{\\\"enabled\\\":true,\\\"runs\\\":1000},\\\"remappings\\\":[\\\":@contracts/=src/\\\",\\\":@fdk-0.3.0-beta/=dependencies/@fdk-0.3.0-beta/\\\",\\\":@fdk/=dependencies/@fdk-0.3.0-beta/script/\\\",\\\":@interfaces/=src/interfaces/\\\",\\\":@openzeppelin-contracts-5.0.2/=dependencies/@openzeppelin-contracts-5.0.2/\\\",\\\":@openzeppelin-contracts-upgradeable-5.0.2/=dependencies/@openzeppelin-contracts-upgradeable-5.0.2/\\\",\\\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\\\",\\\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\\\",\\\":@prb-test-0.6.4/=dependencies/@prb-test-0.6.4/\\\",\\\":@script/=script/\\\",\\\":@solady/=dependencies/@fdk-0.3.0-beta/dependencies/solady-0.0.206/src/\\\",\\\":@uniswap-core/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-periphery/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":@uniswap-v2-core-1.0.1/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-v2-periphery-1.1.0-beta.0/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\\\",\\\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\\\",\\\":forge-std/=lib/forge-std/src/\\\",\\\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\\\",\\\":openzeppelin-contracts/=lib/openzeppelin-contracts/\\\"]},\\\"sources\\\":{\\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\\\n *\\\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\\\n * reused. This mechanism prevents re-execution of each \\\\\\\"step\\\\\\\" but allows the creation of new initialization steps in\\\\n * case an upgrade adds a module that needs to be initialized.\\\\n *\\\\n * For example:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```solidity\\\\n * contract MyToken is ERC20Upgradeable {\\\\n *     function initialize() initializer public {\\\\n *         __ERC20_init(\\\\\\\"MyToken\\\\\\\", \\\\\\\"MTK\\\\\\\");\\\\n *     }\\\\n * }\\\\n *\\\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\\\n *     function initializeV2() reinitializer(2) public {\\\\n *         __ERC20Permit_init(\\\\\\\"MyToken\\\\\\\");\\\\n *     }\\\\n * }\\\\n * ```\\\\n *\\\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\\\n *\\\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\\\n *\\\\n * [CAUTION]\\\\n * ====\\\\n * Avoid leaving a contract uninitialized.\\\\n *\\\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```\\\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\\\n * constructor() {\\\\n *     _disableInitializers();\\\\n * }\\\\n * ```\\\\n * ====\\\\n */\\\\nabstract contract Initializable {\\\\n    /**\\\\n     * @dev Storage of the initializable contract.\\\\n     *\\\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\\\n     * when using with upgradeable contracts.\\\\n     *\\\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\\\n     */\\\\n    struct InitializableStorage {\\\\n        /**\\\\n         * @dev Indicates that the contract has been initialized.\\\\n         */\\\\n        uint64 _initialized;\\\\n        /**\\\\n         * @dev Indicates that the contract is in the process of being initialized.\\\\n         */\\\\n        bool _initializing;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.Initializable\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\\\n\\\\n    /**\\\\n     * @dev The contract is already initialized.\\\\n     */\\\\n    error InvalidInitialization();\\\\n\\\\n    /**\\\\n     * @dev The contract is not initializing.\\\\n     */\\\\n    error NotInitializing();\\\\n\\\\n    /**\\\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\\\n     */\\\\n    event Initialized(uint64 version);\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\\\n     *\\\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\\\n     * production.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier initializer() {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        // Cache values to avoid duplicated sloads\\\\n        bool isTopLevelCall = !$._initializing;\\\\n        uint64 initialized = $._initialized;\\\\n\\\\n        // Allowed calls:\\\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\\\n        //                 initialized\\\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\\\n        //                 current contract is just being deployed\\\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\\\n\\\\n        if (!initialSetup && !construction) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = 1;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = true;\\\\n        }\\\\n        _;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = false;\\\\n            emit Initialized(1);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\\\n     * used to initialize parent contracts.\\\\n     *\\\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\\\n     * are added through upgrades and that require initialization.\\\\n     *\\\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\\\n     *\\\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\\\n     * a contract, executing them in the right order is up to the developer or operator.\\\\n     *\\\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier reinitializer(uint64 version) {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing || $._initialized >= version) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = version;\\\\n        $._initializing = true;\\\\n        _;\\\\n        $._initializing = false;\\\\n        emit Initialized(version);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\\\n     */\\\\n    modifier onlyInitializing() {\\\\n        _checkInitializing();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\\\n     */\\\\n    function _checkInitializing() internal view virtual {\\\\n        if (!_isInitializing()) {\\\\n            revert NotInitializing();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\\\n     * through proxies.\\\\n     *\\\\n     * Emits an {Initialized} event the first time it is successfully executed.\\\\n     */\\\\n    function _disableInitializers() internal virtual {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        if ($._initialized != type(uint64).max) {\\\\n            $._initialized = type(uint64).max;\\\\n            emit Initialized(type(uint64).max);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\\\n     */\\\\n    function _getInitializedVersion() internal view returns (uint64) {\\\\n        return _getInitializableStorage()._initialized;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\\\n     */\\\\n    function _isInitializing() internal view returns (bool) {\\\\n        return _getInitializableStorage()._initializing;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns a pointer to the storage namespace.\\\\n     */\\\\n    // solhint-disable-next-line var-name-mixedcase\\\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\\\n        assembly {\\\\n            $.slot := INITIALIZABLE_STORAGE\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\\";\\\\nimport {IERC20Metadata} from \\\\\\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\\\\\";\\\\nimport {ContextUpgradeable} from \\\\\\\"../../utils/ContextUpgradeable.sol\\\\\\\";\\\\nimport {IERC20Errors} from \\\\\\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\\\\\";\\\\nimport {Initializable} from \\\\\\\"../../proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * The default value of {decimals} is 18. To change this, you should override\\\\n * this function so it returns a different value.\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn't required by the specification.\\\\n */\\\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\\\n    struct ERC20Storage {\\\\n        mapping(address account => uint256) _balances;\\\\n\\\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\\\n\\\\n        uint256 _totalSupply;\\\\n\\\\n        string _name;\\\\n        string _symbol;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.ERC20\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\\\n\\\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\\\n        assembly {\\\\n            $.slot := ERC20StorageLocation\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\\\n        __ERC20_init_unchained(name_, symbol_);\\\\n    }\\\\n\\\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        $._name = name_;\\\\n        $._symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual returns (string memory) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual returns (string memory) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the default value returned by this function, unless\\\\n     * it's overridden.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `value`.\\\\n     */\\\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\\\n        address owner = _msgSender();\\\\n        _transfer(owner, to, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\\\n        address owner = _msgSender();\\\\n        _approve(owner, spender, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * NOTE: Does not update the allowance if the current allowance\\\\n     * is the maximum `uint256`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` and `to` cannot be the zero address.\\\\n     * - `from` must have a balance of at least `value`.\\\\n     * - the caller must have allowance for ``from``'s tokens of at least\\\\n     * `value`.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\\\n        address spender = _msgSender();\\\\n        _spendAllowance(from, spender, value);\\\\n        _transfer(from, to, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\\\n     */\\\\n    function _transfer(address from, address to, uint256 value) internal {\\\\n        if (from == address(0)) {\\\\n            revert ERC20InvalidSender(address(0));\\\\n        }\\\\n        if (to == address(0)) {\\\\n            revert ERC20InvalidReceiver(address(0));\\\\n        }\\\\n        _update(from, to, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\\\n     * this function.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _update(address from, address to, uint256 value) internal virtual {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        if (from == address(0)) {\\\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\\\n            $._totalSupply += value;\\\\n        } else {\\\\n            uint256 fromBalance = $._balances[from];\\\\n            if (fromBalance < value) {\\\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\\\n            }\\\\n            unchecked {\\\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\\\n                $._balances[from] = fromBalance - value;\\\\n            }\\\\n        }\\\\n\\\\n        if (to == address(0)) {\\\\n            unchecked {\\\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\\\n                $._totalSupply -= value;\\\\n            }\\\\n        } else {\\\\n            unchecked {\\\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\\\n                $._balances[to] += value;\\\\n            }\\\\n        }\\\\n\\\\n        emit Transfer(from, to, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\\\n     * Relies on the `_update` mechanism\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\\\n     */\\\\n    function _mint(address account, uint256 value) internal {\\\\n        if (account == address(0)) {\\\\n            revert ERC20InvalidReceiver(address(0));\\\\n        }\\\\n        _update(address(0), account, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\\\n     * Relies on the `_update` mechanism.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\\\n     */\\\\n    function _burn(address account, uint256 value) internal {\\\\n        if (account == address(0)) {\\\\n            revert ERC20InvalidSender(address(0));\\\\n        }\\\\n        _update(account, address(0), value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     *\\\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 value) internal {\\\\n        _approve(owner, spender, value, true);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\\\n     *\\\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\\\n     * `Approval` event during `transferFrom` operations.\\\\n     *\\\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\\\n     * true using the following override:\\\\n     * ```\\\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\\\n     *     super._approve(owner, spender, value, true);\\\\n     * }\\\\n     * ```\\\\n     *\\\\n     * Requirements are the same as {_approve}.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        if (owner == address(0)) {\\\\n            revert ERC20InvalidApprover(address(0));\\\\n        }\\\\n        if (spender == address(0)) {\\\\n            revert ERC20InvalidSpender(address(0));\\\\n        }\\\\n        $._allowances[owner][spender] = value;\\\\n        if (emitEvent) {\\\\n            emit Approval(owner, spender, value);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\\\n     *\\\\n     * Does not update the allowance value in case of infinite allowance.\\\\n     * Revert if not enough allowance is available.\\\\n     *\\\\n     * Does not emit an {Approval} event.\\\\n     */\\\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\\\n        uint256 currentAllowance = allowance(owner, spender);\\\\n        if (currentAllowance != type(uint256).max) {\\\\n            if (currentAllowance < value) {\\\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\\\n            }\\\\n            unchecked {\\\\n                _approve(owner, spender, currentAllowance - value, false);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\nimport {Initializable} from \\\\\\\"../proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract ContextUpgradeable is Initializable {\\\\n    function __Context_init() internal onlyInitializing {\\\\n    }\\\\n\\\\n    function __Context_init_unchained() internal onlyInitializing {\\\\n    }\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IAccessControl} from \\\\\\\"./IAccessControl.sol\\\\\\\";\\\\nimport {Context} from \\\\\\\"../utils/Context.sol\\\\\\\";\\\\nimport {ERC165} from \\\\\\\"../utils/introspection/ERC165.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module that allows children to implement role-based access\\\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\\\n * members except through off-chain means by accessing the contract event logs. Some\\\\n * applications may benefit from on-chain enumerability, for those cases see\\\\n * {AccessControlEnumerable}.\\\\n *\\\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\\\n * in the external API and be unique. The best way to achieve this is by\\\\n * using `public constant` hash digests:\\\\n *\\\\n * ```solidity\\\\n * bytes32 public constant MY_ROLE = keccak256(\\\\\\\"MY_ROLE\\\\\\\");\\\\n * ```\\\\n *\\\\n * Roles can be used to represent a set of permissions. To restrict access to a\\\\n * function call, use {hasRole}:\\\\n *\\\\n * ```solidity\\\\n * function foo() public {\\\\n *     require(hasRole(MY_ROLE, msg.sender));\\\\n *     ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\\\n * {revokeRole} functions. Each role has an associated admin role, and only\\\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\\\n *\\\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\\\n * that only accounts with this role will be able to grant or revoke other\\\\n * roles. More complex role relationships can be created by using\\\\n * {_setRoleAdmin}.\\\\n *\\\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\\\n * grant and revoke this role. Extra precautions should be taken to secure\\\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\\\n * to enforce additional security measures for this role.\\\\n */\\\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\\\n    struct RoleData {\\\\n        mapping(address account => bool) hasRole;\\\\n        bytes32 adminRole;\\\\n    }\\\\n\\\\n    mapping(bytes32 role => RoleData) private _roles;\\\\n\\\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\\\n\\\\n    /**\\\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\\\n     */\\\\n    modifier onlyRole(bytes32 role) {\\\\n        _checkRole(role);\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\n     */\\\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\\\n        return _roles[role].hasRole[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\\\n     */\\\\n    function _checkRole(bytes32 role) internal view virtual {\\\\n        _checkRole(role, _msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\\\n     * is missing `role`.\\\\n     */\\\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\\\n        if (!hasRole(role, account)) {\\\\n            revert AccessControlUnauthorizedAccount(account, role);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\n     * {revokeRole}.\\\\n     *\\\\n     * To change a role's admin, use {_setRoleAdmin}.\\\\n     */\\\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\\\n        return _roles[role].adminRole;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     *\\\\n     * May emit a {RoleGranted} event.\\\\n     */\\\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\\\n        _grantRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     *\\\\n     * May emit a {RoleRevoked} event.\\\\n     */\\\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\\\n        _revokeRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from the calling account.\\\\n     *\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\n     *\\\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must be `callerConfirmation`.\\\\n     *\\\\n     * May emit a {RoleRevoked} event.\\\\n     */\\\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\\\n        if (callerConfirmation != _msgSender()) {\\\\n            revert AccessControlBadConfirmation();\\\\n        }\\\\n\\\\n        _revokeRole(role, callerConfirmation);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\\\n     *\\\\n     * Emits a {RoleAdminChanged} event.\\\\n     */\\\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\\\n        _roles[role].adminRole = adminRole;\\\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\\\n     *\\\\n     * Internal function without access restriction.\\\\n     *\\\\n     * May emit a {RoleGranted} event.\\\\n     */\\\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\\\n        if (!hasRole(role, account)) {\\\\n            _roles[role].hasRole[account] = true;\\\\n            emit RoleGranted(role, account, _msgSender());\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\\\n     *\\\\n     * Internal function without access restriction.\\\\n     *\\\\n     * May emit a {RoleRevoked} event.\\\\n     */\\\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\\\n        if (hasRole(role, account)) {\\\\n            _roles[role].hasRole[account] = false;\\\\n            emit RoleRevoked(role, account, _msgSender());\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\\\n */\\\\ninterface IAccessControl {\\\\n    /**\\\\n     * @dev The `account` is missing a role.\\\\n     */\\\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\\\n\\\\n    /**\\\\n     * @dev The caller of a function is not the expected one.\\\\n     *\\\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\\\n     */\\\\n    error AccessControlBadConfirmation();\\\\n\\\\n    /**\\\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\\\n     *\\\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\\\n     * {RoleAdminChanged} not being emitted signaling this.\\\\n     */\\\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` is granted `role`.\\\\n     *\\\\n     * `sender` is the account that originated the contract call, an admin role\\\\n     * bearer except when using {AccessControl-_setupRole}.\\\\n     */\\\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` is revoked `role`.\\\\n     *\\\\n     * `sender` is the account that originated the contract call:\\\\n     *   - if using `revokeRole`, it is the admin role bearer\\\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\\\n     */\\\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\n     */\\\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\n     * {revokeRole}.\\\\n     *\\\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\\\n     */\\\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     */\\\\n    function grantRole(bytes32 role, address account) external;\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     */\\\\n    function revokeRole(bytes32 role, address account) external;\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from the calling account.\\\\n     *\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\n     *\\\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must be `callerConfirmation`.\\\\n     */\\\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlEnumerable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IAccessControlEnumerable} from \\\\\\\"./IAccessControlEnumerable.sol\\\\\\\";\\\\nimport {AccessControl} from \\\\\\\"../AccessControl.sol\\\\\\\";\\\\nimport {EnumerableSet} from \\\\\\\"../../utils/structs/EnumerableSet.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\\\n */\\\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\\\n    using EnumerableSet for EnumerableSet.AddressSet;\\\\n\\\\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\\\n     *\\\\n     * Role bearers are not sorted in any particular way, and their ordering may\\\\n     * change at any point.\\\\n     *\\\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\\\n     * you perform all queries on the same block. See the following\\\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\\\n     * for more information.\\\\n     */\\\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\\\n        return _roleMembers[role].at(index);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of accounts that have `role`. Can be used\\\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\\\n     */\\\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\\\n        return _roleMembers[role].length();\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\\\n     */\\\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\\\n        bool granted = super._grantRole(role, account);\\\\n        if (granted) {\\\\n            _roleMembers[role].add(account);\\\\n        }\\\\n        return granted;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\\\n     */\\\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\\\n        bool revoked = super._revokeRole(role, account);\\\\n        if (revoked) {\\\\n            _roleMembers[role].remove(account);\\\\n        }\\\\n        return revoked;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xb1c906fcd870fc8dfedb63bfb1bc58b4d2a7469bc13cc44d996fda430693850a\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IAccessControl} from \\\\\\\"../IAccessControl.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\\\n */\\\\ninterface IAccessControlEnumerable is IAccessControl {\\\\n    /**\\\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\\\n     *\\\\n     * Role bearers are not sorted in any particular way, and their ordering may\\\\n     * change at any point.\\\\n     *\\\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\\\n     * you perform all queries on the same block. See the following\\\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\\\n     * for more information.\\\\n     */\\\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of accounts that have `role`. Can be used\\\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\\\n     */\\\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard ERC20 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\\\n */\\\\ninterface IERC20Errors {\\\\n    /**\\\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param balance Current balance for the interacting account.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     */\\\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC20InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC20InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `spender`\\\\u2019s `allowance`. Used in transfers.\\\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     */\\\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC20InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC20InvalidSpender(address spender);\\\\n}\\\\n\\\\n/**\\\\n * @dev Standard ERC721 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\\\n */\\\\ninterface IERC721Errors {\\\\n    /**\\\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\\\n     * Used in balance queries.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC721InvalidOwner(address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC721NonexistentToken(uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param tokenId Identifier number of a token.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC721InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC721InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator`\\\\u2019s approval. Used in transfers.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC721InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC721InvalidOperator(address operator);\\\\n}\\\\n\\\\n/**\\\\n * @dev Standard ERC1155 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\\\n */\\\\ninterface IERC1155Errors {\\\\n    /**\\\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param balance Current balance for the interacting account.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC1155InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC1155InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator`\\\\u2019s approval. Used in transfers.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC1155InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC1155InvalidOperator(address operator);\\\\n\\\\n    /**\\\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\\\n     * Used in batch transfers.\\\\n     * @param idsLength Length of the array of token identifiers\\\\n     * @param valuesLength Length of the array of token amounts\\\\n     */\\\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address to, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\\\n     * caller's tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender's allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\\\n     * allowance mechanism. `value` is then deducted from the caller's\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"../IERC20.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\\\n *\\\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\\\n * need to send a transaction, and thus is not required to hold Ether at all.\\\\n *\\\\n * ==== Security Considerations\\\\n *\\\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\\\n * generally recommended is:\\\\n *\\\\n * ```solidity\\\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\\\n *     doThing(..., value);\\\\n * }\\\\n *\\\\n * function doThing(..., uint256 value) public {\\\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\\\n *     ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\\\n * {SafeERC20-safeTransferFrom}).\\\\n *\\\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\\\n * contracts should have entry points that don't rely on permit.\\\\n */\\\\ninterface IERC20Permit {\\\\n    /**\\\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\\\n     * given ``owner``'s signed approval.\\\\n     *\\\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\\\n     * ordering also apply here.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `deadline` must be a timestamp in the future.\\\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\\\n     * over the EIP712-formatted function arguments.\\\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\\\n     *\\\\n     * For more information on the signature format, see the\\\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\\\n     * section].\\\\n     *\\\\n     * CAUTION: See Security Considerations above.\\\\n     */\\\\n    function permit(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 value,\\\\n        uint256 deadline,\\\\n        uint8 v,\\\\n        bytes32 r,\\\\n        bytes32 s\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the current nonce for `owner`. This value must be\\\\n     * included whenever a signature is generated for {permit}.\\\\n     *\\\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\\\n     * prevents a signature from being used multiple times.\\\\n     */\\\\n    function nonces(address owner) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\\\n     */\\\\n    // solhint-disable-next-line func-name-mixedcase\\\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"../IERC20.sol\\\\\\\";\\\\nimport {IERC20Permit} from \\\\\\\"../extensions/IERC20Permit.sol\\\\\\\";\\\\nimport {Address} from \\\\\\\"../../../utils/Address.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @title SafeERC20\\\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\\\n * contract returns false). Tokens that return no value (and instead revert or\\\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\\\n * successful.\\\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\\\n */\\\\nlibrary SafeERC20 {\\\\n    using Address for address;\\\\n\\\\n    /**\\\\n     * @dev An operation with an ERC20 token failed.\\\\n     */\\\\n    error SafeERC20FailedOperation(address token);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failed `decreaseAllowance` request.\\\\n     */\\\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\\\n\\\\n    /**\\\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\\\n        forceApprove(token, spender, oldAllowance + value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\\\n     * value, non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\\\n        unchecked {\\\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\\\n            if (currentAllowance < requestedDecrease) {\\\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\\\n            }\\\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\\\n     */\\\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\\\n\\\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\\\n            _callOptionalReturn(token, approvalCall);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     */\\\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\\\n        // the target address contains contract code and also asserts for success in the low-level call.\\\\n\\\\n        bytes memory returndata = address(token).functionCall(data);\\\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\\\n            revert SafeERC20FailedOperation(address(token));\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     *\\\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\\\n     */\\\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\\\n        // and not revert is the subcall reverts.\\\\n\\\\n        (bool success, bytes memory returndata) = address(token).call(data);\\\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\\\n     */\\\\n    error AddressInsufficientBalance(address account);\\\\n\\\\n    /**\\\\n     * @dev There's no code at `target` (it is not a contract).\\\\n     */\\\\n    error AddressEmptyCode(address target);\\\\n\\\\n    /**\\\\n     * @dev A call to an address target failed. The target may have reverted.\\\\n     */\\\\n    error FailedInnerCall();\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        if (address(this).balance < amount) {\\\\n            revert AddressInsufficientBalance(address(this));\\\\n        }\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\\"\\\\\\\");\\\\n        if (!success) {\\\\n            revert FailedInnerCall();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\\\n     * up by this function (like regular Solidity function calls). However, if\\\\n     * the call reverted with no returned reason, this function reverts with a\\\\n     * {FailedInnerCall} error.\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        if (address(this).balance < value) {\\\\n            revert AddressInsufficientBalance(address(this));\\\\n        }\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\\\n     * unsuccessful call.\\\\n     */\\\\n    function verifyCallResultFromTarget(\\\\n        address target,\\\\n        bool success,\\\\n        bytes memory returndata\\\\n    ) internal view returns (bytes memory) {\\\\n        if (!success) {\\\\n            _revert(returndata);\\\\n        } else {\\\\n            // only check if target is a contract if the call was successful and the return data is empty\\\\n            // otherwise we already know that it was a contract\\\\n            if (returndata.length == 0 && target.code.length == 0) {\\\\n                revert AddressEmptyCode(target);\\\\n            }\\\\n            return returndata;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\\\n     * revert reason or with a default {FailedInnerCall} error.\\\\n     */\\\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\\\n        if (!success) {\\\\n            _revert(returndata);\\\\n        } else {\\\\n            return returndata;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\\\n     */\\\\n    function _revert(bytes memory returndata) private pure {\\\\n        // Look for revert reason and bubble it up if present\\\\n        if (returndata.length > 0) {\\\\n            // The easiest way to bubble the revert reason is using memory via assembly\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                let returndata_size := mload(returndata)\\\\n                revert(add(32, returndata), returndata_size)\\\\n            }\\\\n        } else {\\\\n            revert FailedInnerCall();\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Context} from \\\\\\\"../utils/Context.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    /**\\\\n     * @dev The operation failed because the contract is paused.\\\\n     */\\\\n    error EnforcedPause();\\\\n\\\\n    /**\\\\n     * @dev The operation failed because the contract is not paused.\\\\n     */\\\\n    error ExpectedPause();\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        _requireNotPaused();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        _requirePaused();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the contract is paused.\\\\n     */\\\\n    function _requireNotPaused() internal view virtual {\\\\n        if (paused()) {\\\\n            revert EnforcedPause();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the contract is not paused.\\\\n     */\\\\n    function _requirePaused() internal view virtual {\\\\n        if (!paused()) {\\\\n            revert ExpectedPause();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Math} from \\\\\\\"./math/Math.sol\\\\\\\";\\\\nimport {SignedMath} from \\\\\\\"./math/SignedMath.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant HEX_DIGITS = \\\\\\\"0123456789abcdef\\\\\\\";\\\\n    uint8 private constant ADDRESS_LENGTH = 20;\\\\n\\\\n    /**\\\\n     * @dev The `value` string doesn't fit in the specified `length`.\\\\n     */\\\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        unchecked {\\\\n            uint256 length = Math.log10(value) + 1;\\\\n            string memory buffer = new string(length);\\\\n            uint256 ptr;\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                ptr := add(buffer, add(32, length))\\\\n            }\\\\n            while (true) {\\\\n                ptr--;\\\\n                /// @solidity memory-safe-assembly\\\\n                assembly {\\\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\\\n                }\\\\n                value /= 10;\\\\n                if (value == 0) break;\\\\n            }\\\\n            return buffer;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\\\n        return string.concat(value < 0 ? \\\\\\\"-\\\\\\\" : \\\\\\\"\\\\\\\", toString(SignedMath.abs(value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        unchecked {\\\\n            return toHexString(value, Math.log256(value) + 1);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\n        uint256 localValue = value;\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\\"0\\\\\\\";\\\\n        buffer[1] = \\\\\\\"x\\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\\\n            localValue >>= 4;\\\\n        }\\\\n        if (localValue != 0) {\\\\n            revert StringsInsufficientHexLength(value, length);\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\\\n     * representation.\\\\n     */\\\\n    function toHexString(address addr) internal pure returns (string memory) {\\\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the two strings are equal.\\\\n     */\\\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    enum RecoverError {\\\\n        NoError,\\\\n        InvalidSignature,\\\\n        InvalidSignatureLength,\\\\n        InvalidSignatureS\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev The signature derives the `address(0)`.\\\\n     */\\\\n    error ECDSAInvalidSignature();\\\\n\\\\n    /**\\\\n     * @dev The signature has an invalid length.\\\\n     */\\\\n    error ECDSAInvalidSignatureLength(uint256 length);\\\\n\\\\n    /**\\\\n     * @dev The signature has an S value that is in the upper half order.\\\\n     */\\\\n    error ECDSAInvalidSignatureS(bytes32 s);\\\\n\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\\\n     * and a bytes32 providing additional information about the error.\\\\n     *\\\\n     * If no error is returned, then the address can be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\\\n     *\\\\n     * Documentation for signature generation:\\\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\\\n     */\\\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\\\n        if (signature.length == 65) {\\\\n            bytes32 r;\\\\n            bytes32 s;\\\\n            uint8 v;\\\\n            // ecrecover takes the signature parameters, and the only way to get them\\\\n            // currently is to use assembly.\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                r := mload(add(signature, 0x20))\\\\n                s := mload(add(signature, 0x40))\\\\n                v := byte(0, mload(add(signature, 0x60)))\\\\n            }\\\\n            return tryRecover(hash, v, r, s);\\\\n        } else {\\\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\\\n        _throwError(error, errorArg);\\\\n        return recovered;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\\\n     *\\\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\\\n     */\\\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\\\n        unchecked {\\\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\\\n            return tryRecover(hash, v, r, s);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\\\n     */\\\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\\\n        _throwError(error, errorArg);\\\\n        return recovered;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\\\n     * `r` and `s` signature fields separately.\\\\n     */\\\\n    function tryRecover(\\\\n        bytes32 hash,\\\\n        uint8 v,\\\\n        bytes32 r,\\\\n        bytes32 s\\\\n    ) internal pure returns (address, RecoverError, bytes32) {\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (301): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (302): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        if (signer == address(0)) {\\\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\\\n        }\\\\n\\\\n        return (signer, RecoverError.NoError, bytes32(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\\\n     * `r` and `s` signature fields separately.\\\\n     */\\\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\\\n        _throwError(error, errorArg);\\\\n        return recovered;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\\\n     */\\\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\\\n        if (error == RecoverError.NoError) {\\\\n            return; // no error: do nothing\\\\n        } else if (error == RecoverError.InvalidSignature) {\\\\n            revert ECDSAInvalidSignature();\\\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\\\n        } else if (error == RecoverError.InvalidSignatureS) {\\\\n            revert ECDSAInvalidSignatureS(errorArg);\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Strings} from \\\\\\\"../Strings.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\\\n *\\\\n * The library provides methods for generating a hash of a message that conforms to the\\\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\\\n * specifications.\\\\n */\\\\nlibrary MessageHashUtils {\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n     * `0x45` (`personal_sign` messages).\\\\n     *\\\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\\\n     * `\\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\\"` and hashing the result. It corresponds with the\\\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\\\n     *\\\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\\\n     * be re-hashed.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            mstore(0x00, \\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\\") // 32 is the bytes-length of messageHash\\\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n     * `0x45` (`personal_sign` messages).\\\\n     *\\\\n     * The digest is calculated by prefixing an arbitrary `message` with\\\\n     * `\\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n\\\\\\\" + len(message)` and hashing the result. It corresponds with the\\\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\\\n        return\\\\n            keccak256(bytes.concat(\\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n\\\\\\\", bytes(Strings.toString(message.length)), message));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n     * `0x00` (data with intended validator).\\\\n     *\\\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\\\\\"\\\\\\\\x19\\\\\\\\x00\\\\\\\"` and the intended\\\\n     * `validator` address. Then hashing the result.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\\\n        return keccak256(abi.encodePacked(hex\\\\\\\"19_00\\\\\\\", validator, data));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\\\n     *\\\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\\\n     * `\\\\\\\\x19\\\\\\\\x01` and hashing the result. It corresponds to the hash signed by the\\\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\\\n     *\\\\n     * See {ECDSA-recover}.\\\\n     */\\\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            let ptr := mload(0x40)\\\\n            mstore(ptr, hex\\\\\\\"19_01\\\\\\\")\\\\n            mstore(add(ptr, 0x02), domainSeparator)\\\\n            mstore(add(ptr, 0x22), structHash)\\\\n            digest := keccak256(ptr, 0x42)\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC165} from \\\\\\\"./IERC165.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Muldiv operation overflow.\\\\n     */\\\\n    error MathOverflowedMulDiv();\\\\n\\\\n    enum Rounding {\\\\n        Floor, // Toward negative infinity\\\\n        Ceil, // Toward positive infinity\\\\n        Trunc, // Toward zero\\\\n        Expand // Away from zero\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\\\n            // benefit is lost if 'b' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a > b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow.\\\\n        return (a & b) + (a ^ b) / 2;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the ceiling of the division of two numbers.\\\\n     *\\\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\\\n     * of rounding towards zero.\\\\n     */\\\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        if (b == 0) {\\\\n            // Guarantee the same behavior as in a regular Solidity division.\\\\n            return a / b;\\\\n        }\\\\n\\\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\\\n     * denominator == 0.\\\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\\\n     * Uniswap Labs also under MIT license.\\\\n     */\\\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\\\n        unchecked {\\\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\\\n            // variables such that product = prod1 * 2^256 + prod0.\\\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\\\n            uint256 prod1; // Most significant 256 bits of the product\\\\n            assembly {\\\\n                let mm := mulmod(x, y, not(0))\\\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\\\n            }\\\\n\\\\n            // Handle non-overflow cases, 256 by 256 division.\\\\n            if (prod1 == 0) {\\\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\\\n                // The surrounding unchecked block does not change this fact.\\\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\\\n                return prod0 / denominator;\\\\n            }\\\\n\\\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\\\n            if (denominator <= prod1) {\\\\n                revert MathOverflowedMulDiv();\\\\n            }\\\\n\\\\n            ///////////////////////////////////////////////\\\\n            // 512 by 256 division.\\\\n            ///////////////////////////////////////////////\\\\n\\\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\\\n            uint256 remainder;\\\\n            assembly {\\\\n                // Compute remainder using mulmod.\\\\n                remainder := mulmod(x, y, denominator)\\\\n\\\\n                // Subtract 256 bit number from 512 bit number.\\\\n                prod1 := sub(prod1, gt(remainder, prod0))\\\\n                prod0 := sub(prod0, remainder)\\\\n            }\\\\n\\\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\\\n\\\\n            uint256 twos = denominator & (0 - denominator);\\\\n            assembly {\\\\n                // Divide denominator by twos.\\\\n                denominator := div(denominator, twos)\\\\n\\\\n                // Divide [prod1 prod0] by twos.\\\\n                prod0 := div(prod0, twos)\\\\n\\\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\\\n                twos := add(div(sub(0, twos), twos), 1)\\\\n            }\\\\n\\\\n            // Shift in bits from prod1 into prod0.\\\\n            prod0 |= prod1 * twos;\\\\n\\\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\\\n            uint256 inverse = (3 * denominator) ^ 2;\\\\n\\\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\\\n            // works in modular arithmetic, doubling the correct bits in each step.\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\\\n\\\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\\\n            // is no longer required.\\\\n            result = prod0 * inverse;\\\\n            return result;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\\\n     */\\\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\\\n        uint256 result = mulDiv(x, y, denominator);\\\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\\\n            result += 1;\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\\\n     * towards zero.\\\\n     *\\\\n     * Inspired by Henry S. Warren, Jr.'s \\\\\\\"Hacker's Delight\\\\\\\" (Chapter 11).\\\\n     */\\\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\\\n        //\\\\n        // We know that the \\\\\\\"msb\\\\\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\\\n        //\\\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\\\n        // \\\\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\\\n        // \\\\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\\\n        //\\\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\\\n        uint256 result = 1 << (log2(a) >> 1);\\\\n\\\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\\\n        // into the expected uint128 result.\\\\n        unchecked {\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            result = (result + a / result) >> 1;\\\\n            return min(result, a / result);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\\\n     */\\\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = sqrt(a);\\\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log2(uint256 value) internal pure returns (uint256) {\\\\n        uint256 result = 0;\\\\n        unchecked {\\\\n            if (value >> 128 > 0) {\\\\n                value >>= 128;\\\\n                result += 128;\\\\n            }\\\\n            if (value >> 64 > 0) {\\\\n                value >>= 64;\\\\n                result += 64;\\\\n            }\\\\n            if (value >> 32 > 0) {\\\\n                value >>= 32;\\\\n                result += 32;\\\\n            }\\\\n            if (value >> 16 > 0) {\\\\n                value >>= 16;\\\\n                result += 16;\\\\n            }\\\\n            if (value >> 8 > 0) {\\\\n                value >>= 8;\\\\n                result += 8;\\\\n            }\\\\n            if (value >> 4 > 0) {\\\\n                value >>= 4;\\\\n                result += 4;\\\\n            }\\\\n            if (value >> 2 > 0) {\\\\n                value >>= 2;\\\\n                result += 2;\\\\n            }\\\\n            if (value >> 1 > 0) {\\\\n                result += 1;\\\\n            }\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = log2(value);\\\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log10(uint256 value) internal pure returns (uint256) {\\\\n        uint256 result = 0;\\\\n        unchecked {\\\\n            if (value >= 10 ** 64) {\\\\n                value /= 10 ** 64;\\\\n                result += 64;\\\\n            }\\\\n            if (value >= 10 ** 32) {\\\\n                value /= 10 ** 32;\\\\n                result += 32;\\\\n            }\\\\n            if (value >= 10 ** 16) {\\\\n                value /= 10 ** 16;\\\\n                result += 16;\\\\n            }\\\\n            if (value >= 10 ** 8) {\\\\n                value /= 10 ** 8;\\\\n                result += 8;\\\\n            }\\\\n            if (value >= 10 ** 4) {\\\\n                value /= 10 ** 4;\\\\n                result += 4;\\\\n            }\\\\n            if (value >= 10 ** 2) {\\\\n                value /= 10 ** 2;\\\\n                result += 2;\\\\n            }\\\\n            if (value >= 10 ** 1) {\\\\n                result += 1;\\\\n            }\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = log10(value);\\\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\\\n     * Returns 0 if given 0.\\\\n     *\\\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\\\n     */\\\\n    function log256(uint256 value) internal pure returns (uint256) {\\\\n        uint256 result = 0;\\\\n        unchecked {\\\\n            if (value >> 128 > 0) {\\\\n                value >>= 128;\\\\n                result += 16;\\\\n            }\\\\n            if (value >> 64 > 0) {\\\\n                value >>= 64;\\\\n                result += 8;\\\\n            }\\\\n            if (value >> 32 > 0) {\\\\n                value >>= 32;\\\\n                result += 4;\\\\n            }\\\\n            if (value >> 16 > 0) {\\\\n                value >>= 16;\\\\n                result += 2;\\\\n            }\\\\n            if (value >> 8 > 0) {\\\\n                result += 1;\\\\n            }\\\\n        }\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\\\n     * Returns 0 if given 0.\\\\n     */\\\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            uint256 result = log256(value);\\\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\\\n     */\\\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\\\n        return uint8(rounding) % 2 == 1;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard signed math utilities missing in the Solidity language.\\\\n */\\\\nlibrary SignedMath {\\\\n    /**\\\\n     * @dev Returns the largest of two signed numbers.\\\\n     */\\\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\\\n        return a > b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two signed numbers.\\\\n     */\\\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two signed numbers without overflow.\\\\n     * The result is rounded towards zero.\\\\n     */\\\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\\\n        // Formula from the book \\\\\\\"Hacker's Delight\\\\\\\"\\\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the absolute unsigned value of a signed value.\\\\n     */\\\\n    function abs(int256 n) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            // must be unchecked in order to support `n = type(int256).min`\\\\n            return uint256(n >= 0 ? n : -n);\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Library for managing\\\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\\\n * types.\\\\n *\\\\n * Sets have the following properties:\\\\n *\\\\n * - Elements are added, removed, and checked for existence in constant time\\\\n * (O(1)).\\\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\\\n *\\\\n * ```solidity\\\\n * contract Example {\\\\n *     // Add the library methods\\\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\\\n *\\\\n *     // Declare a set state variable\\\\n *     EnumerableSet.AddressSet private mySet;\\\\n * }\\\\n * ```\\\\n *\\\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\\\n * and `uint256` (`UintSet`) are supported.\\\\n *\\\\n * [WARNING]\\\\n * ====\\\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\\\n * unusable.\\\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\\\n *\\\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\\\n * array of EnumerableSet.\\\\n * ====\\\\n */\\\\nlibrary EnumerableSet {\\\\n    // To implement this library for multiple types with as little code\\\\n    // repetition as possible, we write it in terms of a generic Set type with\\\\n    // bytes32 values.\\\\n    // The Set implementation uses private functions, and user-facing\\\\n    // implementations (such as AddressSet) are just wrappers around the\\\\n    // underlying Set.\\\\n    // This means that we can only create new EnumerableSets for types that fit\\\\n    // in bytes32.\\\\n\\\\n    struct Set {\\\\n        // Storage of set values\\\\n        bytes32[] _values;\\\\n        // Position is the index of the value in the `values` array plus 1.\\\\n        // Position 0 is used to mean a value is not in the set.\\\\n        mapping(bytes32 value => uint256) _positions;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\\\n        if (!_contains(set, value)) {\\\\n            set._values.push(value);\\\\n            // The value is stored at length-1, but we add 1 to all indexes\\\\n            // and use 0 as a sentinel value\\\\n            set._positions[value] = set._values.length;\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\\\n        uint256 position = set._positions[value];\\\\n\\\\n        if (position != 0) {\\\\n            // Equivalent to contains(set, value)\\\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\\\n            // This modifies the order of the array, as noted in {at}.\\\\n\\\\n            uint256 valueIndex = position - 1;\\\\n            uint256 lastIndex = set._values.length - 1;\\\\n\\\\n            if (valueIndex != lastIndex) {\\\\n                bytes32 lastValue = set._values[lastIndex];\\\\n\\\\n                // Move the lastValue to the index where the value to delete is\\\\n                set._values[valueIndex] = lastValue;\\\\n                // Update the tracked position of the lastValue (that was just moved)\\\\n                set._positions[lastValue] = position;\\\\n            }\\\\n\\\\n            // Delete the slot where the moved value was stored\\\\n            set._values.pop();\\\\n\\\\n            // Delete the tracked position for the deleted slot\\\\n            delete set._positions[value];\\\\n\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\\\n        return set._positions[value] != 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values on the set. O(1).\\\\n     */\\\\n    function _length(Set storage set) private view returns (uint256) {\\\\n        return set._values.length;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\\\n        return set._values[index];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\\\n        return set._values;\\\\n    }\\\\n\\\\n    // Bytes32Set\\\\n\\\\n    struct Bytes32Set {\\\\n        Set _inner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\\\n        return _add(set._inner, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\\\n        return _remove(set._inner, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\\\n        return _contains(set._inner, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values in the set. O(1).\\\\n     */\\\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\\\n        return _length(set._inner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\\\n        return _at(set._inner, index);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\\\n        bytes32[] memory store = _values(set._inner);\\\\n        bytes32[] memory result;\\\\n\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            result := store\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n\\\\n    // AddressSet\\\\n\\\\n    struct AddressSet {\\\\n        Set _inner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values in the set. O(1).\\\\n     */\\\\n    function length(AddressSet storage set) internal view returns (uint256) {\\\\n        return _length(set._inner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\\\n        return address(uint160(uint256(_at(set._inner, index))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\\\n        bytes32[] memory store = _values(set._inner);\\\\n        address[] memory result;\\\\n\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            result := store\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n\\\\n    // UintSet\\\\n\\\\n    struct UintSet {\\\\n        Set _inner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\\\n        return _add(set._inner, bytes32(value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\\\n        return _remove(set._inner, bytes32(value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\\\n        return _contains(set._inner, bytes32(value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values in the set. O(1).\\\\n     */\\\\n    function length(UintSet storage set) internal view returns (uint256) {\\\\n        return _length(set._inner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\\\n        return uint256(_at(set._inner, index));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\\\n        bytes32[] memory store = _values(set._inner);\\\\n        uint256[] memory result;\\\\n\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            result := store\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/FloppyVault.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport \\\\\\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\\\\\";\\\\nimport \\\\\\\"@interfaces/IFloppyVault.sol\\\\\\\";\\\\nimport \\\\\\\"@openzeppelin/contracts/utils/Pausable.sol\\\\\\\";\\\\nimport { ERC20Upgradeable, IERC20 } from \\\\\\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\\\\\";\\\\nimport { ContextUpgradeable } from \\\\\\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\\\\\";\\\\nimport { AccessControlEnumerable } from \\\\\\\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\\\\\\\";\\\\nimport { SafeERC20 } from \\\\\\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\\\\\";\\\\nimport { ECDSA } from \\\\\\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\\\\\";\\\\nimport { MessageHashUtils } from \\\\\\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\\\\\";\\\\n\\\\ncontract FloppyVault is IFloppyVault, ERC20Upgradeable, Pausable, AccessControlEnumerable {\\\\n  uint256 public constant MAX_PERCENTAGE = 100_000;\\\\n\\\\n  /// @dev keccak256(\\\\\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\\\\\")\\\\n  bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\\\n\\\\n  /// @dev keccak256(\\\\\\\"Permit(address requester,address recipient,uint256 nonce,uint256 amount,uint256 deadline)\\\\\\\");\\\\n  bytes32 public constant PERMIT_TYPEHASH = 0xb365888e64ab7bc61fb16d9b1949494d2eb12e26fcdf26e14b500893673a5a59;\\\\n\\\\n  /// @dev Gap for upgradability.\\\\n  uint256[50] private _____gap;\\\\n\\\\n  bytes32 public DOMAIN_SEPARATOR;\\\\n\\\\n  /// @dev mapping: user => nonce\\\\n  mapping(address => uint256) internal _userNonceMap;\\\\n\\\\n  /// @dev Address of the token asset.\\\\n  IERC20 internal _asset;\\\\n\\\\n  /// @dev Tax percentage Vault would take per deposit or mint request. [0_000 -> 100_000] 0% -> 100%;\\\\n  uint256 internal _taxPercent;\\\\n\\\\n  /// @dev Signer address.\\\\n  address _signer;\\\\n\\\\n  modifier notZero(uint256 value) {\\\\n    if (value == 0) revert InvalidAmount();\\\\n    _;\\\\n  }\\\\n\\\\n  constructor() Pausable() {\\\\n    _disableInitializers();\\\\n  }\\\\n\\\\n  function initialize(address admin, IERC20 token, uint256 taxPercent) external initializer {\\\\n    if (address(token) == address(0)) revert InvalidAssetAddress();\\\\n    __ERC20_init(\\\\\\\"Floppy Vault\\\\\\\", \\\\\\\"FVT\\\\\\\");\\\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\\\n    _updateDomainSeparator();\\\\n    _asset = token;\\\\n    _taxPercent = taxPercent;\\\\n    _signer = admin;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    _pause();\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    _unpause();\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function setAsset(IERC20 asset) external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    _asset = asset;\\\\n    emit AssetUpdated(address(asset));\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function setSigner(address signer) external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    _signer = signer;\\\\n    emit SignerUpdated(address(signer));\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function deposit(\\\\n    uint256 tokenAmount,\\\\n    address receiver\\\\n  ) external whenNotPaused notZero(tokenAmount) returns (uint256 shares) {\\\\n    shares = previewDeposit(tokenAmount);\\\\n    _deposit(_msgSender(), receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function withdraw(\\\\n    uint256 tokenAmount,\\\\n    address receiver,\\\\n    address owner\\\\n  ) external whenNotPaused notZero(tokenAmount) returns (uint256 shares) {\\\\n    // Save 2 times SLOAD.\\\\n    uint256 maxTokenAmount = maxWithdraw(owner);\\\\n    if (tokenAmount > maxTokenAmount) {\\\\n      revert ExceededMaxWithdraw(owner, tokenAmount, maxTokenAmount);\\\\n    }\\\\n    shares = previewWithdraw(tokenAmount);\\\\n    _withdraw(_msgSender(), owner, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function permitRewardWithdraw(\\\\n    address recipient,\\\\n    uint256 tokenAmount,\\\\n    uint256 nonce,\\\\n    uint256 deadline,\\\\n    bytes memory signature\\\\n  ) external whenNotPaused notZero(tokenAmount) {\\\\n    if (deadline < block.timestamp) revert SignatureExprired();\\\\n    if (nonce != _userNonceMap[_msgSender()]) revert ErrInvalidNonce();\\\\n\\\\n    _validateSignature(_msgSender(), recipient, nonce, tokenAmount, deadline, signature);\\\\n    _increaseUserNonce(_msgSender());\\\\n\\\\n    SafeERC20.safeTransfer(_asset, recipient, tokenAmount);\\\\n    emit WithdrawReward(recipient, tokenAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function mint(uint256 shares, address receiver) external whenNotPaused notZero(shares) returns (uint256 tokenAmount) {\\\\n    tokenAmount = previewMint(shares);\\\\n    _deposit(_msgSender(), receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function redeem(\\\\n    uint256 shares,\\\\n    address receiver,\\\\n    address owner\\\\n  ) external whenNotPaused notZero(shares) returns (uint256 tokenAmount) {\\\\n    uint256 maxShares = maxRedeem(owner);\\\\n    if (shares > maxShares) {\\\\n      revert ExceededMaxRedeem(owner, shares, maxShares);\\\\n    }\\\\n    tokenAmount = previewRedeem(shares);\\\\n    _withdraw(_msgSender(), owner, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function asset() public view returns (address assetTokenAddress) {\\\\n    assetTokenAddress = address(_asset);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function totalAssets() public view returns (uint256 totalManagedAssets) {\\\\n    totalManagedAssets = _asset.balanceOf(address(this));\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function maxWithdraw(address user) public view returns (uint256 tokenAmount) {\\\\n    tokenAmount = previewRedeem(balanceOf(user));\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function maxRedeem(address user) public view returns (uint256 shares) {\\\\n    shares = balanceOf(user);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function convertToShares(uint256 assetAmount) public view returns (uint256 shares) {\\\\n    shares = _convertToShares(assetAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function convertToAssets(uint256 shares) public view returns (uint256 assetAmount) {\\\\n    assetAmount = _convertToAssets(shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewDeposit(uint256 tokenAmount) public view returns (uint256 shares) {\\\\n    shares = _convertToShares(tokenAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewWithdraw(uint256 tokenAmount) public view returns (uint256 shares) {\\\\n    uint256 taxFee = _calTaxFee(tokenAmount);\\\\n    shares = _convertToShares(tokenAmount + taxFee);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewMint(uint256 shares) public view returns (uint256 tokenAmount) {\\\\n    tokenAmount = _convertToAssets(shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewRedeem(uint256 shares) public view returns (uint256 tokenAmount) {\\\\n    uint256 idealAmount = _convertToAssets(shares);\\\\n    uint256 taxFee = _calTaxFee(idealAmount);\\\\n    tokenAmount = idealAmount - taxFee;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function getUserNonce(address user) external view returns (uint256) {\\\\n    return _userNonceMap[user];\\\\n  }\\\\n\\\\n  function _convertToShares(uint256 tokenAmount) internal view returns (uint256 shares) {\\\\n    shares = (tokenAmount * (totalSupply() + 10 ** _virtualOffset())) / (totalAssets() + 1);\\\\n  }\\\\n\\\\n  function _convertToAssets(uint256 shares) internal view returns (uint256 assetAmount) {\\\\n    assetAmount = (shares * (totalAssets() + 1)) / (totalSupply() + 10 ** _virtualOffset());\\\\n  }\\\\n\\\\n  function _deposit(address caller, address receiver, uint256 tokenAmount, uint256 shares) internal {\\\\n    SafeERC20.safeTransferFrom(_asset, caller, address(this), tokenAmount);\\\\n    _mint(receiver, shares);\\\\n    emit Deposit(caller, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  function _withdraw(address caller, address owner, address receiver, uint256 tokenAmount, uint256 shares) internal {\\\\n    if (caller != owner) {\\\\n      _spendAllowance(owner, caller, shares);\\\\n    }\\\\n    _burn(owner, shares);\\\\n    SafeERC20.safeTransfer(_asset, receiver, tokenAmount);\\\\n    emit Withdraw(caller, owner, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  function _msgSender() internal view override(Context, ContextUpgradeable) returns (address) {\\\\n    return super._msgSender();\\\\n  }\\\\n\\\\n  function _msgData() internal view override(Context, ContextUpgradeable) returns (bytes calldata) {\\\\n    return super._msgData();\\\\n  }\\\\n\\\\n  function _contextSuffixLength() internal view override(Context, ContextUpgradeable) returns (uint256) {\\\\n    return super._contextSuffixLength();\\\\n  }\\\\n\\\\n  /// @dev Virtual offset to prevent inflation attacks.\\\\n  function _virtualOffset() private pure returns (uint8) {\\\\n    return 3;\\\\n  }\\\\n\\\\n  /// @dev Helper function to calculate tax.\\\\n  function _calTaxFee(uint256 tokenAmount) private view returns (uint256 taxFee) {\\\\n    taxFee = (tokenAmount * _taxPercent) / MAX_PERCENTAGE;\\\\n  }\\\\n\\\\n  /// @dev Updates domain separator.\\\\n  function _updateDomainSeparator() internal {\\\\n    bytes32 nameHash = keccak256(bytes(\\\\\\\"FloppyVault\\\\\\\"));\\\\n    bytes32 versionHash = keccak256(bytes(\\\\\\\"1\\\\\\\"));\\\\n    assembly (\\\\\\\"memory-safe\\\\\\\") {\\\\n      let free_mem_ptr := mload(0x40) // Load the free memory pointer.\\\\n      mstore(free_mem_ptr, DOMAIN_TYPEHASH)\\\\n      mstore(add(free_mem_ptr, 0x20), nameHash)\\\\n      mstore(add(free_mem_ptr, 0x40), versionHash)\\\\n      mstore(add(free_mem_ptr, 0x60), chainid())\\\\n      mstore(add(free_mem_ptr, 0x80), address())\\\\n      sstore(DOMAIN_SEPARATOR.slot, keccak256(free_mem_ptr, 0xa0))\\\\n    }\\\\n  }\\\\n\\\\n  function _validateSignature(\\\\n    address requester,\\\\n    address recipient,\\\\n    uint256 nonce,\\\\n    uint256 tokenAmount,\\\\n    uint256 deadline,\\\\n    bytes memory signature\\\\n  ) internal view {\\\\n    address signer = ECDSA.recover(\\\\n      MessageHashUtils.toTypedDataHash(\\\\n        DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, requester, recipient, nonce, tokenAmount, deadline))\\\\n      ),\\\\n      signature\\\\n    );\\\\n    if (signer != _signer) revert InvalidSignature();\\\\n  }\\\\n\\\\n  function _increaseUserNonce(address user) internal returns (uint256 newNonce) {\\\\n    newNonce = ++_userNonceMap[user];\\\\n    emit UserNonceIncreased(user, newNonce);\\\\n  }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x052bb198b11bce59e7ae149f7c58897f0ed97a804d45fff527720c1985ad2c94\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/interfaces/IFloppyVault.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport { IERC20 } from \\\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\\";\\\\n\\\\ninterface IFloppyVault is IERC20 {\\\\n  /// @dev Emit when the vault's asset is updated.\\\\n  event AssetUpdated(address indexed asset);\\\\n\\\\n  // @dev Emit when the signer is updated.\\\\n  event SignerUpdated(address indexed asset);\\\\n\\\\n  /// @dev Emit when user deposit ERC20 token.\\\\n  event Deposit(address indexed sender, address indexed owner, uint256 tokenAmount, uint256 shares);\\\\n\\\\n  /// @dev Emit when user withdraw ERC20 token.\\\\n  event Withdraw(\\\\n    address indexed sender, address indexed owner, address indexed receiver, uint256 tokenAmount, uint256 shares\\\\n  );\\\\n\\\\n  /// @dev Emit when user withdraw reward.\\\\n  event WithdrawReward(address indexed sender, uint256 tokenAmount);\\\\n\\\\n  /// @dev Emit when user's nonce is increased.\\\\n  event UserNonceIncreased(address indexed user, uint256 newNonce);\\\\n\\\\n  /// @dev Revert when asset is address(0);\\\\n  error InvalidAssetAddress();\\\\n\\\\n  /// @dev Revert when nonce is not increase by one.\\\\n  error ErrInvalidNonce();\\\\n\\\\n  /// @dev Revert signature expired.\\\\n  error SignatureExprired();\\\\n\\\\n  /// @dev Revert when deposit or mint amount is 0;\\\\n  error InvalidAmount();\\\\n\\\\n  /// @dev Revert when signature is invalid.\\\\n  error InvalidSignature();\\\\n\\\\n  /// @dev Attempted to withdraw more assets than the max amount for `receiver`.\\\\n  error ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\\\n\\\\n  /// @dev Attempted to redeem more shares than the max amount for `receiver`.\\\\n  error ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\\\n\\\\n  /// @dev Return domain type hash.\\\\n  function DOMAIN_TYPEHASH() external pure returns (bytes32);\\\\n\\\\n  /// @dev Return permit type hash.\\\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\\\n\\\\n  /// @dev Return domain seperator.\\\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\\\n\\\\n  /// @dev Return token address managed by this vault.\\\\n  function asset() external view returns (address assetTokenAddress);\\\\n\\\\n  /// @dev Return total token amout of this vault.\\\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\\\n\\\\n  /// @dev Return maximum amount of tokens user can withdraw.\\\\n  function maxWithdraw(address user) external view returns (uint256 tokenAmount);\\\\n\\\\n  /// @dev Return maximum shares user can burn.\\\\n  function maxRedeem(address user) external view returns (uint256 shares);\\\\n\\\\n  /// @dev Return the ideal amount of shares the Vault would exchange for the amount of tokens recieved.\\\\n  function convertToShares(uint256 assetAmount) external view returns (uint256 shares);\\\\n\\\\n  /// @dev Return the ideal amount of tokens the Vault would exchange for the amount of shares.\\\\n  function convertToAssets(uint256 shares) external view returns (uint256 assetAmount);\\\\n\\\\n  /**\\\\n   * @dev Return the actual shares would be recieved when deposit amount of tokens.\\\\n   * NOTE: this function may not equal to convertToShares because of tax, etc.\\\\n   */\\\\n  function previewDeposit(uint256 tokenAmount) external view returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Return the amount of shares need to burn in order to withdraw exactly an amount of tokens.\\\\n   * NOTE: this function may not equal to convertToShares because of tax, etc.\\\\n   */\\\\n  function previewWithdraw(uint256 tokenAmount) external view returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Return the token amount would need to deposit in order to mint exactly amount of shares.\\\\n   * NOTE: this function may not equal to convertToAssets because of tax, etc.\\\\n   */\\\\n  function previewMint(uint256 shares) external view returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Return the actual token amount would get when burn amount of shares.\\\\n   * NOTE: this function may not equal to convertToAssets because of tax, etc.\\\\n   */\\\\n  function previewRedeem(uint256 shares) external view returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Return user's nonce.\\\\n   * Emit an {UserNonceIncreased} event.\\\\n   */\\\\n  function getUserNonce(address user) external view returns (uint256);\\\\n\\\\n  /**\\\\n   * @dev Set Vault's asset.\\\\n   * Just admin can call this function.\\\\n   * Emit an {AssetUpdated} event.\\\\n   */\\\\n  function setAsset(IERC20 asset) external;\\\\n\\\\n  /**\\\\n   * @dev Set Vault signer.\\\\n   * Just admin can call this function.\\\\n   * Emit an {SignerUpdated} event.\\\\n   */\\\\n  function setSigner(address signer) external;\\\\n\\\\n  /**\\\\n   * @dev Deposits assets into the vault and mints shares to the receiver.\\\\n   *\\\\n   * This function transfers assets from the caller to the vault and mints corresponding shares to the receiver.\\\\n   *\\\\n   * @param tokenAmount The amount of tokens to deposit.\\\\n   * @param receiver The address receiving the minted shares.\\\\n   * @return shares The number of shares minted to the receiver.\\\\n   *\\\\n   * @notice The actual number of shares minted may differ from the ideal conversion due to rounding or fees.\\\\n   *\\\\n   * Emits a {Deposit} event.\\\\n   */\\\\n  function deposit(uint256 tokenAmount, address receiver) external returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Withdraws assets from the vault by burning shares from the owner.\\\\n   *\\\\n   * This function burns shares from the owner and transfers the corresponding assets to the receiver.\\\\n   *\\\\n   * @param tokenAmount The amount of tokens to withdraw.\\\\n   * @param receiver The address receiving the withdrawn assets.\\\\n   * @param owner The address whose shares are being burned.\\\\n   * @return shares The number of shares burned from the owner.\\\\n   *\\\\n   * @notice The caller must have approval to burn the owner's shares if not the owner.\\\\n   *\\\\n   * Emits a {Withdraw} event.\\\\n   */\\\\n  function withdraw(uint256 tokenAmount, address receiver, address owner) external returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Withdraws reward with signature of the authorized signer.\\\\n   *\\\\n   * This function transfers assets directly to the recipient without burning shares.\\\\n   * It requires a valid signature from the authorized signer.\\\\n   *\\\\n   * @param recipient The address receiving the reward.\\\\n   * @param tokenAmount The amount of tokens to withdraw as a reward.\\\\n   * @param nonce The current nonce of the recipient, used to prevent replay attacks.\\\\n   * @param deadline The timestamp after which the signature is no longer valid.\\\\n   * @param signature The cryptographic signature authorizing the withdrawal.\\\\n   *\\\\n   * @notice This operation does not affect the recipient's share balance.\\\\n   *\\\\n   * Emits a {WithdrawReward} event.\\\\n   */\\\\n  function permitRewardWithdraw(\\\\n    address recipient,\\\\n    uint256 tokenAmount,\\\\n    uint256 nonce,\\\\n    uint256 deadline,\\\\n    bytes memory signature\\\\n  ) external;\\\\n\\\\n  /**\\\\n   * @dev Mints a specific amount of shares to the receiver by depositing assets.\\\\n   *\\\\n   * This function calculates the required asset amount and transfers it from the caller to mint the specified shares.\\\\n   *\\\\n   * @param shares The number of shares to mint.\\\\n   * @param receiver The address receiving the minted shares.\\\\n   * @return tokenAmount The amount of tokens deposited to mint the shares.\\\\n   *\\\\n   * @notice The actual amount of assets required may be higher than expected due to rounding or fees.\\\\n   *\\\\n   * Emits a {Deposit} event.\\\\n   */\\\\n  function mint(uint256 shares, address receiver) external returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Redeems a specific amount of shares from the owner for assets.\\\\n   *\\\\n   * This function burns the specified amount of shares from the owner and transfers the corresponding assets to the receiver.\\\\n   *\\\\n   * @param shares The number of shares to redeem.\\\\n   * @param receiver The address receiving the assets.\\\\n   * @param owner The address whose shares are being redeemed.\\\\n   * @return tokenAmount The amount of tokens transferred to the receiver.\\\\n   *\\\\n   * @notice The caller must have approval to burn the owner's shares if not the owner.\\\\n   *\\\\n   * Emits a {Withdraw} event.\\\\n   */\\\\n  function redeem(uint256 shares, address receiver, address owner) external returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Pauses the Vault functionality.\\\\n   *\\\\n   * Requirements:\\\\n   * - The caller must have the admin role.\\\\n   *\\\\n   */\\\\n  function pause() external;\\\\n\\\\n  /**\\\\n   * @dev Unpauses the registrar controller's functionality.\\\\n   *\\\\n   * Requirements:\\\\n   * - The caller must have the admin role.\\\\n   *\\\\n   */\\\\n  function unpause() external;\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x106059422373a7810316077b8467a593badf9df2872b45b3332b7bb68765490d\\\",\\\"license\\\":\\\"MIT\\\"}},\\\"version\\\":1}\"",
  "nonce": 44,
  "storageLayout": {
    "storage": [
      {
        "astId": 60286,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 58759,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)58754_storage)"
      },
      {
        "astId": 59281,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)62592_storage)"
      },
      {
        "astId": 64700,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_____gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 64702,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 64707,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_userNonceMap",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64711,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_asset",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IERC20)59642"
      },
      {
        "astId": 64714,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_taxPercent",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 64717,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_signer",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)59642": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)62592_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)62592_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)58754_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)58754_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)62592_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 62591,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)62277_storage"
          }
        ]
      },
      "t_struct(RoleData)58754_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 58751,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 58753,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)62277_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 62272,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 62276,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "timestamp": 1725877643,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "deposit(uint256,address)": {
        "notice": "The actual number of shares minted may differ from the ideal conversion due to rounding or fees. Emits a {Deposit} event."
      },
      "mint(uint256,address)": {
        "notice": "The actual amount of assets required may be higher than expected due to rounding or fees. Emits a {Deposit} event."
      },
      "permitRewardWithdraw(address,uint256,uint256,uint256,bytes)": {
        "notice": "This operation does not affect the recipient's share balance. Emits a {WithdrawReward} event."
      },
      "redeem(uint256,address,address)": {
        "notice": "The caller must have approval to burn the owner's shares if not the owner. Emits a {Withdraw} event."
      },
      "withdraw(uint256,address,address)": {
        "notice": "The caller must have approval to burn the owner's shares if not the owner. Emits a {Withdraw} event."
      }
    }
  }
}